{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js!/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/sims/views/test/DataCorrection/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/sims/views/test/DataCorrection/index.vue","mtime":1645176309858},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-tabs v-model=\"activeName\">\n      <el-tab-pane\n        v-for=\"item in config\"\n        :key=\"item.title\"\n        :label=\"item.title\"\n        :name=\"item.title\"\n      >\n        <c-dynamic-form\n          :form-attrs=\"{ inline: true }\"\n          :form-data=\"formDataMap[item.title]\"\n          :form-items=\"item.formItems\"\n          @change-model=\"handleChangeModel\"\n        />\n      </el-tab-pane>\n    </el-tabs>\n    <div class=\"t-c\">\n      <el-button type=\"primary\" @click=\"handleConfirm\">提交</el-button>\n      <el-button @click=\"handleResetForm\">重置表单</el-button>\n      <el-button type=\"primary\" @click=\"$refs.file.click()\">导入</el-button>\n      <input\n        v-if=\"renderFile\"\n        ref=\"file\"\n        type=\"file\"\n        v-show=\"false\"\n        accept=\".xls,.xlsx\"\n        @change=\"handleChangeFile\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Tabs, TabPane, Button } from 'element-ui';\nimport CDynamicForm from '@/components/common/CDynamicForm';\nimport config from './config/index.js';\nimport axios from '@/plugins/axios';\nimport XLSX from 'xlsx';\n\n/**\n * 读取本地excel文件\n * @param {*} file 文件\n * @return {Promise}\n */\nfunction readWorkbookFromLocalFile(file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader();\n    reader.onload = function(e) {\n      var data = e.target.result;\n      var workbook = XLSX.read(data, { type: 'binary' });\n      resolve(workbook);\n    };\n    reader.onerror = reject;\n    reader.readAsBinaryString(file);\n  });\n}\n\nexport default {\n  name: 'DataCorrection',\n  components: {\n    [Tabs.name]: Tabs,\n    [TabPane.name]: TabPane,\n    [Button.name]: Button,\n    CDynamicForm\n  },\n  props: {},\n  data() {\n    const formDataMap = {};\n    config.forEach(item => {\n      formDataMap[item.title] = {};\n      // 处理字典数据\n      item.formItems.forEach(row => {\n        row.dict && (row.options = this.$D(row.dict));\n      });\n    });\n    return {\n      /** 表单配置数据 */\n      config,\n      /** 所有表单数据 */\n      formDataMap,\n      /** 激活的表单 */\n      activeName: this.$route.query.activeName || config[0].title,\n      /** 渲染input-file */\n      renderFile: true\n    };\n  },\n  computed: {\n    /**\n     * 激活的表单\n     */\n    activeForm() {\n      return this.config.find(item => item.title === this.activeName);\n    }\n  },\n  watch: {\n    /**\n     * 修改激活\n     */\n    activeName() {\n      this.$router.replace({\n        ...this.$route,\n        query: {\n          ...this.$route.query,\n          activeName: this.activeName\n        }\n      });\n    }\n  },\n  created() {},\n  mounted() {},\n  methods: {\n    /**\n     * 存储每个表单的数据\n     * @param {*} model 表单数据\n     */\n    handleChangeModel(model) {\n      this.formDataMap[this.activeName] = model;\n    },\n    /**\n     * 提交表单数据\n     */\n    handleConfirm() {\n      const loading = this.$loading({\n        text: '提交中...'\n      });\n      axios(\n        {\n          url: this.activeForm.url,\n          method: 'POST',\n          data: this.formDataMap[this.activeName]\n        },\n        'simsbff'\n      )\n        .then(() => {\n          this.$message.success('提交成功');\n          // 清空表单\n          // this.handleResetForm();\n        })\n        .finally(() => {\n          loading.close();\n        });\n    },\n    /**\n     * 重置表单\n     */\n    handleResetForm() {\n      this.$set(this.formDataMap, this.activeName, {});\n    },\n    /**\n     * 导入功能\n     */\n    handleImport() {},\n    /**\n     * 改变文件\n     */\n    handleChangeFile(e) {\n      try {\n        const files = e.target.files;\n        if (!files.length) return this.$message.warning('请选择文件');\n        const file = files[0];\n        // 判断是否是excel文件\n        if (['xls', 'xlsx'].indexOf(file.name.split('.')[1]) === -1)\n          return this.$message.warning('请选择xls、xlsx文件！');\n        // 读取excel文件数据\n        readWorkbookFromLocalFile(file)\n          .then(workbook => {\n            // 遍历每张表读取\n            let fromTo = '';\n            let persons = [];\n            for (var sheet in workbook.Sheets) {\n              if (\n                Object.prototype.hasOwnProperty.call(workbook.Sheets, sheet)\n              ) {\n                fromTo = workbook.Sheets[sheet]['!ref'];\n                console.log(fromTo);\n                persons = persons.concat(\n                  XLSX.utils.sheet_to_json(workbook.Sheets[sheet], {\n                    header: this.activeForm.formItems.map(item => item.prop),\n                    defval: '' // 默认值为空字符串\n                  })\n                );\n                break; // 如果只取第一张表，就取消注释这行\n              }\n            }\n            this.batchImport(persons.slice(1));\n          })\n          .catch(e => {\n            console.log(e);\n            this.$message.warning('文件读取失败');\n          });\n      } catch (e) {\n        console.error(e);\n        this.$message.warning('导入失败：未知错误');\n      } finally {\n        this.resetFile();\n      }\n    },\n    /**\n     * 批量导入\n     */\n    async batchImport(list) {\n      const loading = this.$loading({ text: '导入中...' });\n      let successCount = 0;\n      for (let i = 0; i < list.length; i++) {\n        try {\n          // eslint-disable-next-line no-await-in-loop\n          await axios(\n            {\n              url: this.activeForm.url,\n              method: 'POST',\n              data: list[i]\n            },\n            'simsbff'\n          );\n          successCount++;\n          loading.text = `正在导入第${i +\n            1}条数据，已成功导入${successCount}条数据。`;\n        } catch (e) {\n          this.$message.warning('导入部分成功：' + successCount + '条数据');\n          loading.close();\n          return;\n        }\n      }\n      loading.close();\n      this.$message.success('导入成功');\n    },\n    /**\n     * 重置file表单，解决重复选择同一个文件不触发change事件问题\n     */\n    resetFile() {\n      this.renderFile = false;\n      this.$nextTick(() => {\n        this.renderFile = true;\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped></style>\n"],"sourceRoot":"src/pages/sims/views/test/DataCorrection"}]}