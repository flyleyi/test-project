{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js!/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/eslint-loader/index.js??ref--13-0!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/score-analysis/store/modules/dict.js","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/score-analysis/store/modules/dict.js","mtime":1627979214360},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9mdXl1ZXlpL0Rlc2t0b3AvcHJhY3RpY2UvbXV0aWx3YXAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgX3R5cGVvZiBmcm9tICIvVXNlcnMvZnV5dWV5aS9EZXNrdG9wL3ByYWN0aWNlL211dGlsd2FwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0IHsgcXVlcnlEaWN0TGlzdCB9IGZyb20gJy4uLy4uL2FwaS9kaWN0L2luZGV4JzsKaW1wb3J0IHsgaGFzIH0gZnJvbSAnbG9kYXNoJzsgLy8g5a2X5YW45pWw5o2uCgp2YXIgc3RhdGUgPSB7fTsgLy8g6I635Y+W5pa55rOVCgp2YXIgZ2V0dGVycyA9IHsKICAvKioKICAgKiDmoLnmja50eXBl6I635Y+W5a2X5YW45YiX6KGo5pWw5o2uCiAgICog5aaC5p6c5piv6I635Y+W5aSn5LqO5Lik5bGC5a2X5YW45qC55o2u5bGC57qn5L2/55So6YCX5Y+36ZqU5byACiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUg5a2X5YW457G75Z6LCiAgICogQHJldHVybiB7QXJyYXl9CiAgICovCiAgZ2V0TGlzdDogZnVuY3Rpb24gZ2V0TGlzdChzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgIHJldHVybiBfZ2V0TGlzdChzdGF0ZSwgdHlwZSk7CiAgICB9OwogIH0sCgogIC8qKgogICAqIOagueaNruS8oOmAknR5cGXlkoxrZXnmn6Xor6LlrZflhbjnv7vor5EKICAgKiBAcGFyYW0ge3R5cGU6IFN0cmluZywga2V5OiBTdHJpbmd9IOWPguaVsAogICAqIEByZXR1cm4ge1N0cmluZ30KICAgKi8KICBxdWVyeUxhYmVsOiBmdW5jdGlvbiBxdWVyeUxhYmVsKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgaWYgKF90eXBlb2Yob3B0aW9ucykgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIHJldHVybiAnJzsKICAgICAgdmFyIHR5cGUgPSBvcHRpb25zLnR5cGU7CgogICAgICB2YXIgbGlzdCA9IF9nZXRMaXN0KHN0YXRlLCB0eXBlKTsKCiAgICAgIHZhciBrZXkgPSBvcHRpb25zLmtleTsKCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihsaXN0KSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcC52YWx1ZTsKICAgICAgICAgIGlmIChpdGVtLnZhbHVlID09PSBrZXkpIHJldHVybiBpdGVtLmxhYmVsOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICB9CgogICAgICByZXR1cm4gJyc7CiAgICB9OwogIH0KfTsKdmFyIG11dGF0aW9ucyA9IHsKICAvKioKICAgKiDorr7nva7lrZflhbjmlbDmja4KICAgKiBAcGFyYW0geyp9IHN0YXRlIOeKtuaAgQogICAqIEBwYXJhbSB7Kn0gbWFwIG1hcOaVsOaNrgogICAqLwogIFNFVF9ESUNUX01BUDogZnVuY3Rpb24gU0VUX0RJQ1RfTUFQKHN0YXRlLCBtYXApIHsKICAgIC8vIOWMuemFjeacieeahOi/m+ihjOi1i+WAvAogICAgT2JqZWN0LmtleXMoc3RhdGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICBoYXMobWFwLCBrZXkpICYmIChzdGF0ZVtrZXldID0gbWFwW2tleV0pOwogICAgfSk7CiAgfQp9Owp2YXIgYWN0aW9ucyA9IHsKICAvKioKICAgKiDor7fmsYLojrflj5blrZflhbjmlbDmja4KICAgKiBAcGFyYW0geyp9IHBhcmFtMCDnirbmgIEKICAgKiBAcmV0dXJucyB7UHJvbWlzZX0KICAgKi8KICBhamF4R2V0RGF0YTogZnVuY3Rpb24gYWpheEdldERhdGEoX3JlZikgewogICAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSwKICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgIHZhciBrZXlMaXN0ID0gT2JqZWN0LmtleXMoc3RhdGUpOyAvLyDml6DlrZflhbgKCiAgICBpZiAoIWtleUxpc3QubGVuZ3RoKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICByZXR1cm4gcXVlcnlEaWN0TGlzdCh7CiAgICAgIGtleUxpc3Q6IGtleUxpc3QgLy8g6KaB5p+l6K+i55qE5a2X5YW4CgogICAgfSkudGhlbihmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhOwogICAgICAvLyDlsIZsaXN06L2sbWFw57uT5p6E5L6/5LqO5p+l5om+6LWL5YC8CiAgICAgIHZhciBtYXAgPSB7fTsKICAgICAgQXJyYXkuaXNBcnJheShkYXRhKSAmJiBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gbWFwW2l0ZW0uZGljdGlvbmFyeUtleV0gPSBsaXN0Mm9wdGlvbnMoaXRlbS5jaGlsZHJlbiwgJ2RpY3Rpb25hcnlLZXknLCAnZGljdGlvbmFyeVZhbHVlWmgnKTsKICAgICAgfSk7IC8vIOiuvue9ruWAvAoKICAgICAgY29tbWl0KCdTRVRfRElDVF9NQVAnLCBtYXApOwogICAgfSk7CiAgfQp9OwovKioKICog6I635Y+W5a2X5YW45YiX6KGoCiAqIEBwYXJhbSB7Kn0gc3RhdGUg54q25oCBCiAqIEBwYXJhbSB7Kn0gdHlwZSDnsbvlnosKICovCgp2YXIgX2dldExpc3QgPSBmdW5jdGlvbiBfZ2V0TGlzdChzdGF0ZSwgdHlwZSkgewogIHR5cGUgPSB0eXBlIHx8ICcnOwogIHZhciB0eXBlcyA9IHR5cGUuc3BsaXQoJywnKTsKCiAgaWYgKHR5cGVzLmxlbmd0aCA+IDEpIHsKICAgIHZhciBsaXN0ID0gaGFzKHN0YXRlLCB0eXBlc1swXSkgPyBzdGF0ZVt0eXBlc1swXV0gOiBbXTsKCiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciB2YWwgPSB0eXBlc1tpXTsKICAgICAgdmFyIHJlcyA9IGxpc3QuZmluZChmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWUua2V5ID09IHZhbDsKICAgICAgfSk7CiAgICAgIGlmIChyZXMgIT09IHZvaWQgMCkgbGlzdCA9IHJlcy5jaGlsZHJlbiB8fCBbXTtlbHNlIHsKICAgICAgICBsaXN0ID0gW107CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbGlzdDsKICB9IGVsc2UgewogICAgcmV0dXJuIGhhcyhzdGF0ZSwgdHlwZSkgPyBzdGF0ZVt0eXBlXSA6IFtdOwogIH0KfTsKLyoqCiAqIOWwhmxpc3TovazkuLrpu5jorqTnmoRvcHRpb25z5pWw5o2uCiAqIEBwYXJhbSB7Kn0gbGlzdCDmupDmlbDmja7liJfooagKICovCgoKZnVuY3Rpb24gbGlzdDJvcHRpb25zKGxpc3QpIHsKICB2YXIga2V5S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZGljdGlvbmFyeUtleSc7CiAgdmFyIGxhYmVsS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnZGljdGlvbmFyeVRleHQnOwogIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgcmV0dXJuIFtdOwogIHJldHVybiBsaXN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGgpIGl0ZW0uY2hpbGRyZW4gPSBsaXN0Mm9wdGlvbnMoaXRlbS5jaGlsZHJlbiwga2V5S2V5LCBsYWJlbEtleSk7CiAgICByZXR1cm4gewogICAgICB2YWx1ZTogaXRlbVtrZXlLZXldLAogICAgICBsYWJlbDogaXRlbVtsYWJlbEtleV0KICAgIH07CiAgfSk7Cn0KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBzdGF0ZSwKICBnZXR0ZXJzOiBnZXR0ZXJzLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMKfTs="},{"version":3,"sources":["/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/score-analysis/store/modules/dict.js"],"names":["queryDictList","has","state","getters","getList","type","queryLabel","options","list","key","item","value","label","mutations","SET_DICT_MAP","map","Object","keys","forEach","actions","ajaxGetData","commit","keyList","length","Promise","resolve","then","data","Array","isArray","dictionaryKey","list2options","children","types","split","i","val","res","find","keyKey","labelKey","namespaced"],"mappings":"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","sourcesContent":["import { queryDictList } from '../../api/dict/index';\nimport { has } from 'lodash';\n\n// 字典数据\nconst state = {};\n\n// 获取方法\nconst getters = {\n  /**\n   * 根据type获取字典列表数据\n   * 如果是获取大于两层字典根据层级使用逗号隔开\n   * @param {String} type 字典类型\n   * @return {Array}\n   */\n  getList: state => type => getList(state, type),\n  /**\n   * 根据传递type和key查询字典翻译\n   * @param {type: String, key: String} 参数\n   * @return {String}\n   */\n  queryLabel: state => options => {\n    if (typeof options !== 'object' || options === null) return '';\n    var type = options.type;\n    var list = getList(state, type);\n    var key = options.key;\n    for (const item of list) {\n      if (item.value === key) return item.label;\n    }\n    return '';\n  }\n};\n\nconst mutations = {\n  /**\n   * 设置字典数据\n   * @param {*} state 状态\n   * @param {*} map map数据\n   */\n  SET_DICT_MAP(state, map) {\n    // 匹配有的进行赋值\n    Object.keys(state).forEach(key => {\n      has(map, key) && (state[key] = map[key]);\n    });\n  }\n};\n\nconst actions = {\n  /**\n   * 请求获取字典数据\n   * @param {*} param0 状态\n   * @returns {Promise}\n   */\n  ajaxGetData({ state, commit }) {\n    let keyList = Object.keys(state);\n    // 无字典\n    if (!keyList.length) return Promise.resolve();\n    return queryDictList({\n      keyList // 要查询的字典\n    }).then(({ data }) => {\n      // 将list转map结构便于查找赋值\n      let map = {};\n      Array.isArray(data) &&\n        data.forEach(\n          item =>\n            (map[item.dictionaryKey] = list2options(\n              item.children,\n              'dictionaryKey',\n              'dictionaryValueZh'\n            ))\n        );\n      // 设置值\n      commit('SET_DICT_MAP', map);\n    });\n  }\n};\n\n/**\n * 获取字典列表\n * @param {*} state 状态\n * @param {*} type 类型\n */\nconst getList = (state, type) => {\n  type = type || '';\n  var types = type.split(',');\n  if (types.length > 1) {\n    var list = has(state, types[0]) ? state[types[0]] : [];\n    for (var i = 1; i < types.length; i++) {\n      var val = types[i];\n      var res = list.find(function(value) {\n        return value.key == val;\n      });\n      if (res !== void 0) list = res.children || [];\n      else {\n        list = [];\n        break;\n      }\n    }\n    return list;\n  } else {\n    return has(state, type) ? state[type] : [];\n  }\n};\n\n/**\n * 将list转为默认的options数据\n * @param {*} list 源数据列表\n */\nfunction list2options(\n  list,\n  keyKey = 'dictionaryKey',\n  labelKey = 'dictionaryText'\n) {\n  if (!Array.isArray(list)) return [];\n  return list.map(function(item) {\n    if (item.children && item.children.length)\n      item.children = list2options(item.children, keyKey, labelKey);\n    return {\n      value: item[keyKey],\n      label: item[labelKey]\n    };\n  });\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]}]}