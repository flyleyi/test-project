{"remainingRequest":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/thread-loader/dist/cjs.js!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/babel-loader/lib/index.js!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/catering/views/order/OrderManagement/OrderManagePurchase.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/catering/views/order/OrderManagement/OrderManagePurchase.vue","mtime":1645178321129},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2Z1eXVleWkvRGVza3RvcC95anktcHJvamVjdHMvbXVsdGktcHJvamVjdC9tdXRpbHdhcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgQlRhYmxlIGZyb20gJ0AvY29tcG9uZW50cy9idXNpbmVzcy9CVGFibGUnOwppbXBvcnQgeyBiYXNlVHJlZVdpdGhQb3dlclNjaG9vbCBhcyBfYmFzZVRyZWVXaXRoUG93ZXJTY2hvb2wsIGdldFB1cmNoYXNlT3JkZXJMaXN0LCBnZXRQdXJjaGFzZU9yZGVyR2xvYmFsIGFzIF9nZXRQdXJjaGFzZU9yZGVyR2xvYmFsLCBwdXJjaGFzZUV4cG9ydCwgZGljdGlvbmFyeVN0YXR1c0luZm8sIHB1cmNoYXNlRGV0YWlsRXhwb3J0IH0gZnJvbSAnLi4vLi4vLi4vYXBpL29yZGVyJzsKdmFyIHN0YXR1c09iaiA9IHsKICAnMTAxMDAnOiAn6I2J56i/JywKICAnMjAxMDAnOiAn5b6F5a6h5om5JywKICAnMzAxMDAnOiAn5bey5a6h5om55pyq5pS26LSnJywKICAnMzAyMDAnOiAn6YCA5Y2V55Sz6K+35LitJywKICAvL+S+m+W6lOWVhuacquWPkei0pwogICc0MDEwMCc6ICflt7LlrqHmibnmnKrmlLbotKcnLAogICc0MDIwMCc6ICfpgIDljZXnlLPor7fkuK0nLAogIC8v5L6b5bqU5ZWG5bey5Y+R6LSnCiAgJzQwMTEwJzogJ+W3suaUtui0pycsCiAgJy0xMDIwMCc6ICflrqHmibnmnKrpgJrov4cnLAogICctMjAxMDAnOiAn5bey6YCA5Y2VJwp9OwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ09yZGVyTWFuYWdlUHVyY2hhc2UnLAogIGNvbXBvbmVudHM6IHsKICAgIEJUYWJsZTogQlRhYmxlCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYXJlYUxpc3Q6IFtdLAogICAgICBjaXR5TGlzdDogW10sCiAgICAgIGRpc3RyaWN0TGlzdDogW10sCiAgICAgIHNjaG9vbExpc3Q6IFtdLAogICAgICBxdWVyeVBhcmFtczoge30sCiAgICAgIGluaXRGb3JtRGF0YTogewogICAgICAgIHByb3ZpbmNlQ29kZTogbnVsbCwKICAgICAgICBjaXR5Q29kZTogbnVsbCwKICAgICAgICBkaXN0cmljdENvZGU6IG51bGwsCiAgICAgICAgcGFyZW50RGVwdElkOiBudWxsLAogICAgICAgIGRlcHRJZDogbnVsbCwKICAgICAgICBjYXJlYXRlRGF0ZTogW10sCiAgICAgICAgb3JkZXJEYXRlOiBbXSwKICAgICAgICBhcnJpdmFsVGltZTogbnVsbCwKICAgICAgICBzdGF0dXM6IG51bGwsCiAgICAgICAgY3JlYXRvckFuZEF1ZGl0TmFtZTogbnVsbAogICAgICB9LAogICAgICBmb3JtUGFyYW1zOiB7fSwKICAgICAgZGlzYWJsZWRFeHBvcnQ6IHRydWUsCiAgICAgIHN0YXR1c09iajogc3RhdHVzT2JqLAogICAgICBzdW1EYXRhOiB7fSwKICAgICAgaGVhZGVyczogW3sKICAgICAgICBsYWJlbDogJ+iuouWNlee8luWPtycsCiAgICAgICAgcHJvcDogJ29yZGVyTm8nLAogICAgICAgIHdpZHRoOiAyMDAKICAgICAgfSwgLy8gewogICAgICAvLyAgIGxhYmVsOiAn5Yib5bu65pel5pyfJywKICAgICAgLy8gICBwcm9wOiAnY3JlYXRlVGltZScsCiAgICAgIC8vICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgIC8vICAgd2lkdGg6IDEwMAogICAgICAvLyB9LAogICAgICB7CiAgICAgICAgbGFiZWw6ICfkuIvljZXml6XmnJ8nLAogICAgICAgIHByb3A6ICdjb25maXJtVGltZScsCiAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgd2lkdGg6IDEwMAogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICfliLDotKfml6XmnJ8nLAogICAgICAgIHByb3A6ICdhcnJpdmFsVGltZScsCiAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgd2lkdGg6IDEwMAogICAgICB9LCAvLyB7CiAgICAgIC8vICAgbGFiZWw6ICfnnIHku70nLAogICAgICAvLyAgIHByb3A6ICdwcm92aW5jZU5hbWUnLAogICAgICAvLyAgIHdpZHRoOiA4MAogICAgICAvLyB9LAogICAgICAvLyB7CiAgICAgIC8vICAgbGFiZWw6ICflnLDnuqfluIInLAogICAgICAvLyAgIHdpZHRoOiA4MCwKICAgICAgLy8gICBwcm9wOiAnY2l0eU5hbWUnCiAgICAgIC8vIH0sCiAgICAgIC8vIHsKICAgICAgLy8gICBsYWJlbDogJ+WMui/ljr8nLAogICAgICAvLyAgIHdpZHRoOiA4MCwKICAgICAgLy8gICBwcm9wOiAnZGlzdHJpY3ROYW1lJywKICAgICAgLy8gICAnc2hvdy1vdmVyZmxvdy10b29sdGlwJzogdHJ1ZQogICAgICAvLyB9LAogICAgICB7CiAgICAgICAgbGFiZWw6ICflrabmoKEnLAogICAgICAgIHByb3A6ICdwYXJlbnREZXB0TmFtZScsCiAgICAgICAgbWluV2lkdGg6IDEyMCwKICAgICAgICAnc2hvdy1vdmVyZmxvdy10b29sdGlwJzogdHJ1ZQogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICflrabpg6gnLAogICAgICAgIHByb3A6ICdkZXB0TmFtZScsCiAgICAgICAgbWluV2lkdGg6IDEyMCwKICAgICAgICAnc2hvdy1vdmVyZmxvdy10b29sdGlwJzogdHJ1ZQogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICfmiJDmnKzlj4LogIPku7fvvIjlhYPvvIknLAogICAgICAgIHByb3A6ICdjb3N0UHJpY2UnLAogICAgICAgIHdpZHRoOiAxMjAgLy8gYWxpZ246ICdyaWdodCcKCiAgICAgIH0sIC8vIHsKICAgICAgLy8gICBsYWJlbDogJ+WUruS7t++8iOWFg++8iScsCiAgICAgIC8vICAgcHJvcDogJ3NlbGxpbmdQcmljZScsCiAgICAgIC8vICAgd2lkdGg6IDEwMAogICAgICAvLyAgIC8vIGFsaWduOiAncmlnaHQnCiAgICAgIC8vIH0sCiAgICAgIHsKICAgICAgICBsYWJlbDogJ+mHh+i0reS6uicsCiAgICAgICAgd2lkdGg6IDgwLAogICAgICAgIHByb3A6ICdjcmVhdG9yTmFtZScKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAn5a6h5om55Lq6JywKICAgICAgICB3aWR0aDogODAsCiAgICAgICAgcHJvcDogJ2F1ZGl0TmFtZScKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAn5oCn6LSoJywKICAgICAgICB3aWR0aDogNjAsCiAgICAgICAgcHJvcDogJ3R5cGUnLAogICAgICAgIGNvbFR5cGU6ICdjb2x1bW4nCiAgICAgIH0sIHsKICAgICAgICBsYWJlbDogJ+eKtuaAgScsCiAgICAgICAgd2lkdGg6IDEwMCwKICAgICAgICBwcm9wOiAnc3RhdHVzJywKICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICBmaXhlZDogJ3JpZ2h0JwogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICfmk43kvZwnLAogICAgICAgIGNvbFR5cGU6ICdjb2x1bW4nLAogICAgICAgIHNsb3ROYW1lOiAnb3BlcmF0aW9uJywKICAgICAgICBmaXhlZDogJ3JpZ2h0JywKICAgICAgICB3aWR0aDogJzYwcHgnCiAgICAgIH1dLAogICAgICBwaWNrZXJPcHRpb25zOiB7Ly8gZGlzYWJsZWREYXRlKHRpbWUpIHsKICAgICAgICAvLyAgIC8vIHJldHVybiB0aW1lLmdldFRpbWUoKSA8IERhdGUubm93KCk7CiAgICAgICAgLy8gfQogICAgICB9LAogICAgICBleHBhbmRzOiBbXSwKICAgICAgb3JkZXJPcHRpb25zOiBbewogICAgICAgIHZhbHVlOiAnJywKICAgICAgICBsYWJlbDogJ+m7mOiupOaOkuW6jycKICAgICAgfSwgewogICAgICAgIHZhbHVlOiAnYXNjJywKICAgICAgICBsYWJlbDogJ+WIsOi0p+aXtumXtOWNh+W6jycKICAgICAgfSwgewogICAgICAgIHZhbHVlOiAnZGVzYycsCiAgICAgICAgbGFiZWw6ICfliLDotKfml7bpl7TpmY3luo8nCiAgICAgIH1dLAogICAgICBzb3J0TW9kZWw6ICcnLAogICAgICBpc09yZGVyZWQ6IGZhbHNlCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGZvcm1JdGVtczogZnVuY3Rpb24gZm9ybUl0ZW1zKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGZvcm1JdGVtcyA9IFt7CiAgICAgICAgdHlwZTogJ3NlbGVjdCcsCiAgICAgICAgLy8gbGFiZWw6ICcnLAogICAgICAgIHByb3A6ICdwcm92aW5jZUNvZGUnLAogICAgICAgIHZhbHVlS2V5OiAnY29kZScsCiAgICAgICAgbGFiZWxLZXk6ICduYW1lJywKICAgICAgICAvLyBsYWJlbFByb3A6ICdwcm92aW5jZU5hbWUnLAogICAgICAgIG9wdGlvbnM6IHRoaXMuYXJlYUxpc3QsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHBsYWNlaG9sZGVyOiAn55yB5Lu9JwogICAgICAgIH0gLy8gYWpheDogbW9kZWwgPT4gewogICAgICAgIC8vICAgcmV0dXJuIGJhc2VUcmVlKCk7CiAgICAgICAgLy8gfQoKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgIC8vIGxhYmVsOiAn5Zyw57qn5biC77yaJywKICAgICAgICBwcm9wOiAnY2l0eUNvZGUnLAogICAgICAgIHBhcmVudFByb3A6ICdwcm92aW5jZUNvZGUnLAogICAgICAgIC8vIGxhYmVsUHJvcDogJ2NpdHlOYW1lJywKICAgICAgICB2YWx1ZUtleTogJ2NvZGUnLAogICAgICAgIGxhYmVsS2V5OiAnbmFtZScsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHBsYWNlaG9sZGVyOiAn5Zyw57qn5biCJwogICAgICAgIH0sCiAgICAgICAgLy8gb3B0aW9uczogdGhpcy5jaXR5TGlzdCwKICAgICAgICBhamF4OiBmdW5jdGlvbiBhamF4KG1vZGVsKSB7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMuZ2V0Q2l0eUxpc3QobW9kZWwucHJvdmluY2VDb2RlKTsKCiAgICAgICAgICBpZiAoX3RoaXMuJGhhcyhbJ29yZGVyLXB1cmNoYXNlLW1hbmFnZS1kZWZhdWx0LWZpcnN0J10pICYmIHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoKSB7CiAgICAgICAgICAgIF90aGlzLiRyZWZzLmJUYWJsZS4kcmVmcy5jRHluYW1pY0Zvcm0uc2V0TW9kZWxEYXRhKCdjaXR5Q29kZScsIHJlc3VsdFswXS5jb2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3NlbGVjdCcsCiAgICAgICAgLy8gbGFiZWw6ICfljLov5Y6/77yaJywKICAgICAgICBwcm9wOiAnZGlzdHJpY3RDb2RlJywKICAgICAgICBwYXJlbnRQcm9wOiAnY2l0eUNvZGUnLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBwbGFjZWhvbGRlcjogJ+WMui/ljr8nCiAgICAgICAgfSwKICAgICAgICAvLyBsYWJlbFByb3A6ICdkaXN0cmljdE5hbWUnLAogICAgICAgIC8vIG9wdGlvbnM6IHRoaXMuZGlzdHJpY3RMaXN0LAogICAgICAgIHZhbHVlS2V5OiAnY29kZScsCiAgICAgICAgbGFiZWxLZXk6ICduYW1lJywKICAgICAgICBhamF4OiBmdW5jdGlvbiBhamF4KG1vZGVsKSB7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMuZ2V0Q291bnR5TGlzdChtb2RlbC5jaXR5Q29kZSk7CgogICAgICAgICAgaWYgKF90aGlzLiRoYXMoWydvcmRlci1wdXJjaGFzZS1tYW5hZ2UtZGVmYXVsdC1maXJzdCddKSAmJiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCkgewogICAgICAgICAgICBfdGhpcy4kcmVmcy5iVGFibGUuJHJlZnMuY0R5bmFtaWNGb3JtLnNldE1vZGVsRGF0YSgnZGlzdHJpY3RDb2RlJywgcmVzdWx0WzBdLmNvZGUpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnc2VsZWN0JywKICAgICAgICAvLyBsYWJlbDogJ+WMui/ljr/vvJonLAogICAgICAgIHByb3A6ICdwYXJlbnREZXB0SWQnLAogICAgICAgIHBhcmVudFByb3A6ICdkaXN0cmljdENvZGUnLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBwbGFjZWhvbGRlcjogJ+WtpuagoScKICAgICAgICB9LAogICAgICAgIC8vIGxhYmVsUHJvcDogJ2Rpc3RyaWN0TmFtZScsCiAgICAgICAgLy8gb3B0aW9uczogdGhpcy5kaXN0cmljdExpc3QsCiAgICAgICAgdmFsdWVLZXk6ICdpZCcsCiAgICAgICAgbGFiZWxLZXk6ICduYW1lJywKICAgICAgICBhamF4OiBmdW5jdGlvbiBhamF4KG1vZGVsKSB7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMuZ2V0U2Nob29sTGlzdChtb2RlbC5kaXN0cmljdENvZGUpOwoKICAgICAgICAgIGlmIChfdGhpcy4kaGFzKFsnb3JkZXItcHVyY2hhc2UtbWFuYWdlLWRlZmF1bHQtZmlyc3QnXSkgJiYgcmVzdWx0ICYmIHJlc3VsdC5sZW5ndGgpIHsKICAgICAgICAgICAgX3RoaXMuJHJlZnMuYlRhYmxlLiRyZWZzLmNEeW5hbWljRm9ybS5zZXRNb2RlbERhdGEoJ3BhcmVudERlcHRJZCcsIHJlc3VsdFswXS5pZCk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgIC8vIGxhYmVsOiAn5Yy6L+WOv++8micsCiAgICAgICAgcHJvcDogJ2RlcHRJZCcsCiAgICAgICAgcGFyZW50UHJvcDogJ3BhcmVudERlcHRJZCcsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHBsYWNlaG9sZGVyOiAn5a2m6YOoJwogICAgICAgIH0sCiAgICAgICAgLy8gbGFiZWxQcm9wOiAnZGlzdHJpY3ROYW1lJywKICAgICAgICAvLyBvcHRpb25zOiB0aGlzLmRpc3RyaWN0TGlzdCwKICAgICAgICB2YWx1ZUtleTogJ2lkJywKICAgICAgICBsYWJlbEtleTogJ25hbWUnLAogICAgICAgIGFqYXg6IGZ1bmN0aW9uIGFqYXgobW9kZWwpIHsKICAgICAgICAgIHZhciByZXN1bHQgPSBfdGhpcy5nZXRTY2hvb2xCcmFuY2hMaXN0KG1vZGVsLnBhcmVudERlcHRJZCk7CgogICAgICAgICAgaWYgKF90aGlzLiRoYXMoWydvcmRlci1wdXJjaGFzZS1tYW5hZ2UtZGVmYXVsdC1maXJzdCddKSAmJiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCkgewogICAgICAgICAgICBfdGhpcy4kcmVmcy5iVGFibGUuJHJlZnMuY0R5bmFtaWNGb3JtLnNldE1vZGVsRGF0YSgnZGVwdElkJywgcmVzdWx0WzBdLmlkKTsKCiAgICAgICAgICAgIF90aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgX3RoaXMuJHJlZnMuYlRhYmxlICYmIF90aGlzLiRyZWZzLmJUYWJsZS5hamF4R2V0VGFibGVEYXRhQnlQYWdlKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnZGF0ZS1waWNrZXInLAogICAgICAgIHByb3A6ICdjYXJlYXRlRGF0ZScsCiAgICAgICAgbGFiZWw6ICfliJvlu7rml6XmnJ8nLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAnc3RhcnQtcGxhY2Vob2xkZXInOiAn5byA5aeL5pel5pyfJywKICAgICAgICAgICdyYW5nZS1zZXBhcmF0b3InOiAnLScsCiAgICAgICAgICAnZW5kLXBsYWNlaG9sZGVyJzogJ+e7k+adn+aXpeacnycsCiAgICAgICAgICB0eXBlOiAnZGF0ZXJhbmdlJywKICAgICAgICAgICd2YWx1ZS1mb3JtYXQnOiAneXl5eS1NTS1kZCcsCiAgICAgICAgICAncGlja2VyLW9wdGlvbnMnOiB0aGlzLnBpY2tlck9wdGlvbnMKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnZGF0ZS1waWNrZXInLAogICAgICAgIHByb3A6ICdvcmRlckRhdGUnLAogICAgICAgIGxhYmVsOiAn5LiL5Y2V5pel5pyfJywKICAgICAgICBhdHRyczogewogICAgICAgICAgJ3N0YXJ0LXBsYWNlaG9sZGVyJzogJ+W8gOWni+aXpeacnycsCiAgICAgICAgICAnZW5kLXBsYWNlaG9sZGVyJzogJ+e7k+adn+aXpeacnycsCiAgICAgICAgICAncmFuZ2Utc2VwYXJhdG9yJzogJy0nLAogICAgICAgICAgdHlwZTogJ2RhdGVyYW5nZScsCiAgICAgICAgICAndmFsdWUtZm9ybWF0JzogJ3l5eXktTU0tZGQnLAogICAgICAgICAgJ3BpY2tlci1vcHRpb25zJzogdGhpcy5waWNrZXJPcHRpb25zCiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ2RhdGUtcGlja2VyJywKICAgICAgICBwcm9wOiAnYXJyaXZhbFRpbWUnLAogICAgICAgIGxhYmVsOiAn5Yiw6LSn5pel5pyfJywKICAgICAgICBhdHRyczogewogICAgICAgICAgcGxhY2Vob2xkZXI6ICfliLDotKfml6XmnJ8nLAogICAgICAgICAgJ3ZhbHVlLWZvcm1hdCc6ICd5eXl5LU1NLWRkJwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgIHByb3A6ICdzdGF0dXMnLAogICAgICAgIGxhYmVsOiAn6K6i5Y2V54q25oCBJywKICAgICAgICBsYWJlbEtleTogJ2tleScsCiAgICAgICAgdmFsdWVLZXk6ICd2YWx1ZScsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHBsYWNlaG9sZGVyOiAn6K6i5Y2V54q25oCBJwogICAgICAgIH0sCiAgICAgICAgLy8gb3B0aW9uczogdGhpcy4kRCgnQlVZRVJfT1BFUkFUSU9OX1NUQVRVUycpLAogICAgICAgIGFqYXg6IGZ1bmN0aW9uIGFqYXgoKSB7CiAgICAgICAgICByZXR1cm4gZGljdGlvbmFyeVN0YXR1c0luZm8oewogICAgICAgICAgICB0eXBlOiAnQlVZRVJfT1JERVJfU1RBVFVTJwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlcy5kYXRhKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAnaW5wdXQnLAogICAgICAgIHByb3A6ICdjcmVhdG9yQW5kQXVkaXROYW1lJywKICAgICAgICBhdHRyczogewogICAgICAgICAgcGxhY2Vob2xkZXI6ICfph4fotK3kurrjgIHlrqHmibnkurrlp5PlkI3jgIHorqLljZXnvJblj7cnCiAgICAgICAgfQogICAgICB9XTsKICAgICAgcmV0dXJuIGZvcm1JdGVtczsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmJhc2VUcmVlV2l0aFBvd2VyU2Nob29sKCk7CiAgfSwKICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uIGFjdGl2YXRlZCgpIHsKICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGhpcy5pbml0Rm9ybURhdGEpOwogICAgY29uc29sZS5sb2codGhpcy5xdWVyeVBhcmFtcyk7CiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgX3RoaXMyLiRyZWZzLmJUYWJsZS4kcmVmcy5jRHluYW1pY0Zvcm0uc2V0TW9kZWxEYXRhKGl0ZW0sIF90aGlzMi5xdWVyeVBhcmFtc1tpdGVtXSk7CiAgICB9KTsKICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMyLiRyZWZzLmJUYWJsZSAmJiBfdGhpczIuJHJlZnMuYlRhYmxlLmFqYXhHZXRUYWJsZURhdGFCeVBhZ2UoKTsKICAgIH0pOwogIH0sCiAgbWV0aG9kczogewogICAgYmFzZVRyZWVXaXRoUG93ZXJTY2hvb2w6IGZ1bmN0aW9uIGJhc2VUcmVlV2l0aFBvd2VyU2Nob29sKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYmFzZVRyZWVXaXRoUG93ZXJTY2hvb2woKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczMuYXJlYUxpc3QgPSByZXMuZGF0YSB8fCBbXTsKCiAgICAgICAgaWYgKF90aGlzMy4kaGFzKFsnb3JkZXItcHVyY2hhc2UtbWFuYWdlLWRlZmF1bHQtZmlyc3QnXSkgJiYgX3RoaXMzLmFyZWFMaXN0Lmxlbmd0aCkgewogICAgICAgICAgX3RoaXMzLiRyZWZzLmJUYWJsZS4kcmVmcy5jRHluYW1pY0Zvcm0uc2V0TW9kZWxEYXRhKCdwcm92aW5jZUNvZGUnLCBfdGhpczMuYXJlYUxpc3RbMF0uY29kZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm47CiAgICAgIH0pOwogICAgfSwKICAgIGZldGNoVGFibGVEYXRhOiBmdW5jdGlvbiBmZXRjaFRhYmxlRGF0YShmb3JtKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdGhpcy5xdWVyeVBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIF9vYmplY3RTcHJlYWQoe30sIGZvcm0pKTsKICAgICAgdmFyIG9yZGVyRGF0ZSA9IGZvcm0ub3JkZXJEYXRlLAogICAgICAgICAgY2FyZWF0ZURhdGUgPSBmb3JtLmNhcmVhdGVEYXRlLAogICAgICAgICAgc3RhdHVzID0gZm9ybS5zdGF0dXM7CiAgICAgIHZhciBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBmb3JtLCB7CiAgICAgICAgY3JlYXRlU3RhcnREYXRlOiBjYXJlYXRlRGF0ZSAmJiBjYXJlYXRlRGF0ZVswXSwKICAgICAgICBjcmVhdGVFbmREYXRlOiBjYXJlYXRlRGF0ZSAmJiBjYXJlYXRlRGF0ZVsxXSwKICAgICAgICBvcmRlclN0YXJ0RGF0ZTogb3JkZXJEYXRlICYmIG9yZGVyRGF0ZVswXSwKICAgICAgICBvcmRlckVuZERhdGU6IG9yZGVyRGF0ZSAmJiBvcmRlckRhdGVbMV0sCiAgICAgICAgc3RhdHVzOiBzdGF0dXMgJiYgc3RhdHVzLnRvU3RyaW5nKCkKICAgICAgfSk7CiAgICAgIGRlbGV0ZSBwYXJhbXMub3JkZXJEYXRlOwogICAgICBkZWxldGUgcGFyYW1zLmNhcmVhdGVEYXRlOwoKICAgICAgaWYgKHRoaXMuaXNPcmRlcmVkKSB7CiAgICAgICAgdGhpcy5mb3JtUGFyYW1zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwYXJhbXMpLCB7fSwgewogICAgICAgICAgc29ydENvbHVtbjogJ2Fycml2YWxUaW1lJwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZm9ybVBhcmFtcyA9IHBhcmFtczsKICAgICAgICBkZWxldGUgdGhpcy5mb3JtUGFyYW1zLnNvcnRDb2x1bW47CiAgICAgIH0KCiAgICAgIHRoaXMuZ2V0UHVyY2hhc2VPcmRlckdsb2JhbCh0aGlzLmZvcm1QYXJhbXMpOwogICAgICB0aGlzLmV4cGFuZHMgPSBbXTsKICAgICAgcmV0dXJuIGdldFB1cmNoYXNlT3JkZXJMaXN0KHRoaXMuZm9ybVBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgdmFyIHRvdGFsID0gcmVzLmRhdGEgJiYgcmVzLmRhdGEudG90YWwgfHwgMDsKCiAgICAgICAgaWYgKHRvdGFsKSB7CiAgICAgICAgICBfdGhpczQuZGlzYWJsZWRFeHBvcnQgPSBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXM0LmRpc2FibGVkRXhwb3J0ID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgcmVzLmRhdGEucmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIGlmICghKGl0ZW0uc3RhdHVzID09ICctMjAxMDAnIHx8IGl0ZW0uc3RhdHVzID09ICc0MDExMCcpKSB7CiAgICAgICAgICAgICAgX3RoaXM0LmV4cGFuZHMucHVzaChTdHJpbmcoaXRlbS5vcmRlcklkKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgcmVzb2x2ZShyZXMpOwogICAgICAgIH0pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzNC5kaXNhYmxlZEV4cG9ydCA9IHRydWU7CiAgICAgIH0pOwogICAgfSwKICAgIGdldENpdHlMaXN0OiBmdW5jdGlvbiBnZXRDaXR5TGlzdChwcm92aW5jZUNvZGUpIHsKICAgICAgdmFyIGNpdHlMaXN0ID0gW107CgogICAgICBpZiAoIXByb3ZpbmNlQ29kZSkgewogICAgICAgIHJldHVybiBjaXR5TGlzdDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjaXR5TGlzdCA9IHRoaXMuYXJlYUxpc3QuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgcmV0dXJuIGl0ZW0uY29kZSA9PT0gcHJvdmluY2VDb2RlOwogICAgICAgIH0pLmNoaWxkTGlzdDsKICAgICAgfQoKICAgICAgdGhpcy5jaXR5TGlzdCA9IGNpdHlMaXN0OwogICAgICByZXR1cm4gY2l0eUxpc3Q7CiAgICB9LAogICAgZ2V0Q291bnR5TGlzdDogZnVuY3Rpb24gZ2V0Q291bnR5TGlzdChjaXR5Q29kZSkgewogICAgICB2YXIgZGlzdHJpY3RMaXN0ID0gW107CgogICAgICBpZiAoIWNpdHlDb2RlKSB7CiAgICAgICAgcmV0dXJuIGRpc3RyaWN0TGlzdDsKICAgICAgfSBlbHNlIHsKICAgICAgICBkaXN0cmljdExpc3QgPSB0aGlzLmNpdHlMaXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtLmNvZGUgPT09IGNpdHlDb2RlOwogICAgICAgIH0pLmNoaWxkTGlzdDsKICAgICAgfQoKICAgICAgdGhpcy5kaXN0cmljdExpc3QgPSBkaXN0cmljdExpc3Q7CiAgICAgIHJldHVybiBkaXN0cmljdExpc3Q7CiAgICB9LAogICAgZ2V0U2Nob29sTGlzdDogZnVuY3Rpb24gZ2V0U2Nob29sTGlzdChkaXN0cmljdENvZGUpIHsKICAgICAgdmFyIHNjaG9vbExpc3QgPSBbXTsKCiAgICAgIGlmICghZGlzdHJpY3RDb2RlKSB7CiAgICAgICAgcmV0dXJuIHNjaG9vbExpc3Q7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2Nob29sTGlzdCA9IHRoaXMuZGlzdHJpY3RMaXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtLmNvZGUgPT09IGRpc3RyaWN0Q29kZTsKICAgICAgICB9KS5zY2hvb2xMaXN0OwogICAgICB9CgogICAgICB0aGlzLnNjaG9vbExpc3QgPSBzY2hvb2xMaXN0OwogICAgICByZXR1cm4gc2Nob29sTGlzdDsKICAgIH0sCiAgICBnZXRTY2hvb2xCcmFuY2hMaXN0OiBmdW5jdGlvbiBnZXRTY2hvb2xCcmFuY2hMaXN0KHNjaG9vbENvZGUpIHsKICAgICAgdmFyIHNjaG9vbEJyYW5jaExpc3QgPSBbXTsKCiAgICAgIGlmICghc2Nob29sQ29kZSkgewogICAgICAgIHJldHVybiBzY2hvb2xCcmFuY2hMaXN0OwogICAgICB9IGVsc2UgewogICAgICAgIHNjaG9vbEJyYW5jaExpc3QgPSB0aGlzLnNjaG9vbExpc3QuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgcmV0dXJuIGl0ZW0uaWQgPT09IHNjaG9vbENvZGU7CiAgICAgICAgfSkuc2Nob29sQnJhbmNoUmVzcER0b0xpc3Q7CiAgICAgIH0KCiAgICAgIHJldHVybiBzY2hvb2xCcmFuY2hMaXN0OwogICAgfSwKICAgIGdldFJvd0N1c3RvbU5hbWU6IGZ1bmN0aW9uIGdldFJvd0N1c3RvbU5hbWUoX3JlZikgewogICAgICB2YXIgcm93ID0gX3JlZi5yb3c7CgogICAgICBpZiAoIXJvdy5wYXJlbnRJZCAmJiByb3cuY2hpbGRyZW4ubGVuZ3RoID09IDApIHsKICAgICAgICByZXR1cm4gJ3RhYmxlLW5vLWV4cGFuZCc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CiAgICB9LAogICAgZ2V0UHVyY2hhc2VPcmRlckdsb2JhbDogZnVuY3Rpb24gZ2V0UHVyY2hhc2VPcmRlckdsb2JhbChwYXJhbXMpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICBfZ2V0UHVyY2hhc2VPcmRlckdsb2JhbChwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIHZhciBkYXRhID0gcmVzLmRhdGEgfHwge307CiAgICAgICAgX3RoaXM1LnN1bURhdGEgPSBkYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBtYW5hZ2VPcmRlcjogZnVuY3Rpb24gbWFuYWdlT3JkZXIocm93KSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBwYXRoOiAnL29yZGVyL29yZGVyLW9wZXJhLXB1cmNoYXNlJywKICAgICAgICBxdWVyeTogewogICAgICAgICAgb3BlcmFUeXBlOiAnb3JkZXJNYW5hZ2UnLAogICAgICAgICAgb3JkZXJGbGFnOiByb3cuc3RhdHVzLAogICAgICAgICAgb3JkZXJJZDogcm93Lm9yZGVySWQsCiAgICAgICAgICBpc1BhcmVudDogcm93LnBhcmVudElkID8gZmFsc2UgOiB0cnVlCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBleHBvcnRPcmRlcjogZnVuY3Rpb24gZXhwb3J0T3JkZXIoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdmFyIHBhcmFtcyA9IHRoaXMuZm9ybVBhcmFtczsKICAgICAgZGVsZXRlIHBhcmFtcy5saW1pdDsKICAgICAgZGVsZXRlIHBhcmFtcy5vZmZzZXQ7CiAgICAgIGRlbGV0ZSBwYXJhbXMucGFnZU51bTsKICAgICAgZGVsZXRlIHBhcmFtcy5wYWdlU2l6ZTsKICAgICAgcHVyY2hhc2VFeHBvcnQocGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczYuJHV0aWwuZG93bkxvYWRCbG9iKHJlcywgIlx1OTFDN1x1OEQyRFx1OEJBMlx1NTM1NVx1NkM0N1x1NjAzQlx1NUJGQ1x1NTFGQV8iLmNvbmNhdChfdGhpczYuZm9ybWF0ZURhdGUoRGF0ZS5ub3coKSwgMykpKTsKICAgICAgfSk7CiAgICB9LAogICAgZm9ybWF0ZURhdGU6IGZ1bmN0aW9uIGZvcm1hdGVEYXRlKHRpbWVzdGFtcCkgewogICAgICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNDsKCiAgICAgIGlmICghdGltZXN0YW1wKSB7CiAgICAgICAgcmV0dXJuICctJzsKICAgICAgfQoKICAgICAgdmFyIHRpbWUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApOwogICAgICB2YXIgeWVhciA9IHRpbWUuZ2V0RnVsbFllYXIoKTsKICAgICAgdmFyIG1vbnRoID0gKHRpbWUuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTsKICAgICAgdmFyIGRhdGUgPSB0aW1lLmdldERhdGUoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgIHZhciBob3VycyA9IHRpbWUuZ2V0SG91cnMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgIHZhciBtaW51dGUgPSB0aW1lLmdldE1pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgIHZhciBzZWNvbmQgPSB0aW1lLmdldFNlY29uZHMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7CgogICAgICBpZiAodHlwZSA9PSAxKSB7CiAgICAgICAgcmV0dXJuIHllYXIgKyAn5bm0JyArIG1vbnRoICsgJ+aciCcgKyBkYXRlICsgJ+aXpSc7CiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAyKSB7CiAgICAgICAgcmV0dXJuIHllYXIgKyAnLScgKyBtb250aCArICctJyArIGRhdGUgKyAnICcgKyBob3VycyArICc6JyArIG1pbnV0ZSArICc6JyArIHNlY29uZDsKICAgICAgfSBlbHNlIGlmICh0eXBlID09IDMpIHsKICAgICAgICByZXR1cm4geWVhciArICdfJyArIG1vbnRoICsgJ18nICsgZGF0ZSArICdfJyArIGhvdXJzICsgJ18nICsgbWludXRlICsgJ18nICsgc2Vjb25kOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gNCkgewogICAgICAgIHJldHVybiB5ZWFyICsgJy0nICsgbW9udGggKyAnLScgKyBkYXRlOwogICAgICB9CiAgICB9LAogICAgY2hhbmdlU29ydE1vZGVsOiBmdW5jdGlvbiBjaGFuZ2VTb3J0TW9kZWwoc29ydE1vZGVsKSB7CiAgICAgIHZhciBwYXJhbXMgPSB7CiAgICAgICAgc29ydE1vZGVsOiBzb3J0TW9kZWwsCiAgICAgICAgc29ydENvbHVtbjogc29ydE1vZGVsID8gJ2Fycml2YWxUaW1lJyA6ICcnCiAgICAgIH07CiAgICAgIHRoaXMuZmV0Y2hUYWJsZURhdGEoT2JqZWN0LmFzc2lnbih0aGlzLmZvcm1QYXJhbXMsIHBhcmFtcykpOwogICAgfSwKICAgIGRlc2NlbmRpbmdPcmRlcjogZnVuY3Rpb24gZGVzY2VuZGluZ09yZGVyKCkgewogICAgICB0aGlzLmlzT3JkZXJlZCA9ICF0aGlzLmlzT3JkZXJlZDsKICAgICAgdGhpcy4kcmVmcy5iVGFibGUub25SZWZyZXNoVGFibGUoKTsKICAgIH0KICB9Cn07"},null]}