{"remainingRequest":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/babel-loader/lib/index.js!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/eslint-loader/index.js??ref--13-0!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/sims/plugins/common/area.js","dependencies":[{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/sims/plugins/common/area.js","mtime":1627979214385},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiL1VzZXJzL2Z1eXVleWkvRGVza3RvcC95anktcHJvamVjdHMvbXVsdGktcHJvamVjdC9tdXRpbHdhcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0IHsgcXVlcnlEaWN0TGlzdCB9IGZyb20gJy4uLy4uL2FwaS9kaWN0L2luZGV4JzsgLy8g6KGM5pS/5Yy65Z+f5pWw5o2uCgp2YXIgYXJlYU1hcCA9IHt9OyAvLyDnnIHljLrln5/nvJbnoIEKCnZhciBwcm92aW5jZU1hcCA9IHt9OyAvLyDluILljLrln5/nvJbnoIEKCnZhciBjaXR5TWFwID0ge307IC8vIOWOv+WMuuWfn+e8lueggQoKdmFyIGNvdW50eU1hcCA9IHt9OwovKioKICog5piv5ZCm5piv6KGM5pS/5Yy65Z+f57yW56CBCiAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIOe8lueggQogKi8KCmZ1bmN0aW9uIGlzQXJlYUNvZGUoY29kZSkgewogIHJldHVybiAvXlxkezZ9JC8udGVzdChjb2RlKTsKfQovKioKICog5Yqg6L296KGM5pS/5Yy65Z+f5pWw5o2uCiAqIEBwYXJhbSB7UHJvbWlzZX0KICovCgoKZXhwb3J0IGZ1bmN0aW9uIGxvYWRBcmVhTWFwKCkgewogIHZhciBkaWN0S2V5ID0gJ1haUVlNJzsKICByZXR1cm4gcXVlcnlEaWN0TGlzdCh7CiAgICBrZXlMaXN0OiBbZGljdEtleV0KICB9KS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7CiAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTsKICAgIGlmICghZGF0YS5sZW5ndGggfHwgZGF0YVswXS5kaWN0aW9uYXJ5S2V5ICE9PSBkaWN0S2V5KSByZXR1cm4gY29uc29sZS53YXJuKCfmnKrliqDovb3liLDooYzmlL/ljLrmlbDmja4nKTsKICAgIHZhciBtYXAgPSB7fTsKICAgIEFycmF5LmlzQXJyYXkoZGF0YVswXS5jaGlsZHJlbikgJiYgZGF0YVswXS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgIG1hcFtpdGVtLmRpY3Rpb25hcnlLZXldID0gaXRlbS5kaWN0aW9uYXJ5VmFsdWVaaDsKICAgIH0pOwogICAgc2V0QXJlYU1hcChtYXApOwogIH0pOwp9Ci8qKgogKiDorr7nva7ooYzmlL/ljLrln5/mlbDmja4KICogQHBhcmFtIHtPYmplY3R9IG1hcCDooYzmlL/ljLrln5/mlbDmja4KICovCgpleHBvcnQgZnVuY3Rpb24gc2V0QXJlYU1hcChtYXApIHsKICBpZiAoIW1hcCB8fCBfdHlwZW9mKG1hcCkgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCfnqbrmlbDmja7miJbpnZ5vYmplY3TnsbvlnosnKTsKICBhcmVhTWFwID0gbWFwOwogIHZhciBwcm92aW5jZSA9IHt9OwogIHZhciBjaXR5ID0ge307CiAgdmFyIGNvdW50eSA9IHt9OwogIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbiAoY29kZSkgewogICAgLy8g6L+H5ruk6Z2e5Yy65Z+f57yW56CBCiAgICBpZiAoIWlzQXJlYUNvZGUoY29kZSkpIHJldHVybjsKCiAgICBpZiAoL15cZHsyfTAwMDAkLy50ZXN0KGNvZGUpKSB7CiAgICAgIC8vIOecgee8lueggQogICAgICBwcm92aW5jZVtjb2RlXSA9IG1hcFtjb2RlXTsKICAgIH0gZWxzZSBpZiAoL15cZHs0fTAwJC8udGVzdChjb2RlKSkgewogICAgICAvLyDluILnvJbnoIEKICAgICAgY2l0eVtjb2RlXSA9IG1hcFtjb2RlXTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIOWOv+WMuue8lueggQogICAgICBjb3VudHlbY29kZV0gPSBtYXBbY29kZV07CiAgICB9CiAgfSk7CiAgcHJvdmluY2VNYXAgPSBwcm92aW5jZTsKICBjaXR5TWFwID0gY2l0eTsKICBjb3VudHlNYXAgPSBjb3VudHk7Cn0KLyoqCiAqIOiOt+WPluihjOaUv+WMuuWfn+aVsOaNrgogKiBAcmV0dXJuIHtPYmplY3R9IOihjOaUv+WMuuWfn+aVsOaNrgogKi8KCmV4cG9ydCBmdW5jdGlvbiBnZXRBcmVhTWFwKCkgewogIHJldHVybiBhcmVhTWFwOwp9Ci8qKgogKiDojrflj5bljLrln5/mlbDmja4KICogQHJldHVybiB7T2JqZWN0fSDljLrln5/mlbDmja4KICovCgpleHBvcnQgZnVuY3Rpb24gZ2V0QXJlYURhdGEoKSB7CiAgcmV0dXJuIHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2UKICAgIHByb3ZpbmNlX2xpc3Q6IHByb3ZpbmNlTWFwLAogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQogICAgY2l0eV9saXN0OiBjaXR5TWFwLAogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQogICAgY291bnR5X2xpc3Q6IGNvdW50eU1hcAogIH07Cn0KLyoqCiAqIOiOt+WPluWcsOWMuue8lueggeWIl+ihqOaVsOaNrgogKiBAcGFyYW0ge3Byb3ZpbmNlfGNpdHl8Y291bnR5fSB0eXBlIOexu+WeiwogKiBAcGFyYW0geyp9IGNvZGUg57yW56CBCiAqLwoKZXhwb3J0IHZhciBnZXRBcmVhTGlzdCA9IGZ1bmN0aW9uIGdldEFyZWFMaXN0KHR5cGUsIGNvZGUpIHsKICB2YXIgcmVzdWx0ID0gW107CiAgdmFyIGFyZWFNYXAgPSBnZXRBcmVhRGF0YSgpOyAvLyDpmaTkuobojrflj5bnnIHlnLDljLrliJfooajlpJbpg73pnIDopoFjb2Rl77yM5qCh6aqM57G75Z6LCgogIGlmIChbJ3Byb3ZpbmNlJywgJ2NpdHknLCAnY291bnR5J10uaW5kZXhPZih0eXBlKSA9PT0gLTEgfHwgdHlwZSAhPT0gJ3Byb3ZpbmNlJyAmJiAhY29kZSkgcmV0dXJuIHJlc3VsdDsKICB2YXIgbGlzdCA9IGFyZWFNYXBbdHlwZSArICdfbGlzdCddOwogIHJlc3VsdCA9IE9iamVjdC5rZXlzKGxpc3QpLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICByZXR1cm4gewogICAgICBsYWJlbDogbGlzdFtrZXldLAogICAgICB2YWx1ZToga2V5CiAgICB9OwogIH0pOwogIGlmICh0eXBlID09PSAncHJvdmluY2UnKSByZXR1cm4gcmVzdWx0OwogIHZhciBwcmVmaXhDb2RlID0gJyc7CiAgaWYgKHR5cGUgPT09ICdjaXR5JykgcHJlZml4Q29kZSA9IFN0cmluZy5wcm90b3R5cGUuc2xpY2UuY2FsbChjb2RlLCAwLCAyKTsKICBpZiAodHlwZSA9PT0gJ2NvdW50eScpIHByZWZpeENvZGUgPSBTdHJpbmcucHJvdG90eXBlLnNsaWNlLmNhbGwoY29kZSwgMCwgNCk7IC8vIOi/h+a7pOWcsOWMuuWIl+ihqAoKICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICByZXR1cm4gaXRlbS52YWx1ZS5pbmRleE9mKHByZWZpeENvZGUpID09PSAwOwogIH0pOwogIHJldHVybiByZXN1bHQ7Cn07Ci8qKgogKiDmn6Xor6LnnIHmlbDmja7liJfooagKICovCgpleHBvcnQgZnVuY3Rpb24gZ2V0UHJvdmluY2VMaXN0KCkgewogIHJldHVybiBnZXRBcmVhTGlzdCgncHJvdmluY2UnKTsKfQovKioKICog6I635Y+W5biC5pWw5o2u5YiX6KGoCiAqIEBwYXJhbSB7Kn0gcHJvdmluY2VDb2RlIOecgee8lueggQogKi8KCmV4cG9ydCBmdW5jdGlvbiBnZXRDaXR5TGlzdChwcm92aW5jZUNvZGUpIHsKICByZXR1cm4gZ2V0QXJlYUxpc3QoJ2NpdHknLCBwcm92aW5jZUNvZGUpOwp9Ci8qKgogKiDojrflj5bljLrljr/mlbDmja7liJfooagKICogQHBhcmFtIHsqfSBjaXR5Q29kZSDluILnvJbnoIEKICovCgpleHBvcnQgZnVuY3Rpb24gZ2V0Q291bnR5TGlzdChjaXR5Q29kZSkgewogIHJldHVybiBnZXRBcmVhTGlzdCgnY291bnR5JywgY2l0eUNvZGUpOwp9Ci8qKgogKiDnvJbnoIHovazmjaLlkI3np7AKICogQHBhcmFtIHsqfSBjb2RlIOe8lueggQogKi8KCmV4cG9ydCBmdW5jdGlvbiBjb2RlQ29udmVydGVyTmFtZShjb2RlKSB7CiAgcmV0dXJuIGFyZWFNYXBbY29kZV07Cn0="},{"version":3,"sources":["/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/sims/plugins/common/area.js"],"names":["queryDictList","areaMap","provinceMap","cityMap","countyMap","isAreaCode","code","test","loadAreaMap","dictKey","keyList","then","data","length","dictionaryKey","console","warn","map","Array","isArray","children","forEach","item","dictionaryValueZh","setAreaMap","TypeError","province","city","county","Object","keys","getAreaMap","getAreaData","province_list","city_list","county_list","getAreaList","type","result","indexOf","list","key","label","value","prefixCode","String","prototype","slice","call","filter","getProvinceList","getCityList","provinceCode","getCountyList","cityCode","codeConverterName"],"mappings":"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","sourcesContent":["import { queryDictList } from '../../api/dict/index';\n\n// 行政区域数据\nlet areaMap = {};\n\n// 省区域编码\nlet provinceMap = {};\n// 市区域编码\nlet cityMap = {};\n// 县区域编码\nlet countyMap = {};\n\n/**\n * 是否是行政区域编码\n * @param {string} code 编码\n */\nfunction isAreaCode(code) {\n  return /^\\d{6}$/.test(code);\n}\n\n/**\n * 加载行政区域数据\n * @param {Promise}\n */\nexport function loadAreaMap() {\n  const dictKey = 'XZQYM';\n  return queryDictList({\n    keyList: [dictKey]\n  }).then(({ data }) => {\n    if (!data.length || data[0].dictionaryKey !== dictKey)\n      return console.warn('未加载到行政区数据');\n    let map = {};\n    Array.isArray(data[0].children) &&\n      data[0].children.forEach(item => {\n        map[item.dictionaryKey] = item.dictionaryValueZh;\n      });\n    setAreaMap(map);\n  });\n}\n\n/**\n * 设置行政区域数据\n * @param {Object} map 行政区域数据\n */\nexport function setAreaMap(map) {\n  if (!map || typeof map !== 'object')\n    throw new TypeError('空数据或非object类型');\n  areaMap = map;\n  let province = {};\n  let city = {};\n  let county = {};\n  Object.keys(map).forEach(code => {\n    // 过滤非区域编码\n    if (!isAreaCode(code)) return;\n    if (/^\\d{2}0000$/.test(code)) {\n      // 省编码\n      province[code] = map[code];\n    } else if (/^\\d{4}00$/.test(code)) {\n      // 市编码\n      city[code] = map[code];\n    } else {\n      // 县区编码\n      county[code] = map[code];\n    }\n  });\n  provinceMap = province;\n  cityMap = city;\n  countyMap = county;\n}\n\n/**\n * 获取行政区域数据\n * @return {Object} 行政区域数据\n */\nexport function getAreaMap() {\n  return areaMap;\n}\n\n/**\n * 获取区域数据\n * @return {Object} 区域数据\n */\nexport function getAreaData() {\n  return {\n    // eslint-disable-next-line camelcase\n    province_list: provinceMap,\n    // eslint-disable-next-line camelcase\n    city_list: cityMap,\n    // eslint-disable-next-line camelcase\n    county_list: countyMap\n  };\n}\n\n/**\n * 获取地区编码列表数据\n * @param {province|city|county} type 类型\n * @param {*} code 编码\n */\nexport const getAreaList = function(type, code) {\n  let result = [];\n  let areaMap = getAreaData();\n  // 除了获取省地区列表外都需要code，校验类型\n  if (\n    ['province', 'city', 'county'].indexOf(type) === -1 ||\n    (type !== 'province' && !code)\n  )\n    return result;\n  const list = areaMap[type + '_list'];\n  result = Object.keys(list).map(key => ({\n    label: list[key],\n    value: key\n  }));\n  if (type === 'province') return result;\n  let prefixCode = '';\n  if (type === 'city') prefixCode = String.prototype.slice.call(code, 0, 2);\n  if (type === 'county') prefixCode = String.prototype.slice.call(code, 0, 4);\n  // 过滤地区列表\n  result = result.filter(item => item.value.indexOf(prefixCode) === 0);\n  return result;\n};\n\n/**\n * 查询省数据列表\n */\nexport function getProvinceList() {\n  return getAreaList('province');\n}\n\n/**\n * 获取市数据列表\n * @param {*} provinceCode 省编码\n */\nexport function getCityList(provinceCode) {\n  return getAreaList('city', provinceCode);\n}\n\n/**\n * 获取区县数据列表\n * @param {*} cityCode 市编码\n */\nexport function getCountyList(cityCode) {\n  return getAreaList('county', cityCode);\n}\n\n/**\n * 编码转换名称\n * @param {*} code 编码\n */\nexport function codeConverterName(code) {\n  return areaMap[code];\n}\n"]}]}