{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js!/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/charity-foundation/views/components/permissionEdit/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/charity-foundation/views/components/permissionEdit/index.vue","mtime":1627979214289},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-dialog\n    :visible.sync=\"visible\"\n    :v-if=\"visible\"\n    :title=\"title || ''\"\n    center\n    :close-on-click-modal=\"false\"\n    :close-on-press-escape=\"false\"\n    v-on=\"$listeners\"\n    @closed=\"onClosed\"\n    width=\"50%\"\n    v-loading=\"loading\"\n  >\n    <el-form\n      :model=\"ruleForm\"\n      :rules=\"rules\"\n      ref=\"ruleForm\"\n      label-width=\"100px\"\n      class=\"demo-ruleForm\"\n    >\n      <el-form-item label=\"输入账号\" prop=\"username\">\n        <el-input\n          v-model=\"ruleForm.username\"\n          :disabled=\"this.editItem ? this.editItem.isedit : false\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"选择类型\" prop=\"region\">\n        <el-select\n          v-model=\"ruleForm.region\"\n          placeholder=\"选择类型\"\n          @change=\"changeRegion\"\n        >\n          <el-option\n            v-for=\"(item, index) in roleList\"\n            :key=\"index\"\n            :label=\"item.roleName\"\n            :value=\"item.roleId\"\n          ></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"添加权限\">\n        <div>\n          <el-checkbox\n            :indeterminate=\"checkAllDeterminate\"\n            v-model=\"checkAll\"\n            @change=\"checkAllBox\"\n            >全选</el-checkbox\n          >\n        </div>\n        <div v-for=\"(item, index) in permissionList\" :key=\"item.name\">\n          <el-checkbox\n            :indeterminate=\"isIndeterminate[index]\"\n            v-model=\"checkTypeAll[index]\"\n            @change=\"handleCheckAllChange($event, item, index)\"\n            >{{ item.name }}</el-checkbox\n          >\n          <!-- <div style=\"margin: 15px 0;\"></div> -->\n          <el-checkbox-group\n            v-model=\"selectArr[index]\"\n            @change=\"handleCheckedCitiesChange($event, [index, item])\"\n          >\n            <el-checkbox\n              v-for=\"(ite, inde) in item.children\"\n              :key=\"ite.name\"\n              :label=\"ite\"\n              :checked=\"false\"\n              :ref=\"'reference' + inde + ite.id\"\n            >\n              {{ ite.name }}\n            </el-checkbox>\n          </el-checkbox-group>\n        </div>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"submitForm('ruleForm')\"\n          >确定</el-button\n        >\n        <el-button @click=\"closed\">取消</el-button>\n      </el-form-item>\n    </el-form>\n  </el-dialog>\n</template>\n\n<script>\nimport {\n  Radio,\n  Button,\n  Dialog,\n  FormItem,\n  Input,\n  Form,\n  Checkbox,\n  CheckboxGroup,\n  Option,\n  Select\n} from 'element-ui';\nimport {\n  getMenuList,\n  getProjectList,\n  getRoleList\n} from '../../../api/auth/index';\nimport { updateUser, addUser } from '../../../api/user/index';\nimport router, { generateRoutes } from '../../../router';\nimport { getUserId } from '@/plugins/core/auth';\nexport default {\n  name: 'BImportDataPanel',\n  components: {\n    [Button.name]: Button,\n    [Dialog.name]: Dialog,\n    [Input.name]: Input,\n    [Radio.name]: Radio,\n    [FormItem.name]: FormItem,\n    [Form.name]: Form,\n    [Checkbox.name]: Checkbox,\n    [CheckboxGroup.name]: CheckboxGroup,\n    [Option.name]: Option,\n    [Select.name]: Select\n  },\n  props: {\n    /**\n     * 成功回调\n     */\n    onSuccess: {\n      type: Function\n    }\n  },\n  data() {\n    let validateInput = (rule, value, callback) => {\n      if (!this.checkSpecialKey(value)) {\n        callback(new Error('不能含有特殊字符！！'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      loading: false,\n      visible: false, // 是否显示模态框\n      title: '',\n      DialogData: null,\n      editItem: null,\n      ruleForm: {\n        username: '',\n        region: ''\n      },\n      roleList: [], // 类型\n      checkAll: false,\n      checkTypeAll: [], // 类型全选状态\n      permissionList: [], // 菜单列表和工程列表数据\n      projectList: [], //项目类型列表\n      isIndeterminate: [], // 二级选中样式\n      selectArr: [], // 选中的子节点\n      checkAllDeterminate: false, // 一级全选\n      rules: {\n        username: [\n          { required: true, message: '请输入账号', trigger: 'blur' },\n          { required: true, message: '请输入账号', trigger: 'change' },\n          // { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'change' }\n          { validator: validateInput, trigger: 'change' },\n          { validator: validateInput, trigger: 'blur' }\n        ],\n        region: [{ required: true, message: '请选择类型', trigger: 'change' }],\n        checkTypeAll: [\n          { required: true, message: '请选择类型', trigger: 'change' }\n        ]\n      },\n      endDevData: [] // 默认选中的值\n    };\n  },\n  watch: {},\n  methods: {\n    // 正则验证\n    checkSpecialKey(str) {\n      let specialKey =\n        '\"\"[~!#$%^&*()=|{}\\':;\\'\\\\[\\\\]<>/?~！#￥……&*（）——|{}【】‘；：”“\\'。，、？]‘\\'\"\"';\n      for (let i = 0; i < str.length; i++) {\n        if (specialKey.indexOf(str.substr(i, 1)) != -1) {\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * 显示模态框动画结束\n     *  @param {Object}} editItem 修改项\n     */\n    show(editItem) {\n      this.endDevData = [];\n      this.selectArr = [];\n      this.isIndeterminate = [];\n      this.checkAll = false;\n      this.checkTypeAll = []; // 类型全选状态\n      this.checkAllDeterminate = false; // 一级全选\n      this.editItem = JSON.parse(JSON.stringify(editItem));\n      this.title = this.editItem.isedit ? '编辑' : '新增';\n      this.$nextTick(() => {\n        this.$refs.ruleForm.clearValidate();\n      });\n      if (this.editItem.isedit) {\n        this.ruleForm.username = this.editItem.username\n          ? this.editItem.username\n          : '';\n        this.endDevData = this.editItem.menuIds\n          ? this.editItem.menuIds.concat(',', this.editItem.projectIds)\n          : '';\n      } else {\n        this.ruleForm.username = '';\n      }\n      this.visible = true;\n      this.initData();\n      this.getRoleList();\n      this.ruleForm.region = this.editItem.roleId || '';\n    },\n    /**\n     * 获取菜单列表和工程列表\n     */\n    initData() {\n      this.loading = true;\n      this.permissionList = [];\n      Promise.all([getMenuList(), getProjectList()])\n        .then(res => {\n          let projectList = {\n            name: '项目类型',\n            type: 'projectList',\n            children: res[1].data\n          };\n          if (projectList && Array.isArray(projectList.children)) {\n            projectList.children.forEach(item => {\n              item.name = item.label;\n              item.menuId = item.id;\n            });\n          }\n          this.permissionList = [projectList, ...res[0].data];\n          console.log(this.permissionList);\n          this.getData();\n          this.loading = false;\n        })\n        .catch(() => {\n          this.loading = false;\n        });\n    },\n    // 获取类型数据\n    getRoleList() {\n      this.loading = true;\n      this.roleList = [];\n      getRoleList()\n        .then(res => {\n          this.loading = false;\n          this.roleList = res.data;\n        })\n        .catch(() => {\n          this.loading = false;\n        });\n    },\n    /**\n     * 关闭模态框动画结束\n     */\n    onClosed() {\n      this.$emit('close');\n    },\n    closed() {\n      this.resetForm();\n      this.visible = false;\n    },\n    // 权限格式化数据\n    getData() {\n      let childrenItem = [];\n      this.permissionList.map((item, index) => {\n        this.checkTypeAll.push(false);\n        this.isIndeterminate.push(false);\n        this.selectArr = new Array(this.permissionList.length).fill([]);\n        childrenItem.push(item.children);\n      });\n      childrenItem.map((ite, index) => {\n        // 设置默认选中的值\n        this.selectArr[index] = [];\n        ite.map(it => {\n          if (\n            this.endDevData &&\n            this.endDevData.includes(it.menuId ? it.menuId : it.id)\n          ) {\n            this.selectArr[index].push(it);\n            this.handleCheckedCitiesChange(this.selectArr[index], [\n              index,\n              this.permissionList[index]\n            ]);\n          }\n        });\n      });\n    },\n    // 一级全选\n    checkAllBox(val) {\n      if (val) {\n        this.permissionList.map((item, index) => {\n          this.checkTypeAll[index] = true;\n          this.selectArr[index] = item.children.map(ite => ite);\n          this.isIndeterminate[index] = false;\n          this.checkAllDeterminate = false;\n        });\n      } else {\n        this.permissionList.map((item, index) => {\n          this.checkTypeAll[index] = false;\n          this.selectArr[index] = [];\n        });\n      }\n      this.flushArray();\n    },\n    // 二级全选\n    handleCheckAllChange(value, item, index) {\n      this.selectArr[index] = value ? item.children.map(it => it) : [];\n      this.isIndeterminate[index] = false;\n      let permissionListLength = 0;\n      this.permissionList.map(item => {\n        permissionListLength += item.children.length;\n      });\n      this.checkAllDeterminate =\n        this.selectArr.flat(Infinity).length > 0 &&\n        this.selectArr.flat(Infinity).length !== permissionListLength;\n      this.checkAll =\n        this.selectArr.flat(Infinity).length === permissionListLength;\n      this.flushArray();\n    },\n    // 子节点change事件\n    handleCheckedCitiesChange(val, [index, item]) {\n      this.checkTypeAll[index] = val.length === item.children.length;\n      this.isIndeterminate[index] =\n        val.length > 0 && val.length < item.children.length;\n      this.checkAllDeterminate =\n        this.selectArr.flat(Infinity).length > 0 &&\n        !this.checkTypeAll.every(item => item); // 判断子项选中的条数\n      this.checkAll = this.checkTypeAll.every(item => item);\n      this.flushArray();\n    },\n    flushArray() {\n      this.isIndeterminate = this.isIndeterminate.slice(0);\n      this.checkTypeAll = this.checkTypeAll.slice(0);\n      this.selectArr = this.selectArr.slice(0);\n    },\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          let projectIds = '';\n          let menuList = [];\n          this.selectArr.forEach((item, index) => {\n            if (index === 0) {\n              // 列表第一项为项目类型\n              item.forEach(projectId => {\n                projectIds += projectId.id ? `${projectId.id},` : '';\n              });\n            } else {\n              item.forEach(menuIds => {\n                // 第二项及后面为页面权限\n                menuList.includes(menuIds.parentId)\n                  ? null\n                  : menuList.push(menuIds.parentId);\n                menuList.push(menuIds.menuId);\n              });\n            }\n          });\n          if (!projectIds) {\n            this.$message.error('请选择项目类型');\n            return false;\n          }\n          if (this.editItem.isedit) {\n            let params = {\n              userId: this.editItem.userId,\n              username: this.editItem.username || this.ruleForm.username,\n              roleId: this.ruleForm.region,\n              projectIds: projectIds.substring(0, projectIds.length - 1),\n              menuList: menuList\n            };\n            this.loading = true;\n            updateUser(params)\n              .then(res => {\n                this.loading = false;\n                if (Number(this.editItem.userId) === Number(getUserId())) {\n                  // debugger;\n                  let { menuList } = this.$store.dispatch('auth/getAuthData'); // 获取权限数据\n                  const accessRoutes = generateRoutes(menuList); // 生成允许访问的路由\n                  router.addRoutes(accessRoutes);\n                }\n                this.closed();\n              })\n              .catch(() => {\n                this.loading = false;\n              });\n          } else {\n            let params = {\n              username: this.editItem.username || this.ruleForm.username,\n              roleId: this.ruleForm.region,\n              projectIds: projectIds.substring(0, projectIds.length - 1),\n              menuList: menuList\n            };\n            this.loading = true;\n            addUser(params)\n              .then(res => {\n                this.loading = false;\n                this.closed();\n              })\n              .catch(() => {\n                this.loading = false;\n              });\n          }\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    // 修改类型 清空权限选择\n    changeRegion() {\n      this.permissionList.map((item, index) => {\n        this.checkTypeAll[index] = false;\n        this.selectArr[index] = [];\n      });\n      this.isIndeterminate = [];\n      this.checkAll = false;\n      this.checkAllDeterminate = false; // 一级全选\n    },\n    resetForm() {\n      this.$nextTick(() => {\n        this.$refs.ruleForm.resetFields();\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.import-data-content {\n  h3 {\n    font-size: 16px;\n    color: #303133;\n  }\n  p {\n    font-size: 14px;\n    margin: 15px 0;\n  }\n}\n/deep/.el-input {\n  width: 217px;\n}\n/deep/.el-checkbox-group {\n  margin-left: 20px;\n}\n</style>\n"],"sourceRoot":"src/pages/charity-foundation/views/components/permissionEdit"}]}