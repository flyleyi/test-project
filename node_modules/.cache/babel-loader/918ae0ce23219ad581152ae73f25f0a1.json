{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js!/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/eslint-loader/index.js??ref--13-0!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/school-book/store/modules/dict.js","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/school-book/store/modules/dict.js","mtime":1627979214325},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9mdXl1ZXlpL0Rlc2t0b3AvcHJhY3RpY2UvbXV0aWx3YXAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgX3R5cGVvZiBmcm9tICIvVXNlcnMvZnV5dWV5aS9EZXNrdG9wL3ByYWN0aWNlL211dGlsd2FwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgeyBxdWVyeURpY3RMaXN0IH0gZnJvbSAnLi4vLi4vYXBpL2RpY3QvaW5kZXgnOwppbXBvcnQgeyBoYXMgfSBmcm9tICdsb2Rhc2gnOyAvLyDlrZflhbjmlbDmja4KCnZhciBzdGF0ZSA9IHsKICBTSFpUOiBbXSwKICAvLyDlrqHmoLjnirbmgIEKICBMT0dfVFlQRTogW10sCiAgLy8g55uu5b2V5pel5b+X57G75Z6LCiAgU0hKRzogW10sCiAgLy8g5a6h5qC457uT5p6cCiAgQURNSU5fQU5TV0VSOiBbXSwKICAvLyDmmK/lkKbnrqHnkIblkZjlm57lpI0KICBMSUtFX1NUQVRVUzogW10sCiAgLy8g54K56LWe54q25oCBCiAgUkVBRF9TVEFURTogW10sCiAgLy8g5raI5oGv54q25oCBCiAgQlRHWVk6IFtdLAogIC8vIOS4jemAmui/h+WOn+WboAogIENBVEFMT0dfVFlQRTogW10sCiAgLy8g55uu5b2V57qn5YirCiAgTUxHTF9aVDogW10gLy8g55uu5b2V566h55CG54q25oCBCgp9OyAvLyDojrflj5bmlrnms5UKCnZhciBnZXR0ZXJzID0gewogIC8qKgogICAqIOagueaNrnR5cGXojrflj5blrZflhbjliJfooajmlbDmja4KICAgKiDlpoLmnpzmmK/ojrflj5blpKfkuo7kuKTlsYLlrZflhbjmoLnmja7lsYLnuqfkvb/nlKjpgJflj7fpmpTlvIAKICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSDlrZflhbjnsbvlnosKICAgKiBAcmV0dXJuIHtBcnJheX0KICAgKi8KICBnZXRMaXN0OiBmdW5jdGlvbiBnZXRMaXN0KHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgcmV0dXJuIF9nZXRMaXN0KHN0YXRlLCB0eXBlKTsKICAgIH07CiAgfSwKCiAgLyoqCiAgICog5qC55o2u5Lyg6YCSdHlwZeWSjGtleeafpeivouWtl+WFuOe/u+ivkQogICAqIEBwYXJhbSB7dHlwZTogU3RyaW5nLCBrZXk6IFN0cmluZ30g5Y+C5pWwCiAgICogQHJldHVybiB7U3RyaW5nfQogICAqLwogIHF1ZXJ5TGFiZWw6IGZ1bmN0aW9uIHF1ZXJ5TGFiZWwoc3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICBpZiAoX3R5cGVvZihvcHRpb25zKSAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkgcmV0dXJuICcnOwogICAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZTsKCiAgICAgIHZhciBsaXN0ID0gX2dldExpc3Qoc3RhdGUsIHR5cGUpOwoKICAgICAgdmFyIGtleSA9IG9wdGlvbnMua2V5OwoKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGxpc3QpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgaXRlbSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgaWYgKGl0ZW0udmFsdWUgPT09IGtleSkgcmV0dXJuIGl0ZW0ubGFiZWw7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiAnJzsKICAgIH07CiAgfQp9Owp2YXIgbXV0YXRpb25zID0gewogIC8qKgogICAqIOiuvue9ruWtl+WFuOaVsOaNrgogICAqIEBwYXJhbSB7Kn0gc3RhdGUg54q25oCBCiAgICogQHBhcmFtIHsqfSBtYXAgbWFw5pWw5o2uCiAgICovCiAgU0VUX0RJQ1RfTUFQOiBmdW5jdGlvbiBTRVRfRElDVF9NQVAoc3RhdGUsIG1hcCkgewogICAgLy8g5Yy56YWN5pyJ55qE6L+b6KGM6LWL5YC8CiAgICBPYmplY3Qua2V5cyhzdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIGhhcyhtYXAsIGtleSkgJiYgKHN0YXRlW2tleV0gPSBtYXBba2V5XSk7CiAgICB9KTsKICB9Cn07CnZhciBhY3Rpb25zID0gewogIC8qKgogICAqIOivt+axguiOt+WPluWtl+WFuOaVsOaNrgogICAqIEBwYXJhbSB7Kn0gcGFyYW0wIOeKtuaAgQogICAqIEByZXR1cm5zIHtQcm9taXNlfQogICAqLwogIGFqYXhHZXREYXRhOiBmdW5jdGlvbiBhamF4R2V0RGF0YShfcmVmKSB7CiAgICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLAogICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgcmV0dXJuIHF1ZXJ5RGljdExpc3QoewogICAgICBrZXlMaXN0OiBPYmplY3Qua2V5cyhzdGF0ZSkgLy8g6KaB5p+l6K+i55qE5a2X5YW4CgogICAgfSkudGhlbihmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhOwogICAgICAvLyDlsIZsaXN06L2sbWFw57uT5p6E5L6/5LqO5p+l5om+6LWL5YC8CiAgICAgIHZhciBtYXAgPSB7fTsKICAgICAgQXJyYXkuaXNBcnJheShkYXRhKSAmJiBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gbWFwW2l0ZW0uZGljdGlvbmFyeUtleV0gPSBsaXN0Mm9wdGlvbnMoaXRlbS5jaGlsZHJlbiwgJ2RpY3Rpb25hcnlLZXknLCAnZGljdGlvbmFyeVRleHQnKTsKICAgICAgfSk7IC8vIOiuvue9ruWAvAoKICAgICAgY29tbWl0KCdTRVRfRElDVF9NQVAnLCBtYXApOwogICAgfSk7CiAgfQp9OwovKioKICog6I635Y+W5a2X5YW45YiX6KGoCiAqIEBwYXJhbSB7Kn0gc3RhdGUg54q25oCBCiAqIEBwYXJhbSB7Kn0gdHlwZSDnsbvlnosKICovCgp2YXIgX2dldExpc3QgPSBmdW5jdGlvbiBfZ2V0TGlzdChzdGF0ZSwgdHlwZSkgewogIHR5cGUgPSB0eXBlIHx8ICcnOwogIHZhciB0eXBlcyA9IHR5cGUuc3BsaXQoJywnKTsKCiAgaWYgKHR5cGVzLmxlbmd0aCA+IDEpIHsKICAgIHZhciBsaXN0ID0gaGFzKHN0YXRlLCB0eXBlc1swXSkgPyBzdGF0ZVt0eXBlc1swXV0gOiBbXTsKCiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciB2YWwgPSB0eXBlc1tpXTsKICAgICAgdmFyIHJlcyA9IGxpc3QuZmluZChmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWUua2V5ID09IHZhbDsKICAgICAgfSk7CiAgICAgIGlmIChyZXMgIT09IHZvaWQgMCkgbGlzdCA9IHJlcy5jaGlsZHJlbiB8fCBbXTtlbHNlIHsKICAgICAgICBsaXN0ID0gW107CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbGlzdDsKICB9IGVsc2UgewogICAgcmV0dXJuIGhhcyhzdGF0ZSwgdHlwZSkgPyBzdGF0ZVt0eXBlXSA6IFtdOwogIH0KfTsKLyoqCiAqIOWwhmxpc3TovazkuLrpu5jorqTnmoRvcHRpb25z5pWw5o2uCiAqIEBwYXJhbSB7Kn0gbGlzdCDmupDmlbDmja7liJfooagKICovCgoKZnVuY3Rpb24gbGlzdDJvcHRpb25zKGxpc3QpIHsKICB2YXIga2V5S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZGljdGlvbmFyeUtleSc7CiAgdmFyIGxhYmVsS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnZGljdGlvbmFyeVRleHQnOwogIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgcmV0dXJuIFtdOwogIHJldHVybiBsaXN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGgpIGl0ZW0uY2hpbGRyZW4gPSBsaXN0Mm9wdGlvbnMoaXRlbS5jaGlsZHJlbiwga2V5S2V5LCBsYWJlbEtleSk7CiAgICByZXR1cm4gewogICAgICB2YWx1ZTogaXRlbVtrZXlLZXldLAogICAgICBsYWJlbDogaXRlbVtsYWJlbEtleV0KICAgIH07CiAgfSk7Cn0KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBzdGF0ZSwKICBnZXR0ZXJzOiBnZXR0ZXJzLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMKfTs="},{"version":3,"sources":["/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/school-book/store/modules/dict.js"],"names":["queryDictList","has","state","SHZT","LOG_TYPE","SHJG","ADMIN_ANSWER","LIKE_STATUS","READ_STATE","BTGYY","CATALOG_TYPE","MLGL_ZT","getters","getList","type","queryLabel","options","list","key","item","value","label","mutations","SET_DICT_MAP","map","Object","keys","forEach","actions","ajaxGetData","commit","keyList","then","data","Array","isArray","dictionaryKey","list2options","children","types","split","length","i","val","res","find","keyKey","labelKey","namespaced"],"mappings":"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","sourcesContent":["import { queryDictList } from '../../api/dict/index';\nimport { has } from 'lodash';\n\n// 字典数据\nconst state = {\n  SHZT: [], // 审核状态\n  LOG_TYPE: [], // 目录日志类型\n  SHJG: [], // 审核结果\n  ADMIN_ANSWER: [], // 是否管理员回复\n  LIKE_STATUS: [], // 点赞状态\n  READ_STATE: [], // 消息状态\n  BTGYY: [], // 不通过原因\n  CATALOG_TYPE: [], // 目录级别\n  MLGL_ZT: [] // 目录管理状态\n};\n\n// 获取方法\nconst getters = {\n  /**\n   * 根据type获取字典列表数据\n   * 如果是获取大于两层字典根据层级使用逗号隔开\n   * @param {String} type 字典类型\n   * @return {Array}\n   */\n  getList: state => type => getList(state, type),\n  /**\n   * 根据传递type和key查询字典翻译\n   * @param {type: String, key: String} 参数\n   * @return {String}\n   */\n  queryLabel: state => options => {\n    if (typeof options !== 'object' || options === null) return '';\n    var type = options.type;\n    var list = getList(state, type);\n    var key = options.key;\n    for (const item of list) {\n      if (item.value === key) return item.label;\n    }\n    return '';\n  }\n};\n\nconst mutations = {\n  /**\n   * 设置字典数据\n   * @param {*} state 状态\n   * @param {*} map map数据\n   */\n  SET_DICT_MAP(state, map) {\n    // 匹配有的进行赋值\n    Object.keys(state).forEach(key => {\n      has(map, key) && (state[key] = map[key]);\n    });\n  }\n};\n\nconst actions = {\n  /**\n   * 请求获取字典数据\n   * @param {*} param0 状态\n   * @returns {Promise}\n   */\n  ajaxGetData({ state, commit }) {\n    return queryDictList({\n      keyList: Object.keys(state) // 要查询的字典\n    }).then(({ data }) => {\n      // 将list转map结构便于查找赋值\n      let map = {};\n      Array.isArray(data) &&\n        data.forEach(\n          item =>\n            (map[item.dictionaryKey] = list2options(\n              item.children,\n              'dictionaryKey',\n              'dictionaryText'\n            ))\n        );\n      // 设置值\n      commit('SET_DICT_MAP', map);\n    });\n  }\n};\n\n/**\n * 获取字典列表\n * @param {*} state 状态\n * @param {*} type 类型\n */\nconst getList = (state, type) => {\n  type = type || '';\n  var types = type.split(',');\n  if (types.length > 1) {\n    var list = has(state, types[0]) ? state[types[0]] : [];\n    for (var i = 1; i < types.length; i++) {\n      var val = types[i];\n      var res = list.find(function(value) {\n        return value.key == val;\n      });\n      if (res !== void 0) list = res.children || [];\n      else {\n        list = [];\n        break;\n      }\n    }\n    return list;\n  } else {\n    return has(state, type) ? state[type] : [];\n  }\n};\n\n/**\n * 将list转为默认的options数据\n * @param {*} list 源数据列表\n */\nfunction list2options(\n  list,\n  keyKey = 'dictionaryKey',\n  labelKey = 'dictionaryText'\n) {\n  if (!Array.isArray(list)) return [];\n  return list.map(function(item) {\n    if (item.children && item.children.length)\n      item.children = list2options(item.children, keyKey, labelKey);\n    return {\n      value: item[keyKey],\n      label: item[labelKey]\n    };\n  });\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]}]}