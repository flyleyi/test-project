{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/components/common/CFilterCheckPanel/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/components/common/CFilterCheckPanel/index.vue","mtime":1627979214238},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"index.vue","sourceRoot":"src/components/common/CFilterCheckPanel","sourcesContent":["<template>\r\n  <el-dialog\r\n    class=\"check-dialog\"\r\n    :visible.sync=\"visible\"\r\n    :title=\"title\"\r\n    center\r\n    v-on=\"$listeners\"\r\n    :before-close=\"onBeforeClose\"\r\n    @closed=\"onClosed\"\r\n  >\r\n    <el-checkbox-group v-model=\"checkedList\" :disabled=\"loading\">\r\n      <el-checkbox\r\n        v-for=\"item in defaultCheckList\"\r\n        :label=\"item.prop\"\r\n        :key=\"item.prop\"\r\n        :disabled=\"item.required\"\r\n        >{{ item.label }}</el-checkbox\r\n      >\r\n    </el-checkbox-group>\r\n    <span slot=\"footer\" class=\"dialog-footer\">\r\n      <el-button size=\"small\" :loading=\"loading\" @click=\"onCloseDialog\">\r\n        取消\r\n      </el-button>\r\n      <el-button\r\n        type=\"primary\"\r\n        size=\"small\"\r\n        @click=\"onSubmit\"\r\n        :loading=\"loading\"\r\n        >确定</el-button\r\n      >\r\n    </span>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\nimport { Checkbox, CheckboxGroup, Button, Dialog, Message } from 'element-ui';\r\nexport default {\r\n  name: 'CFilterCheckPanel',\r\n  components: {\r\n    [Checkbox.name]: Checkbox,\r\n    [CheckboxGroup.name]: CheckboxGroup,\r\n    [Button.name]: Button,\r\n    [Dialog.name]: Dialog\r\n  },\r\n  props: {\r\n    //传入数据项\r\n    data: {\r\n      type: Array,\r\n      default: () => {\r\n        return [];\r\n      }\r\n    },\r\n    //标题名称\r\n    title: {\r\n      type: String,\r\n      default: '显示列'\r\n    },\r\n    //是否修改数据源\r\n    editOriginData: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    //显示的标签字段\r\n    labelField: {\r\n      type: String,\r\n      default: 'label'\r\n    },\r\n    //选型的值字段\r\n    propField: {\r\n      type: String,\r\n      default: 'prop'\r\n    },\r\n    //当前是否未选中\r\n    hiddenField: {\r\n      type: String,\r\n      default: 'hidden'\r\n    },\r\n    //是否必要字段\r\n    requiredField: {\r\n      type: String,\r\n      default: 'required'\r\n    },\r\n    //成功文案\r\n    successMsg: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    //失败文案\r\n    errorMsg: {\r\n      type: String,\r\n      default: '数据保存失败'\r\n    },\r\n    //关闭弹窗后回调\r\n    onClosed: {\r\n      type: Function,\r\n      default: () => {}\r\n    },\r\n    //请求方法 需要返回promise\r\n    ajaxFun: {\r\n      type: Function\r\n    },\r\n    //数据回调，点击提交时触发\r\n    callback: {\r\n      type: Function\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      inited: false,\r\n      visible: false, //默认不显示弹窗 用于弹窗动画\r\n      loading: false, //true=接口请求中\r\n      defaultCheckList: [], //默认传入的数据转换成内部格式\r\n      initCheckList: [], //初始选中的字段列\r\n      checkedList: [] //当前选中的数据字段\r\n    };\r\n  },\r\n  mounted() {},\r\n  methods: {\r\n    //展示弹窗\r\n    show() {\r\n      if (!this.data) return;\r\n      //以组件形式使用时，不重复处理数据，只做显示隐藏\r\n      if (this.inited) {\r\n        this.visible = true;\r\n        return;\r\n      }\r\n      this.inited = true;\r\n      //{label: '姓名', prop: 'name',required: true,hidden: true}\r\n      this.defaultCheckList = this.data\r\n        .filter(item => item[this.propField])\r\n        .map(item => {\r\n          let prop = item[this.propField]; //传入的值 默认[prop]\r\n          if (!prop) return;\r\n          let label = item[this.labelField]; //传入的显示标签[label]\r\n          let hidden = item[this.hiddenField] || false; //传入的默认隐藏状态[hidden]\r\n          let required = item[this.requiredField] || false; //传入的默认必选状态[required]\r\n          //当前选项是必选的，或者已选中\r\n          if (required || !hidden) {\r\n            this.checkedList.push(prop);\r\n          }\r\n          return {\r\n            label,\r\n            prop,\r\n            hidden,\r\n            required\r\n          };\r\n        });\r\n      this.initCheckList = JSON.parse(JSON.stringify(this.checkedList)); //赋值初始选中数据\r\n      this.visible = true;\r\n    },\r\n    //按传入顺序，获取数据项\r\n    getData() {\r\n      let result = [];\r\n      this.defaultCheckList.forEach(item => {\r\n        result.push({\r\n          ...item,\r\n          hidden: !this.checkedList.includes(item[this.propField])\r\n        });\r\n      });\r\n      return result;\r\n    },\r\n    //数据处理，如果设置editOriginData=true，则代表会改变源数据，否则只会回调选中的列表\r\n    saveData() {\r\n      if (this.editOriginData) {\r\n        //源数据直接修改\r\n        this.data.forEach((item, index) => {\r\n          let prop = item[this.propField];\r\n          if (!prop) return;\r\n          let ifShow = this.checkedList.includes(prop);\r\n          item[this.hiddenField] = !ifShow; //设置是否隐藏（未选中）\r\n          this.$set(this.data, index, item);\r\n        });\r\n      } else {\r\n        let callback = this.callback;\r\n        typeof callback == 'function' && callback(this.checkedList);\r\n      }\r\n    },\r\n    //比较提交时，选中数据是否发生变更\r\n    compareCheckChange() {\r\n      let beforeList = this.initCheckList; //初始选中数据\r\n      let afterList = this.checkedList; //提交时选中数据\r\n      return (\r\n        JSON.stringify(beforeList.sort()) == JSON.stringify(afterList.sort())\r\n      );\r\n    },\r\n    //点击提交按钮\r\n    onSubmit() {\r\n      if (this.checkedList.length == 0) {\r\n        Message({\r\n          message: '请至少选中一项',\r\n          type: 'warning',\r\n          duration: 5 * 1000\r\n        });\r\n        return;\r\n      }\r\n      //数据无变化\r\n      if (this.compareCheckChange()) {\r\n        this.onCloseDialog(); //直接关闭\r\n        return;\r\n      }\r\n      if (this.loading) return;\r\n      this.loading = true; //设置查询中\r\n      let ajaxFun;\r\n      if (typeof this.ajaxFun == 'function')\r\n        ajaxFun = this.ajaxFun(this.getData());\r\n      //点击确定时需要接口请求\r\n      if (ajaxFun && typeof ajaxFun.then == 'function') {\r\n        ajaxFun\r\n          .then(() => {\r\n            this.loading = false;\r\n            this.saveData();\r\n            //成功提示\r\n            if (this.successMsg) {\r\n              Message({\r\n                message: this.successMsg,\r\n                type: 'success',\r\n                duration: 5 * 1000\r\n              });\r\n            }\r\n            this.onCloseDialog(); //成功后关闭当前窗口\r\n          })\r\n          .catch(e => {\r\n            //接口异常，错误提示\r\n            this.loading = false;\r\n          });\r\n      } else {\r\n        //无需接口请求，直接返回结果\r\n        this.loading = false;\r\n        this.saveData();\r\n        this.onCloseDialog(); //成功后关闭当前窗口\r\n      }\r\n    },\r\n    //处理dialog默认的关闭行为\r\n    onBeforeClose(done) {\r\n      if (this.loading) return;\r\n      done();\r\n    },\r\n    onCloseDialog() {\r\n      if (this.loading) return;\r\n      this.visible = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.check-dialog {\r\n  .el-checkbox {\r\n    margin-top: 10px;\r\n  }\r\n}\r\n</style>\r\n"]}]}