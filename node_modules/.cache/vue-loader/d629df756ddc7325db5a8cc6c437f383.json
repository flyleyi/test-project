{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/sims/views/test/DataCorrection/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/sims/views/test/DataCorrection/index.vue","mtime":1645176309858},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IFRhYnMsIFRhYlBhbmUsIEJ1dHRvbiB9IGZyb20gJ2VsZW1lbnQtdWknOwppbXBvcnQgQ0R5bmFtaWNGb3JtIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb24vQ0R5bmFtaWNGb3JtJzsKaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZy9pbmRleC5qcyc7CmltcG9ydCBheGlvcyBmcm9tICdAL3BsdWdpbnMvYXhpb3MnOwppbXBvcnQgWExTWCBmcm9tICd4bHN4JzsKCi8qKgogKiDor7vlj5bmnKzlnLBleGNlbOaWh+S7tgogKiBAcGFyYW0geyp9IGZpbGUg5paH5Lu2CiAqIEByZXR1cm4ge1Byb21pc2V9CiAqLwpmdW5jdGlvbiByZWFkV29ya2Jvb2tGcm9tTG9jYWxGaWxlKGZpbGUpIHsKICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkgewogICAgICB2YXIgZGF0YSA9IGUudGFyZ2V0LnJlc3VsdDsKICAgICAgdmFyIHdvcmtib29rID0gWExTWC5yZWFkKGRhdGEsIHsgdHlwZTogJ2JpbmFyeScgfSk7CiAgICAgIHJlc29sdmUod29ya2Jvb2spOwogICAgfTsKICAgIHJlYWRlci5vbmVycm9yID0gcmVqZWN0OwogICAgcmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmaWxlKTsKICB9KTsKfQoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEYXRhQ29ycmVjdGlvbicsCiAgY29tcG9uZW50czogewogICAgW1RhYnMubmFtZV06IFRhYnMsCiAgICBbVGFiUGFuZS5uYW1lXTogVGFiUGFuZSwKICAgIFtCdXR0b24ubmFtZV06IEJ1dHRvbiwKICAgIENEeW5hbWljRm9ybQogIH0sCiAgcHJvcHM6IHt9LAogIGRhdGEoKSB7CiAgICBjb25zdCBmb3JtRGF0YU1hcCA9IHt9OwogICAgY29uZmlnLmZvckVhY2goaXRlbSA9PiB7CiAgICAgIGZvcm1EYXRhTWFwW2l0ZW0udGl0bGVdID0ge307CiAgICAgIC8vIOWkhOeQhuWtl+WFuOaVsOaNrgogICAgICBpdGVtLmZvcm1JdGVtcy5mb3JFYWNoKHJvdyA9PiB7CiAgICAgICAgcm93LmRpY3QgJiYgKHJvdy5vcHRpb25zID0gdGhpcy4kRChyb3cuZGljdCkpOwogICAgICB9KTsKICAgIH0pOwogICAgcmV0dXJuIHsKICAgICAgLyoqIOihqOWNlemFjee9ruaVsOaNriAqLwogICAgICBjb25maWcsCiAgICAgIC8qKiDmiYDmnInooajljZXmlbDmja4gKi8KICAgICAgZm9ybURhdGFNYXAsCiAgICAgIC8qKiDmv4DmtLvnmoTooajljZUgKi8KICAgICAgYWN0aXZlTmFtZTogdGhpcy4kcm91dGUucXVlcnkuYWN0aXZlTmFtZSB8fCBjb25maWdbMF0udGl0bGUsCiAgICAgIC8qKiDmuLLmn5NpbnB1dC1maWxlICovCiAgICAgIHJlbmRlckZpbGU6IHRydWUKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgLyoqCiAgICAgKiDmv4DmtLvnmoTooajljZUKICAgICAqLwogICAgYWN0aXZlRm9ybSgpIHsKICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmZpbmQoaXRlbSA9PiBpdGVtLnRpdGxlID09PSB0aGlzLmFjdGl2ZU5hbWUpOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIC8qKgogICAgICog5L+u5pS55r+A5rS7CiAgICAgKi8KICAgIGFjdGl2ZU5hbWUoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5yZXBsYWNlKHsKICAgICAgICAuLi50aGlzLiRyb3V0ZSwKICAgICAgICBxdWVyeTogewogICAgICAgICAgLi4udGhpcy4kcm91dGUucXVlcnksCiAgICAgICAgICBhY3RpdmVOYW1lOiB0aGlzLmFjdGl2ZU5hbWUKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sCiAgY3JlYXRlZCgpIHt9LAogIG1vdW50ZWQoKSB7fSwKICBtZXRob2RzOiB7CiAgICAvKioKICAgICAqIOWtmOWCqOavj+S4quihqOWNleeahOaVsOaNrgogICAgICogQHBhcmFtIHsqfSBtb2RlbCDooajljZXmlbDmja4KICAgICAqLwogICAgaGFuZGxlQ2hhbmdlTW9kZWwobW9kZWwpIHsKICAgICAgdGhpcy5mb3JtRGF0YU1hcFt0aGlzLmFjdGl2ZU5hbWVdID0gbW9kZWw7CiAgICB9LAogICAgLyoqCiAgICAgKiDmj5DkuqTooajljZXmlbDmja4KICAgICAqLwogICAgaGFuZGxlQ29uZmlybSgpIHsKICAgICAgY29uc3QgbG9hZGluZyA9IHRoaXMuJGxvYWRpbmcoewogICAgICAgIHRleHQ6ICfmj5DkuqTkuK0uLi4nCiAgICAgIH0pOwogICAgICBheGlvcygKICAgICAgICB7CiAgICAgICAgICB1cmw6IHRoaXMuYWN0aXZlRm9ybS51cmwsCiAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgIGRhdGE6IHRoaXMuZm9ybURhdGFNYXBbdGhpcy5hY3RpdmVOYW1lXQogICAgICAgIH0sCiAgICAgICAgJ3NpbXNiZmYnCiAgICAgICkKICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MoJ+aPkOS6pOaIkOWKnycpOwogICAgICAgICAgLy8g5riF56m66KGo5Y2VCiAgICAgICAgICAvLyB0aGlzLmhhbmRsZVJlc2V0Rm9ybSgpOwogICAgICAgIH0pCiAgICAgICAgLmZpbmFsbHkoKCkgPT4gewogICAgICAgICAgbG9hZGluZy5jbG9zZSgpOwogICAgICAgIH0pOwogICAgfSwKICAgIC8qKgogICAgICog6YeN572u6KGo5Y2VCiAgICAgKi8KICAgIGhhbmRsZVJlc2V0Rm9ybSgpIHsKICAgICAgdGhpcy4kc2V0KHRoaXMuZm9ybURhdGFNYXAsIHRoaXMuYWN0aXZlTmFtZSwge30pOwogICAgfSwKICAgIC8qKgogICAgICog5a+85YWl5Yqf6IO9CiAgICAgKi8KICAgIGhhbmRsZUltcG9ydCgpIHt9LAogICAgLyoqCiAgICAgKiDmlLnlj5jmlofku7YKICAgICAqLwogICAgaGFuZGxlQ2hhbmdlRmlsZShlKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZmlsZXMgPSBlLnRhcmdldC5maWxlczsKICAgICAgICBpZiAoIWZpbGVzLmxlbmd0aCkgcmV0dXJuIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup5paH5Lu2Jyk7CiAgICAgICAgY29uc3QgZmlsZSA9IGZpbGVzWzBdOwogICAgICAgIC8vIOWIpOaWreaYr+WQpuaYr2V4Y2Vs5paH5Lu2CiAgICAgICAgaWYgKFsneGxzJywgJ3hsc3gnXS5pbmRleE9mKGZpbGUubmFtZS5zcGxpdCgnLicpWzFdKSA9PT0gLTEpCiAgICAgICAgICByZXR1cm4gdGhpcy4kbWVzc2FnZS53YXJuaW5nKCfor7fpgInmi6l4bHPjgIF4bHN45paH5Lu277yBJyk7CiAgICAgICAgLy8g6K+75Y+WZXhjZWzmlofku7bmlbDmja4KICAgICAgICByZWFkV29ya2Jvb2tGcm9tTG9jYWxGaWxlKGZpbGUpCiAgICAgICAgICAudGhlbih3b3JrYm9vayA9PiB7CiAgICAgICAgICAgIC8vIOmBjeWOhuavj+W8oOihqOivu+WPlgogICAgICAgICAgICBsZXQgZnJvbVRvID0gJyc7CiAgICAgICAgICAgIGxldCBwZXJzb25zID0gW107CiAgICAgICAgICAgIGZvciAodmFyIHNoZWV0IGluIHdvcmtib29rLlNoZWV0cykgewogICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh3b3JrYm9vay5TaGVldHMsIHNoZWV0KQogICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgZnJvbVRvID0gd29ya2Jvb2suU2hlZXRzW3NoZWV0XVsnIXJlZiddOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZnJvbVRvKTsKICAgICAgICAgICAgICAgIHBlcnNvbnMgPSBwZXJzb25zLmNvbmNhdCgKICAgICAgICAgICAgICAgICAgWExTWC51dGlscy5zaGVldF90b19qc29uKHdvcmtib29rLlNoZWV0c1tzaGVldF0sIHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IHRoaXMuYWN0aXZlRm9ybS5mb3JtSXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5wcm9wKSwKICAgICAgICAgICAgICAgICAgICBkZWZ2YWw6ICcnIC8vIOm7mOiupOWAvOS4uuepuuWtl+espuS4sgogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGJyZWFrOyAvLyDlpoLmnpzlj6rlj5bnrKzkuIDlvKDooajvvIzlsLHlj5bmtojms6jph4rov5nooYwKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5iYXRjaEltcG9ydChwZXJzb25zLnNsaWNlKDEpKTsKICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+aWh+S7tuivu+WPluWksei0pScpOwogICAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn5a+85YWl5aSx6LSl77ya5pyq55+l6ZSZ6K+vJyk7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdGhpcy5yZXNldEZpbGUoKTsKICAgICAgfQogICAgfSwKICAgIC8qKgogICAgICog5om56YeP5a+85YWlCiAgICAgKi8KICAgIGFzeW5jIGJhdGNoSW1wb3J0KGxpc3QpIHsKICAgICAgY29uc3QgbG9hZGluZyA9IHRoaXMuJGxvYWRpbmcoeyB0ZXh0OiAn5a+85YWl5LitLi4uJyB9KTsKICAgICAgbGV0IHN1Y2Nlc3NDb3VudCA9IDA7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykgewogICAgICAgIHRyeSB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcAogICAgICAgICAgYXdhaXQgYXhpb3MoCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICB1cmw6IHRoaXMuYWN0aXZlRm9ybS51cmwsCiAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgICAgZGF0YTogbGlzdFtpXQogICAgICAgICAgICB9LAogICAgICAgICAgICAnc2ltc2JmZicKICAgICAgICAgICk7CiAgICAgICAgICBzdWNjZXNzQ291bnQrKzsKICAgICAgICAgIGxvYWRpbmcudGV4dCA9IGDmraPlnKjlr7zlhaXnrKwke2kgKwogICAgICAgICAgICAxfeadoeaVsOaNru+8jOW3suaIkOWKn+WvvOWFpSR7c3VjY2Vzc0NvdW50feadoeaVsOaNruOAgmA7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS53YXJuaW5nKCflr7zlhaXpg6jliIbmiJDlip/vvJonICsgc3VjY2Vzc0NvdW50ICsgJ+adoeaVsOaNricpOwogICAgICAgICAgbG9hZGluZy5jbG9zZSgpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgICBsb2FkaW5nLmNsb3NlKCk7CiAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2Vzcygn5a+85YWl5oiQ5YqfJyk7CiAgICB9LAogICAgLyoqCiAgICAgKiDph43nva5maWxl6KGo5Y2V77yM6Kej5Yaz6YeN5aSN6YCJ5oup5ZCM5LiA5Liq5paH5Lu25LiN6Kem5Y+RY2hhbmdl5LqL5Lu26Zeu6aKYCiAgICAgKi8KICAgIHJlc2V0RmlsZSgpIHsKICAgICAgdGhpcy5yZW5kZXJGaWxlID0gZmFsc2U7CiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICB0aGlzLnJlbmRlckZpbGUgPSB0cnVlOwogICAgICB9KTsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"index.vue","sourceRoot":"src/pages/sims/views/test/DataCorrection","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-tabs v-model=\"activeName\">\n      <el-tab-pane\n        v-for=\"item in config\"\n        :key=\"item.title\"\n        :label=\"item.title\"\n        :name=\"item.title\"\n      >\n        <c-dynamic-form\n          :form-attrs=\"{ inline: true }\"\n          :form-data=\"formDataMap[item.title]\"\n          :form-items=\"item.formItems\"\n          @change-model=\"handleChangeModel\"\n        />\n      </el-tab-pane>\n    </el-tabs>\n    <div class=\"t-c\">\n      <el-button type=\"primary\" @click=\"handleConfirm\">提交</el-button>\n      <el-button @click=\"handleResetForm\">重置表单</el-button>\n      <el-button type=\"primary\" @click=\"$refs.file.click()\">导入</el-button>\n      <input\n        v-if=\"renderFile\"\n        ref=\"file\"\n        type=\"file\"\n        v-show=\"false\"\n        accept=\".xls,.xlsx\"\n        @change=\"handleChangeFile\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Tabs, TabPane, Button } from 'element-ui';\nimport CDynamicForm from '@/components/common/CDynamicForm';\nimport config from './config/index.js';\nimport axios from '@/plugins/axios';\nimport XLSX from 'xlsx';\n\n/**\n * 读取本地excel文件\n * @param {*} file 文件\n * @return {Promise}\n */\nfunction readWorkbookFromLocalFile(file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader();\n    reader.onload = function(e) {\n      var data = e.target.result;\n      var workbook = XLSX.read(data, { type: 'binary' });\n      resolve(workbook);\n    };\n    reader.onerror = reject;\n    reader.readAsBinaryString(file);\n  });\n}\n\nexport default {\n  name: 'DataCorrection',\n  components: {\n    [Tabs.name]: Tabs,\n    [TabPane.name]: TabPane,\n    [Button.name]: Button,\n    CDynamicForm\n  },\n  props: {},\n  data() {\n    const formDataMap = {};\n    config.forEach(item => {\n      formDataMap[item.title] = {};\n      // 处理字典数据\n      item.formItems.forEach(row => {\n        row.dict && (row.options = this.$D(row.dict));\n      });\n    });\n    return {\n      /** 表单配置数据 */\n      config,\n      /** 所有表单数据 */\n      formDataMap,\n      /** 激活的表单 */\n      activeName: this.$route.query.activeName || config[0].title,\n      /** 渲染input-file */\n      renderFile: true\n    };\n  },\n  computed: {\n    /**\n     * 激活的表单\n     */\n    activeForm() {\n      return this.config.find(item => item.title === this.activeName);\n    }\n  },\n  watch: {\n    /**\n     * 修改激活\n     */\n    activeName() {\n      this.$router.replace({\n        ...this.$route,\n        query: {\n          ...this.$route.query,\n          activeName: this.activeName\n        }\n      });\n    }\n  },\n  created() {},\n  mounted() {},\n  methods: {\n    /**\n     * 存储每个表单的数据\n     * @param {*} model 表单数据\n     */\n    handleChangeModel(model) {\n      this.formDataMap[this.activeName] = model;\n    },\n    /**\n     * 提交表单数据\n     */\n    handleConfirm() {\n      const loading = this.$loading({\n        text: '提交中...'\n      });\n      axios(\n        {\n          url: this.activeForm.url,\n          method: 'POST',\n          data: this.formDataMap[this.activeName]\n        },\n        'simsbff'\n      )\n        .then(() => {\n          this.$message.success('提交成功');\n          // 清空表单\n          // this.handleResetForm();\n        })\n        .finally(() => {\n          loading.close();\n        });\n    },\n    /**\n     * 重置表单\n     */\n    handleResetForm() {\n      this.$set(this.formDataMap, this.activeName, {});\n    },\n    /**\n     * 导入功能\n     */\n    handleImport() {},\n    /**\n     * 改变文件\n     */\n    handleChangeFile(e) {\n      try {\n        const files = e.target.files;\n        if (!files.length) return this.$message.warning('请选择文件');\n        const file = files[0];\n        // 判断是否是excel文件\n        if (['xls', 'xlsx'].indexOf(file.name.split('.')[1]) === -1)\n          return this.$message.warning('请选择xls、xlsx文件！');\n        // 读取excel文件数据\n        readWorkbookFromLocalFile(file)\n          .then(workbook => {\n            // 遍历每张表读取\n            let fromTo = '';\n            let persons = [];\n            for (var sheet in workbook.Sheets) {\n              if (\n                Object.prototype.hasOwnProperty.call(workbook.Sheets, sheet)\n              ) {\n                fromTo = workbook.Sheets[sheet]['!ref'];\n                console.log(fromTo);\n                persons = persons.concat(\n                  XLSX.utils.sheet_to_json(workbook.Sheets[sheet], {\n                    header: this.activeForm.formItems.map(item => item.prop),\n                    defval: '' // 默认值为空字符串\n                  })\n                );\n                break; // 如果只取第一张表，就取消注释这行\n              }\n            }\n            this.batchImport(persons.slice(1));\n          })\n          .catch(e => {\n            console.log(e);\n            this.$message.warning('文件读取失败');\n          });\n      } catch (e) {\n        console.error(e);\n        this.$message.warning('导入失败：未知错误');\n      } finally {\n        this.resetFile();\n      }\n    },\n    /**\n     * 批量导入\n     */\n    async batchImport(list) {\n      const loading = this.$loading({ text: '导入中...' });\n      let successCount = 0;\n      for (let i = 0; i < list.length; i++) {\n        try {\n          // eslint-disable-next-line no-await-in-loop\n          await axios(\n            {\n              url: this.activeForm.url,\n              method: 'POST',\n              data: list[i]\n            },\n            'simsbff'\n          );\n          successCount++;\n          loading.text = `正在导入第${i +\n            1}条数据，已成功导入${successCount}条数据。`;\n        } catch (e) {\n          this.$message.warning('导入部分成功：' + successCount + '条数据');\n          loading.close();\n          return;\n        }\n      }\n      loading.close();\n      this.$message.success('导入成功');\n    },\n    /**\n     * 重置file表单，解决重复选择同一个文件不触发change事件问题\n     */\n    resetFile() {\n      this.renderFile = false;\n      this.$nextTick(() => {\n        this.renderFile = true;\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped></style>\n"]}]}