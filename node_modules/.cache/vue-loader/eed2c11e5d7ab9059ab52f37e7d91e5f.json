{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/logistics-data/views/DataDict/index.vue?vue&type=style&index=0&id=6f8e061b&lang=less&scoped=true&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/logistics-data/views/DataDict/index.vue","mtime":1627979214319},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5hcHAtY29udGFpbmVyIHsNCiAgcGFkZGluZzogMTVweCAyMHB4Ow0KfQ0KLnBsYXRlIHsNCiAgbWluLWhlaWdodDogMzAwcHg7DQogIGJhY2tncm91bmQ6IHJnYmEoMjU0LCAyNTUsIDI1NSwgMSk7DQogIGJveC1zaGFkb3c6IDBweCAzcHggNnB4IDBweCByZ2JhKDIxOSwgMjE5LCAyMTksIDAuNSk7DQogIGJvcmRlci1yYWRpdXM6IDZweDsNCiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzUsIDIzNSwgMjM1LCAxKTsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgJi1pbmZvIHsNCiAgICBwYWRkaW5nOiAxNXB4IDI4cHg7DQogICAgbWFyZ2luOiAxNXB4Ow0KICAgIC5lbC1mb3JtLWl0ZW0tLXNtYWxsLmVsLWZvcm0taXRlbSB7DQogICAgICBtYXJnaW4tYm90dG9tOiAyM3B4Ow0KICAgIH0NCiAgICAvZGVlcC8gLmVsLWZvcm0taXRlbV9fbGFiZWwgew0KICAgICAgZm9udC13ZWlnaHQ6IDQwMDsNCiAgICB9DQogIH0NCiAgJi10cmVlIHsNCiAgICBwYWRkaW5nOiAxNXB4IDEwcHg7DQogICAgbWFyZ2luOiAxNXB4Ow0KICAgIC5lbC10cmVlIHsNCiAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50Ow0KICAgIH0NCiAgfQ0KfQ0KDQovLyDlv6vmjbfoj5zljZUNCi5zaG9ydGN1dC1tZW51LWJveCB7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgbWluLWhlaWdodDogMzAwcHg7DQogIG92ZXJmbG93LXk6IGF1dG87DQp9DQouc2hvcnRjdXQtbWVudSB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgei1pbmRleDogMjAwMDsNCn0NCi8vIC5lZGl0LWZvcm0gew0KLy8gICAvZGVlcC8gLmVsLWZvcm0taXRlbV9fbGFiZWwgew0KLy8gICAgIGZvbnQtc2l6ZTogMTZweDsNCi8vICAgfQ0KLy8gICAvZGVlcC8gLmVsLWlucHV0X19pbm5lciB7DQovLyAgICAgd2lkdGg6IDQwMHB4Ow0KLy8gICB9DQovLyAgIC9kZWVwLyAuZWwtZm9ybS1pdGVtIHsNCi8vICAgICBtYXJnaW4tYm90dG9tOiAyMHB4Ow0KLy8gICB9DQovLyB9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappingsoyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/pages/logistics-data/views/DataDict","sourcesContent":["<template>\r\n  <!-- 数据字典 -->\r\n  <div class=\"app-container\" @click=\"closeMenu\">\r\n    <div class=\"header\">\r\n      <el-form\r\n        inline\r\n        class=\"search-form\"\r\n        size=\"small\"\r\n        @keyup.enter.native=\"query\"\r\n      >\r\n        <el-form-item label=\"业务ID：\">\r\n          <el-input\r\n            v-model.trim=\"queryParams.dictionaryKey\"\r\n            style=\"width: 160px\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"业务名称：\">\r\n          <el-input\r\n            v-model.trim=\"queryParams.dictionaryValueZh\"\r\n            style=\"width: 160px\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"状态：\">\r\n          <el-select\r\n            v-model=\"queryParams.status\"\r\n            clearable\r\n            style=\"width: 160px\"\r\n          >\r\n            <el-option :value=\"0\" label=\"启用\" />\r\n            <el-option :value=\"1\" label=\"禁用\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button :loading=\"loading\" @click=\"query\">\r\n            查询\r\n          </el-button>\r\n          <el-button :loading=\"loading\" type=\"primary\" @click=\"resetForm\">\r\n            重置\r\n          </el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n    <el-row class=\"plate-group\">\r\n      <el-col :md=\"12\">\r\n        <div class=\"plate plate-tree shortcut-menu-box\">\r\n          <el-tree\r\n            ref=\"treeDict\"\r\n            :data=\"treeData\"\r\n            :props=\"propsOptions\"\r\n            :lazy=\"true\"\r\n            :load=\"loadNode\"\r\n            :default-expanded-keys=\"defaultExpandedKeys\"\r\n            :expand-on-click-node=\"false\"\r\n            node-key=\"id\"\r\n            highlight-current\r\n            class=\"tree-dict\"\r\n            @node-contextmenu=\"onContextMenu\"\r\n            @node-click=\"onNodeClick\"\r\n          />\r\n          <c-shortcut-menu\r\n            v-show=\"showMenu\"\r\n            ref=\"shortcutMenu\"\r\n            :style=\"menuStyle\"\r\n            :menu-items=\"menuItems\"\r\n            class=\"shortcut-menu\"\r\n            @command=\"command\"\r\n          />\r\n        </div>\r\n      </el-col>\r\n      <el-col :md=\"12\">\r\n        <div class=\"plate plate-info\">\r\n          <el-form>\r\n            <el-form-item label=\"父业务ID：\">\r\n              {{ nowDictData.parentKey }}\r\n            </el-form-item>\r\n            <el-form-item label=\"父业务名称：\">\r\n              {{ nowDictData.parentText }}\r\n            </el-form-item>\r\n            <el-form-item label=\"业务ID：\">\r\n              {{ nowDictData.dictionaryKey }}\r\n            </el-form-item>\r\n            <el-form-item label=\"业务名称：\">\r\n              {{ nowDictData.dictionaryValueZh }}\r\n            </el-form-item>\r\n            <el-form-item label=\"状态：\">\r\n              {{ nowDictData.status | filtersStatus }}\r\n            </el-form-item>\r\n          </el-form>\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n    <!-- 字典编辑模态框 start -->\r\n    <el-dialog\r\n      center\r\n      :visible.sync=\"showDialog\"\r\n      :title=\"dialogTitle\"\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n    >\r\n      <el-form\r\n        ref=\"editForm\"\r\n        :model=\"editForm\"\r\n        :rules=\"formRules\"\r\n        size=\"1\"\r\n        label-position=\"left\"\r\n        label-width=\"105px\"\r\n        class=\"edit-form\"\r\n      >\r\n        <el-form-item label=\"父业务ID\">\r\n          {{ editForm.parentKey }}\r\n        </el-form-item>\r\n        <el-form-item label=\"父业务名称\">\r\n          {{ editForm.parentText }}\r\n        </el-form-item>\r\n        <el-form-item label=\"业务ID\" prop=\"dictionaryKey\">\r\n          <el-input\r\n            v-model.trim=\"editForm.dictionaryKey\"\r\n            :disabled=\"editStatus === 'editor'\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"业务名称\" prop=\"dictionaryValueZh\">\r\n          <el-input v-model.trim=\"editForm.dictionaryValueZh\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"状态\" prop=\"status\">\r\n          <el-radio-group v-model=\"editForm.status\">\r\n            <el-radio :label=\"0\">启用</el-radio>\r\n            <el-radio :label=\"1\">禁用</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button\r\n          :loading=\"confirmLoading\"\r\n          size=\"small\"\r\n          type=\"primary\"\r\n          @click=\"confirm\"\r\n          >确定</el-button\r\n        >\r\n        <el-button\r\n          :loading=\"confirmLoading\"\r\n          size=\"small\"\r\n          @click=\"showDialog = false\"\r\n          >取消</el-button\r\n        >\r\n      </div>\r\n    </el-dialog>\r\n    <!-- 字典编辑模态框 end -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  FormItem,\r\n  Dialog,\r\n  Input,\r\n  Tree,\r\n  Select,\r\n  Option,\r\n  Radio,\r\n  RadioGroup\r\n} from 'element-ui';\r\nimport CShortcutMenu from '@/components/common/CShortcutMenu';\r\nimport utils from '@/plugins/common/utils';\r\nimport axios from '@/plugins/axios';\r\n\r\nfunction treeDataChangeField(arrData, settings) {\r\n  //对象数组或对象字段key修改\r\n  settings = settings || {};\r\n  settings.refer = settings.refer === undefined ? 1 : settings.refer;\r\n  var data;\r\n  if (Object.prototype.toString.call(arrData) === '[object Array]') {\r\n    //数组\r\n    data = [];\r\n    for (var i in arrData) {\r\n      data.push(treeDataChangeField(arrData[i], settings));\r\n    }\r\n  } else if (arrData && typeof arrData === 'object') {\r\n    //对象\r\n    var opt = settings.data;\r\n    data = {};\r\n    for (let i in settings.refer ? arrData : opt) {\r\n      if (arrData[i] !== undefined) {\r\n        settings.contain && (data[i] = arrData[i]); //包含原数据所有字段，可能会被覆盖\r\n        if (typeof opt[i] == 'function') {\r\n          var obj = opt[i](i, arrData[i], arrData);\r\n          if (Object.prototype.toString.call(obj) === '[object Array]') {\r\n            data[obj[0]] = obj[1];\r\n          } else if (obj && typeof obj === 'object') {\r\n            for (var j in obj) {\r\n              data[j] = obj[j];\r\n            }\r\n          }\r\n        } else {\r\n          var isArr =\r\n            Object.prototype.toString.call(settings.treeNodes) ===\r\n            '[object Array]';\r\n          let key = opt[i] ? opt[i] : i;\r\n          if (isArr) {\r\n            data[key] = settings.treeNodes.indexOf(i) >= 0;\r\n          } else {\r\n            data[key] =\r\n              !settings.treeNodes || settings.treeNodes === i\r\n                ? treeDataChangeField(arrData[i], settings)\r\n                : arrData[i];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    data = arrData;\r\n  }\r\n  return data;\r\n}\r\n\r\nconst commands = {\r\n  NEW: 'new',\r\n  EDITOR: 'editor',\r\n  DELETE: 'delete'\r\n};\r\nfunction getObjXy(obj) {\r\n  var xy = obj.getBoundingClientRect();\r\n  var top =\r\n      xy.top -\r\n      document.documentElement.clientTop +\r\n      document.documentElement.scrollTop, //document.documentElement.clientTop 在IE67中始终为2，其他高级点的浏览器为0\r\n    bottom = xy.bottom,\r\n    left =\r\n      xy.left -\r\n      document.documentElement.clientLeft +\r\n      document.documentElement.scrollLeft, //document.documentElement.clientLeft 在IE67中始终为2，其他高级点的浏览器为0\r\n    right = xy.right,\r\n    width = xy.width || right - left, //IE67不存在width 使用right - left获得\r\n    height = xy.height || bottom - top;\r\n\r\n  return {\r\n    top: top,\r\n    right: right,\r\n    bottom: bottom,\r\n    left: left,\r\n    width: width,\r\n    height: height\r\n  };\r\n}\r\n\r\nexport default {\r\n  name: 'BDataDict',\r\n  // 注册组件\r\n  components: {\r\n    [CShortcutMenu.name]: CShortcutMenu, // 快捷菜单\r\n    [Row.name]: Row,\r\n    [Col.name]: Col,\r\n    [Form.name]: Form,\r\n    [FormItem.name]: FormItem,\r\n    [Dialog.name]: Dialog,\r\n    [Input.name]: Input,\r\n    [Tree.name]: Tree,\r\n    [Select.name]: Select,\r\n    [Option.name]: Option,\r\n    [RadioGroup.name]: RadioGroup,\r\n    [Radio.name]: Radio\r\n  },\r\n  props: {\r\n    /**\r\n     * 服务器类型\r\n     */\r\n    serverType: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  // 定义数据\r\n  data() {\r\n    return {\r\n      loading: false, // 数据加载中\r\n      queryParams: {\r\n        // 查询参数\r\n        dictionaryKey: '', // 字典键\r\n        dictionaryValueZh: '', // 字典值\r\n        status: '' // 状态\r\n      },\r\n      treeData: [\r\n        // 树数据\r\n      ],\r\n      nowDictData: {}, // 当前字典数据\r\n      nowDictNode: {}, // 当前字典节点\r\n      propsOptions: {\r\n        // 树组件配置\r\n        label: 'dictionaryValueZh'\r\n        // isLeaf: function (data, node) {\r\n        //   return data.isLeaf === '1'\r\n        // }\r\n      },\r\n      showMenu: false, // 是否显示菜单\r\n      menuTop: 0, // 菜单距离顶部距离\r\n      menuLeft: 0, // 菜单距离右侧距离\r\n      menuLocation: {\r\n        // 菜单位置\r\n        pageX: 0,\r\n        pageY: 0,\r\n        relativeX: 0,\r\n        relativeY: 0\r\n      },\r\n      // offsetY: 0,             // 保存上次右键位置\r\n      // offsetX: 0,             // 保存上次右键位置\r\n      screenWidth: document.body.clientWidth, // 页面宽度监听\r\n      showDialog: false, // 是否显示模态框\r\n      editForm: {\r\n        // 菜单编辑表单\r\n        parentKey: '', // 父业务Id\r\n        parentText: '', // 父业务名称\r\n        parentId: '', // 父节点id\r\n        dictionaryKey: '', // 字典键\r\n        dictionaryValueZh: '', // 字典值\r\n        status: 0 // 状态\r\n      },\r\n      formRules: {\r\n        // 表单验证\r\n        dictionaryKey: [\r\n          { required: true, trigger: 'blur', message: '业务ID未填写' },\r\n          {\r\n            validator: function(rule, value, callback) {\r\n              if (/,/.test(value))\r\n                callback(new Error('非法字符，不允许存在“ , ”。'));\r\n              else callback();\r\n            }\r\n          },\r\n          { max: 64, trigger: '', message: '最大长度64个字符' }\r\n        ],\r\n        dictionaryValueZh: [\r\n          { required: true, trigger: 'blur', message: '业务名称未填写' },\r\n          { max: 128, trigger: '', message: '最大长度128个字符' }\r\n        ],\r\n        status: [\r\n          { required: true, trigger: 'click', message: '业务名称未填写' }\r\n        ]\r\n      },\r\n      editStatus: '', // 编辑状态\r\n      confirmLoading: false, // 提交中\r\n      defaultExpandedKeys: ['-1']\r\n    };\r\n  },\r\n  // 计算属性\r\n  computed: {\r\n    /**\r\n     * 快捷菜单项\r\n     */\r\n    menuItems() {\r\n      if (this.nowDictNode.level === 1) {\r\n        // 根节点只能新增\r\n        return [\r\n          { label: '新增', command: commands.NEW, auth: ['datadict-add'] }\r\n        ];\r\n      } else if (!this.nowDictNode.isLeaf) {\r\n        // 有子节点不允许删除\r\n        return [\r\n          { label: '新增', command: commands.NEW, auth: ['datadict-add'] },\r\n          { label: '编辑', command: commands.EDITOR, auth: ['datadict-edit'] }\r\n        ];\r\n      } else {\r\n        // 叶子节点\r\n        return [\r\n          { label: '新增', command: commands.NEW, auth: ['datadict-add'] },\r\n          { label: '编辑', command: commands.EDITOR, auth: ['datadict-edit'] },\r\n          { label: '删除', command: commands.DELETE, auth: ['datadict-delete'] }\r\n        ];\r\n      }\r\n    },\r\n    /**\r\n     * 快捷菜单样式\r\n     */\r\n    menuStyle() {\r\n      return {\r\n        top: this.menuTop + 'px',\r\n        left: this.menuLeft + 'px'\r\n      };\r\n    },\r\n    /**\r\n     * 模态框标题\r\n     */\r\n    dialogTitle() {\r\n      return (\r\n        {\r\n          new: '新增',\r\n          editor: '编辑'\r\n        }[this.editStatus] || ''\r\n      );\r\n    }\r\n  },\r\n  // 侦听器\r\n  watch: {\r\n    screenWidth(newVal, oldVal) {\r\n      this.calcMenuPosition();\r\n    }\r\n  },\r\n  // 创建完成钩子\r\n  created() {},\r\n  // 挂在完成钩子\r\n  mounted() {\r\n    /**\r\n     * 监听页面变化事件\r\n     */\r\n    window.addEventListener('resize', this.onResize);\r\n  },\r\n  destroyed() {\r\n    /**\r\n     * 移除监听页面变化事件\r\n     */\r\n    window.removeEventListener('resize', this.onResize);\r\n  },\r\n  // 方法定义\r\n  methods: {\r\n    /**\r\n     * 表单查询\r\n     */\r\n    query() {\r\n      this.treeData = [\r\n        {\r\n          id: '-1',\r\n          dictionaryKey: '-1',\r\n          dictionaryValueZh: '数据字典',\r\n          status: 0\r\n        }\r\n      ];\r\n    },\r\n    /**\r\n     * 加载节点\r\n     */\r\n    loadNode(node, resolve) {\r\n      console.log(node);\r\n      if (node.level === 0)\r\n        return resolve([\r\n          {\r\n            id: '-1',\r\n            dictionaryKey: '-1',\r\n            dictionaryValueZh: '数据字典',\r\n            status: 0\r\n          }\r\n        ]);\r\n      if (this.loading) return;\r\n      this.loading = true;\r\n      axios(\r\n        {\r\n          method: 'GET',\r\n          //url: '/commonData/dictionaryApi/select/dic/children',\r\n          url: `/dictionary/selectDictionaryById/${node.data.id}`,\r\n          params: {\r\n            //get用 params  post用 data\r\n            ...this.queryParams,\r\n            dictionaryText: this.queryParams.dictionaryValueZh,\r\n            keyList: [node.data.dictionaryKey]\r\n            //dictionaryValueZh: this.queryParams.dictionaryValueZh,\r\n            //status: this.queryParams.status,\r\n          }\r\n        },\r\n        this.serverType\r\n      )\r\n        .then(({ data }) => {\r\n          resolve(\r\n            treeDataChangeField(data || [], {\r\n              data: {\r\n                dictionaryText: 'dictionaryValueZh',\r\n                dictionaryId: 'id',\r\n                isLeaf: function(i, v, arr) {\r\n                  return v.isLeaf == 1 ? true : false;\r\n                }\r\n              },\r\n              treeNodes: 'children'\r\n            })\r\n          );\r\n          this.loading = false;\r\n        })\r\n        .catch(() => {\r\n          resolve([]);\r\n          this.loading = false;\r\n        });\r\n      // var sendData = {};\r\n      // var res = false;\r\n      // var keys = ['dictionaryKey', 'dictionaryValueZh', 'status'];\r\n      // for (let key of keys) {\r\n      //   if (this.queryParams[key] !== '') {\r\n      //     res = true;\r\n      //     break;\r\n      //   }\r\n      // }\r\n      // if (res && node.level === 1) {\r\n      //   sendData = this.queryParams;\r\n      //   axios(\r\n      //     {\r\n      //       method: 'GET',\r\n      //       url: '/dictionary/selectDictionaryWithChildren',\r\n      //       params: sendData\r\n      //     },\r\n      //     this.serverType\r\n      //   )\r\n      //     .then(({ data }) => {\r\n      //       resolve(data || []);\r\n      //       this.loading = false;\r\n      //     })\r\n      //     .catch(() => {\r\n      //       resolve([]);\r\n      //       this.loading = false;\r\n      //     });\r\n      // } else {\r\n      //   axios(\r\n      //     {\r\n      //       url: `/dictionary/selectDictionaryWithChildren/${node.data.dictionaryId}`,\r\n      //       method: 'GET',\r\n      //       params: sendData\r\n      //     },\r\n      //     this.serverType\r\n      //   )\r\n      //     .then(({ data }) => {\r\n      //       resolve(data || []);\r\n      //       this.loading = false;\r\n      //     })\r\n      //     .catch(() => {\r\n      //       resolve([]);\r\n      //       this.loading = false;\r\n      //     });\r\n      // }\r\n    },\r\n    /**\r\n     * 重置表单\r\n     * @param {String} form 表单的ref\r\n     */\r\n    resetForm(form) {\r\n      this.queryParams = {\r\n        // 查询参数\r\n        dictionaryKey: '', // 字典键\r\n        dictionaryValueZh: '', // 字典值\r\n        status: '' // 状态\r\n      };\r\n    },\r\n    /**\r\n     * 右键快捷菜单\r\n     * @param {Event} event 事件对象\r\n     * @param {*} data 节点数据\r\n     * @param {*} node 节点\r\n     * @param {*} ref 节点组件本身\r\n     */\r\n    onContextMenu(event, data, node, ref) {\r\n      console.log(event, data, node, ref);\r\n      // 保存\r\n      this.nowDictData = data;\r\n      this.nowDictNode = node;\r\n      this.nowDictData.parentText =\r\n        this.nowDictData.parentText || (node.parent && node.parent.label);\r\n      // 显示菜单\r\n      this.showMenu = true;\r\n      Object.keys(this.menuLocation).forEach(key => {\r\n        this.menuLocation[key] = event[key];\r\n      });\r\n      this.$nextTick(() => {\r\n        var xy = getObjXy(this.$refs['treeDict'].$el);\r\n        this.menuLocation.relativeX = this.menuLocation.pageX - xy.left;\r\n        this.menuLocation.relativeY = this.menuLocation.pageY - xy.top;\r\n        this.calcMenuPosition();\r\n      });\r\n    },\r\n    /**\r\n     * 关闭菜单显示\r\n     */\r\n    closeMenu() {\r\n      this.showMenu = false;\r\n    },\r\n    /**\r\n     * 计算设置菜单位置\r\n     */\r\n    calcMenuPosition() {\r\n      if (!this.showMenu) return;\r\n      this.$nextTick(() => {\r\n        // 快捷菜单宽度\r\n        var shortcutMenu = this.$refs['shortcutMenu'];\r\n        var treeDict = this.$refs['treeDict'];\r\n        var shortcutMenuWidth = shortcutMenu.$el.offsetWidth;\r\n        var treeDictWidth = treeDict.$el.offsetWidth;\r\n        var relativeX = this.menuLocation.relativeX;\r\n        var relativeY = this.menuLocation.relativeY;\r\n        this.menuTop = relativeY;\r\n        // 判断快捷菜单是否超出范围\r\n        if (relativeX + shortcutMenuWidth > treeDictWidth) {\r\n          this.menuLeft = treeDictWidth - shortcutMenuWidth;\r\n        } else {\r\n          this.menuLeft = relativeX;\r\n        }\r\n        //修复在Y轴超出范围的情况\r\n        var shortcutMenuHeight = shortcutMenu.$el.offsetHeight;\r\n        var treeDictHeight = treeDict.$el.offsetHeight;\r\n        if (relativeY + shortcutMenuHeight > treeDictHeight) {\r\n          this.menuTop = treeDictHeight - shortcutMenuHeight;\r\n        } else {\r\n          this.menuTop = relativeY;\r\n        }\r\n      });\r\n    },\r\n    /**\r\n     * 更新页面宽度\r\n     */\r\n    onResize: utils.debounce(function() {\r\n      window.screenWidth = document.body.clientWidth;\r\n      this.screenWidth = window.screenWidth;\r\n    }, 200),\r\n    /**\r\n     * 指令执行\r\n     */\r\n    command(event, command, data) {\r\n      switch (command) {\r\n        case commands.NEW:\r\n          this.editStatus = command;\r\n          // 新增\r\n          this.editForm = {\r\n            isLeaf: '1',\r\n            parentId: this.nowDictData.dictionaryId,\r\n            parentText: this.nowDictData.dictionaryValueZh,\r\n            parentKey: this.nowDictData.dictionaryKey,\r\n            dictionaryKey: '', // 字典键\r\n            dictionaryValueZh: '', // 字典值\r\n            status: 0, // 状态\r\n            dicOrder:\r\n              ((this.nowDictNode.childNodes &&\r\n                this.nowDictNode.childNodes.length) ||\r\n                0) + 1\r\n          };\r\n          this.initShowDialog();\r\n          break;\r\n        case commands.EDITOR:\r\n          // 编辑\r\n          this.editStatus = command;\r\n          var editData = new Object();\r\n          [\r\n            'isLeaf',\r\n            'parentKey',\r\n            'parentId',\r\n            'dictionaryId',\r\n            'dictionaryKey',\r\n            'dictionaryValueZh',\r\n            'status',\r\n            'dicOrder'\r\n          ].forEach(key => {\r\n            editData[key] = this.nowDictData[key];\r\n          });\r\n          editData.parentText =\r\n            (this.nowDictNode.parent &&\r\n              this.nowDictNode.parent.data &&\r\n              this.nowDictNode.parent.data.dictionaryValueZh) ||\r\n            '';\r\n          this.editForm = editData;\r\n          this.initShowDialog();\r\n          break;\r\n        case commands.DELETE:\r\n          // 删除\r\n          this.$confirm('是否确定删除?', '提示', {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          })\r\n            .then(() => {\r\n              console.log(this.nowDictData);\r\n              return axios(\r\n                {\r\n                  method: 'GET',\r\n                  url: '/dictionary/deleteDictionary',\r\n                  params: {\r\n                    ids: this.nowDictData.dictionaryId || this.nowDictData.id\r\n                  }\r\n                },\r\n                this.serverType\r\n              );\r\n            })\r\n            .then(() => {\r\n              return this.$nextTick();\r\n            })\r\n            .then(() => {\r\n              this.$refs['treeDict'].remove(this.nowDictNode);\r\n              this.$message.success('删除成功');\r\n            })\r\n            .catch(() => {});\r\n          break;\r\n      }\r\n    },\r\n    /**\r\n     * 提交表单\r\n     */\r\n    confirm() {\r\n      if (this.confirmLoading) return;\r\n      this.$refs['editForm'].validate(valid => {\r\n        var sendData = {};\r\n        if (valid) {\r\n          switch (this.editStatus) {\r\n            case 'new':\r\n              // 新增\r\n              sendData = {\r\n                ...this.editForm,\r\n                parentId: '',\r\n                dictionaryText: this.editForm.dictionaryValueZh\r\n              };\r\n              delete sendData['isLeaf'];\r\n              this.confirmLoading = true;\r\n              axios(\r\n                {\r\n                  method: 'POST',\r\n                  url: '/dictionary/saveDictionary',\r\n                  data: sendData\r\n                },\r\n                this.serverType\r\n              )\r\n                .then(({ data }) => {\r\n                  this.$nextTick(() => {\r\n                    if (!this.nowDictData.children) {\r\n                      this.$set(this.nowDictData, 'children', []);\r\n                    }\r\n                    this.nowDictData.children.push({\r\n                      ...data,\r\n                      dictionaryValueZh: data.dictionaryText,\r\n                      id: data.dictionaryId\r\n                    });\r\n\r\n                    this.showDialog = false;\r\n                    this.confirmLoading = false;\r\n                    this.$message.success('新增成功');\r\n                  });\r\n                })\r\n                .catch(() => {\r\n                  this.confirmLoading = false;\r\n                });\r\n              break;\r\n            case 'editor':\r\n              // 编辑\r\n              this.confirmLoading = true;\r\n              console.log(this.nowDictData, this.nowDictNode);\r\n              axios(\r\n                {\r\n                  method: 'POST',\r\n                  url: '/dictionary/saveDictionary',\r\n                  data: {\r\n                    ...this.editForm,\r\n                    dictionaryText: this.editForm.dictionaryValueZh,\r\n                    dictionaryId: this.nowDictData.id\r\n                  }\r\n                },\r\n                this.serverType\r\n              )\r\n                .then(() => {\r\n                  Object.assign(this.nowDictData, this.editForm);\r\n                  this.showDialog = false;\r\n                  this.confirmLoading = false;\r\n                  this.$message.success('修改成功');\r\n                })\r\n                .catch(() => {\r\n                  this.confirmLoading = false;\r\n                });\r\n              break;\r\n            default:\r\n              this.$message.warning('提交异常，无处理方法');\r\n              break;\r\n          }\r\n        }\r\n      });\r\n    },\r\n    /**\r\n     * 初始化显示模态框\r\n     */\r\n    initShowDialog() {\r\n      this.showDialog = true;\r\n      this.$nextTick(() => {\r\n        this.$refs['editForm'].clearValidate();\r\n      });\r\n    },\r\n    /**\r\n     * 点击节点事件\r\n     * @param {*} data 节点数据\r\n     * @param {*} node 节点对象\r\n     * @param {*} ref 节点组件本身\r\n     */\r\n    onNodeClick(data, node, ref) {\r\n      console.log(node, data, ref);\r\n      this.showMenu = false;\r\n      this.nowDictData = data;\r\n      this.nowDictNode = node;\r\n      this.nowDictData.parentText =\r\n        (this.nowDictNode.parent &&\r\n          this.nowDictNode.parent.data &&\r\n          this.nowDictNode.parent.data.dictionaryValueZh) ||\r\n        '';\r\n    }\r\n  },\r\n  // 过滤器\r\n  filters: {\r\n    filtersStatus(value) {\r\n      return (\r\n        {\r\n          0: '启用',\r\n          1: '禁用'\r\n        }[value] || ''\r\n      );\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.app-container {\r\n  padding: 15px 20px;\r\n}\r\n.plate {\r\n  min-height: 300px;\r\n  background: rgba(254, 255, 255, 1);\r\n  box-shadow: 0px 3px 6px 0px rgba(219, 219, 219, 0.5);\r\n  border-radius: 6px;\r\n  border: 1px solid rgba(235, 235, 235, 1);\r\n  box-sizing: border-box;\r\n  &-info {\r\n    padding: 15px 28px;\r\n    margin: 15px;\r\n    .el-form-item--small.el-form-item {\r\n      margin-bottom: 23px;\r\n    }\r\n    /deep/ .el-form-item__label {\r\n      font-weight: 400;\r\n    }\r\n  }\r\n  &-tree {\r\n    padding: 15px 10px;\r\n    margin: 15px;\r\n    .el-tree {\r\n      background: transparent;\r\n    }\r\n  }\r\n}\r\n\r\n// 快捷菜单\r\n.shortcut-menu-box {\r\n  position: relative;\r\n  min-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n.shortcut-menu {\r\n  position: absolute;\r\n  z-index: 2000;\r\n}\r\n// .edit-form {\r\n//   /deep/ .el-form-item__label {\r\n//     font-size: 16px;\r\n//   }\r\n//   /deep/ .el-input__inner {\r\n//     width: 400px;\r\n//   }\r\n//   /deep/ .el-form-item {\r\n//     margin-bottom: 20px;\r\n//   }\r\n// }\r\n</style>\r\n"]}]}