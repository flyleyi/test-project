{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/score-analysis-admin/components/business/BLogManage/index.vue?vue&type=style&index=0&id=59e1ea3c&lang=less&scoped=true&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/score-analysis-admin/components/business/BLogManage/index.vue","mtime":1627979214341},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi9kZWVwLyAuZWwtdGFibGVfX2V4cGFuZGVkLWNlbGwgewogIHBhZGRpbmc6IDAgMCAwIDQ3cHg7Cn0KL2RlZXAvIC5lbC10YWJsZV9faGVhZGVyLXdyYXBwZXIgdGggewogIGJhY2tncm91bmQ6IHJnYmEoMjQ1LCAyNDYsIDI0NywgMSk7Cn0KLmV4cGFuZC10YWJsZSB7CiAgYm9yZGVyLXRvcDogbm9uZTsKICAvZGVlcC8gLmVsLXRhYmxlX19oZWFkZXItd3JhcHBlciB0aCB7CiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI0MSwgMjQ2LCAyNTUsIDEpOwogIH0KfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/business/BLogManage","sourcesContent":["·<template>\n  <!-- 系统日志 -->\n  <div class=\"app-container\">\n    <!-- url配置获取数据 -->\n    <!-- <xm-table\n      url=\"/usergw/admin/common/pageList/100\">\n    </xm-table> -->\n    <b-table\n      ref=\"bTable\"\n      loading\n      :headers=\"columns\"\n      :form-items=\"formItems\"\n      :ajax-get-data=\"fatchMethod\"\n    >\n      <template slot=\"column|unitList\" slot-scope=\"{ row }\">\n        <el-table class=\"expand-table\" size=\"1\" :data=\"row.unitList\" border>\n          <el-table-column label=\"列注释\" prop=\"colNameZn\" />\n          <el-table-column label=\"列名\" prop=\"colName\" />\n          <el-table-column label=\"列新值\" prop=\"colValueNew\" />\n          <el-table-column label=\"列旧值\" prop=\"colValueOri\" />\n        </el-table>\n      </template>\n    </b-table>\n    <!-- <xm-table\n      ref=\"xmTable\"\n      :fatch-method=\"fatchMethod\"\n      :form-items=\"formItems\"\n      :columns=\"columns\"\n      :tableOptions=\"{ size: '1' }\"\n    >\n      <template slot=\"table-prepend\">\n        <el-table-column type=\"expand\">\n          <template slot-scope=\"{ row }\">\n            <el-table class=\"expand-table\" size=\"1\" :data=\"row.unitList\" border>\n              <el-table-column label=\"列注释\" prop=\"colNameZn\" />\n              <el-table-column label=\"列名\" prop=\"colName\" />\n              <el-table-column label=\"列新值\" prop=\"colValueNew\" />\n              <el-table-column label=\"列旧值\" prop=\"colValueOri\" />\n            </el-table>\n          </template>\n        </el-table-column>\n      </template>\n      <template slot=\"otherHandle\" slot-scope=\"{ row }\">\n        <el-button\n          :loading=\"row.loading\"\n          type=\"primary\"\n          @click=\"handletoggle(row)\"\n          >启用</el-button\n        >\n      </template>\n    </xm-table> -->\n  </div>\n</template>\n\n<script>\nimport axios from '@/plugins/axios';\nimport { Button, TableColumn, Table } from 'element-ui';\nimport BTable from '../BTable';\nimport utils from '@/plugins/common/utils';\nexport default {\n  name: 'BLogManage',\n  // 注册组件\n  components: {\n    [Button.name]: Button,\n    [Table.name]: Table,\n    [TableColumn.name]: TableColumn,\n    BTable\n  },\n  props: {\n    /**\n     * 服务器类型\n     */\n    serverType: {\n      type: String,\n      default: ''\n    }\n  },\n  // 定义数据\n  data() {\n    const self = this;\n    return {\n      /**\n       * 定义列\n       */\n      columns: [\n        {\n          prop: 'unitList',\n          colType: 'column',\n          type: 'expand'\n        },\n        {\n          label: '表名',\n          prop: 'tableName',\n          'show-overflow-tooltip': true\n        },\n        {\n          label: 'ip',\n          prop: 'ip'\n        },\n        {\n          label: '操作页面',\n          prop: 'operatePage'\n        },\n        {\n          label: '操作按钮',\n          prop: 'operateButton'\n        },\n        {\n          label: '操作类型',\n          prop: 'operateType'\n        },\n        {\n          label: '用户账号',\n          prop: 'operateUserId'\n        },\n        {\n          label: '开始时间',\n          prop: 'createDate',\n          width: '191px',\n          formatter(row, column, cellValue) {\n            return utils.dateConverter('yyyy-MM-dd hh:mm:ss', cellValue);\n          }\n        }\n      ],\n      // 定义查询表单\n      formItems: [\n        {\n          type: 'input',\n          prop: 'ip',\n          label: 'IP地址',\n          maxlength: 15\n        },\n        {\n          type: 'input',\n          prop: 'tableName',\n          label: '表名',\n          maxlength: 255\n        },\n        {\n          type: 'input',\n          prop: 'operateUserId',\n          label: '用户账户'\n        },\n        {\n          type: 'select',\n          prop: 'result',\n          label: '操作结果',\n          options: [\n            {\n              label: '成功',\n              value: 'success'\n            },\n            {\n              label: '失败',\n              value: 'failure'\n            }\n          ]\n        },\n        {\n          type: 'select',\n          prop: 'operateType',\n          label: '操作类型',\n          options: [\n            {\n              value: '新增',\n              label: '新增'\n            },\n            {\n              value: '更新',\n              label: '更新'\n            },\n            {\n              value: '删除',\n              label: '删除'\n            }\n          ]\n        },\n        {\n          type: 'date-picker',\n          prop: 'date',\n          label: '日期范围',\n          attrs: {\n            type: 'daterange',\n            'value-format': 'yyyy-MM-dd',\n            'range-separator': '至',\n            'start-placeholder': '开始日期',\n            'end-placeholder': '结束日期',\n            'unlink-panels': true,\n            align: 'right',\n            pickerOptions: {\n              shortcuts: [\n                {\n                  text: '最近一周',\n                  onClick(picker) {\n                    const end = new Date();\n                    const start = new Date();\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n                    picker.$emit('pick', [start, end]);\n                  }\n                },\n                {\n                  text: '最近一个月',\n                  onClick(picker) {\n                    const end = new Date();\n                    const start = new Date();\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n                    picker.$emit('pick', [start, end]);\n                  }\n                },\n                {\n                  text: '最近三个月',\n                  onClick(picker) {\n                    const end = new Date();\n                    const start = new Date();\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n                    picker.$emit('pick', [start, end]);\n                  }\n                }\n              ]\n            }\n          }\n        }\n      ]\n    };\n  },\n  // 计算属性\n  computed: {},\n  // 侦听器\n  watch: {},\n  // 创建完成钩子\n  created() {},\n  // 挂在完成钩子\n  mounted() {},\n  // 方法定义\n  methods: {\n    /**\n     * 获取列表数据的请求方法\n     */\n    fatchMethod(params) {\n      params.currentPage = params.page;\n      params = { ...params };\n      if (params.date && params.date.length >= 2) {\n        // 处理日期\n        params.startDate = params.date[0];\n        params.endData = params.date[1];\n        delete params.date;\n      }\n      return axios(\n        {\n          method: 'GET',\n          url: '/logInfo/list',\n          params\n        },\n        this.serverType\n      ).then(({ data }) => {\n        return {\n          data: {\n            records: Array.isArray(data.list) ? data.list : [],\n            total: data.totalRecords || 0\n          }\n        };\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n/deep/ .el-table__expanded-cell {\n  padding: 0 0 0 47px;\n}\n/deep/ .el-table__header-wrapper th {\n  background: rgba(245, 246, 247, 1);\n}\n.expand-table {\n  border-top: none;\n  /deep/ .el-table__header-wrapper th {\n    background: rgba(241, 246, 255, 1);\n  }\n}\n</style>\n"]}]}