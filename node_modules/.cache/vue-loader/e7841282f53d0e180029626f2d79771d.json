{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/logistics-data/views/BaseData/index.vue?vue&type=style&index=0&id=6e008ff6&lang=less&scoped=true&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/logistics-data/views/BaseData/index.vue","mtime":1627979214318},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYi10YWJsZSAvZGVlcC8gLmR5bmFtaWMtZm9ybSBpbnB1dCB7DQogIHdpZHRoOiAyMDBweDsNCn0NCi5yb2xlIHsNCiAgYmFja2dyb3VuZDogI2ZmZjsNCiAgcGFkZGluZzogMCAyNXB4IDA7DQogICYtbWFpbiB7DQogICAgcGFkZGluZy10b3A6IDIzcHg7DQogIH0NCiAgLmRpYWxvZyB7DQogICAgJi1jb250ZW50IHsNCiAgICAgICYtaXRlbSB7DQogICAgICAgIG1hcmdpbi1ib3R0b206IDI5cHg7DQogICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7DQogICAgICAgICYtbGFiZWwgew0KICAgICAgICAgIGZsb2F0OiBsZWZ0Ow0KICAgICAgICAgIG1pbi13aWR0aDogOTBweDsNCiAgICAgICAgfQ0KICAgICAgICAmLXJlZCB7DQogICAgICAgICAgY29sb3I6ICNmNTIyMmQ7DQogICAgICAgIH0NCiAgICAgICAgJi10ZXh0IHsNCiAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgICAgICB9DQogICAgICB9DQogICAgICAmLWJ0bnMgew0KICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgICAgIHBhZGRpbmctYm90dG9tOiAyN3B4Ow0KICAgICAgICBidXR0b24gew0KICAgICAgICAgIG1hcmdpbjogMCAyMHB4Ow0KICAgICAgICAgIHdpZHRoOiA4NnB4Ow0KICAgICAgICAgIGhlaWdodDogMzZweDsNCiAgICAgICAgICBmb250LXNpemU6IDE0cHg7DQogICAgICAgICAgLy8gZm9udC1mYW1pbHk6IFBpbmdGYW5nU0MtUmVndWxhciwgUGluZ0ZhbmcgU0M7DQogICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingsgfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/pages/logistics-data/views/BaseData","sourcesContent":["<template>\r\n  <!-- 角色管理 -->\r\n  <div class=\"app-container\">\r\n    <b-table\r\n      class=\"b-table\"\r\n      ref=\"bTable\"\r\n      loading\r\n      :headers=\"columns\"\r\n      :form-items=\"formItems\"\r\n      :ajax-get-data=\"ajaxGetRoleData\"\r\n      :toolbars=\"toolbars\"\r\n    ></b-table>\r\n    <!-- 新增编辑弹窗 -->\r\n    <el-dialog\r\n      :title=\"dialog.isedit ? '编辑' : '新增'\"\r\n      width=\"540px\"\r\n      center\r\n      class=\"dialog\"\r\n      :visible.sync=\"dialog.visible\"\r\n    >\r\n      <el-form\r\n        ref=\"elForm\"\r\n        label-width=\"110px\"\r\n        :model=\"ruleForm\"\r\n        :rules=\"rules\"\r\n      >\r\n        <el-form-item label=\"基础数据名称\" prop=\"name\">\r\n          <el-input type=\"input\" v-model.trim=\"ruleForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"编号\" prop=\"number\">\r\n          <el-input type=\"input\" v-model.trim=\"ruleForm.number\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"所属分类\" prop=\"category\">\r\n          <el-select v-model=\"ruleForm.category\" style=\"width:100%\" multiple>\r\n            <el-option\r\n              v-for=\"(item, index) in categorys\"\r\n              :key=\"index\"\r\n              :value=\"item.value\"\r\n              :label=\"item.label\"\r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"所属单位\" prop=\"units\" v-if=\"!dialog.isedit\">\r\n          <DfCascader\r\n            :config=\"{ attrs }\"\r\n            v-model=\"ruleForm.units\"\r\n            @input=\"\r\n              v => {\r\n                $refs.elForm.validateField('units');\r\n              }\r\n            \"\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button\r\n          size=\"small\"\r\n          type=\"primary\"\r\n          @click=\"sureDialog\"\r\n          :loading=\"confirmLoading\"\r\n          >确认</el-button\r\n        >\r\n        <el-button size=\"small\" @click=\"dialog.visible = false\">取消</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Select,\r\n  Option,\r\n  Input,\r\n  Form,\r\n  FormItem\r\n} from 'element-ui';\r\nimport BTable from '@/components/business/BTable';\r\nimport axios from '@/plugins/axios';\r\nimport DfCascader from '@/components/common/CDynamicForm/components/DfCascader';\r\nimport Utils from '@/components/common/CDynamicForm/components/utils';\r\nfunction mergeDefault() {\r\n  var f = {},\r\n    m = arguments.length,\r\n    o = arguments[m - 1],\r\n    b = 0,\r\n    k,\r\n    h,\r\n    d,\r\n    g;\r\n  if (typeof o == 'boolean') {\r\n    b++;\r\n    h = o;\r\n  }\r\n  if (Object.prototype.toString.call(arguments[0]) === '[object Array]') {\r\n    d = true;\r\n    g = arguments[0];\r\n    k = arguments[1];\r\n  } else {\r\n    k = arguments[0] || {};\r\n  }\r\n  for (var c = 0; c < m - b; c++) {\r\n    var a = arguments[c];\r\n    for (var e in d ? g : k) {\r\n      var n = d ? g[e] : e;\r\n      if (a && a[n] !== undefined) {\r\n        h ? (f[n] = a[n]) : (k[n] = a[n]);\r\n      } else {\r\n        h && c == 0 && (f[n] = k[n]);\r\n      }\r\n    }\r\n  }\r\n  return h ? f : k;\r\n}\r\nexport default {\r\n  name: 'BaseData',\r\n  // 注册组件\r\n  components: {\r\n    [Dialog.name]: Dialog,\r\n    [Button.name]: Button,\r\n    [Select.name]: Select,\r\n    [Option.name]: Option,\r\n    [Input.name]: Input,\r\n    [Form.name]: Form,\r\n    [FormItem.name]: FormItem,\r\n    BTable,\r\n    DfCascader\r\n  },\r\n  props: {\r\n    /**\r\n     * 服务器类型\r\n     */\r\n    serverType: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  // 定义数据\r\n  data() {\r\n    // 权限校验方法\r\n    let $has = this.$has;\r\n    typeof $has !== 'function' && ($has = () => true);\r\n    return {\r\n      confirmLoading: false, // 提交中\r\n      $has,\r\n      dialog: {\r\n        visible: false,\r\n        isedit: false\r\n      },\r\n      ruleForm: {\r\n        name: '',\r\n        number: '',\r\n        category: '',\r\n        units: '',\r\n        unitsName: ''\r\n      },\r\n      rules: {\r\n        name: [\r\n          { required: true, trigger: 'blur', message: '基础数据名称未填写' },\r\n          { max: 20, trigger: '', message: '最大长度20个字符' }\r\n        ],\r\n        number: [\r\n          { required: true, trigger: 'blur', message: '编号未填写' },\r\n          { max: 40, trigger: '', message: '最大长度40个字符' }\r\n        ],\r\n        category: [\r\n          { required: true, trigger: 'change', message: '所属分类未填写' }\r\n        ],\r\n        units: [\r\n          {\r\n            required: true,\r\n            trigger: 'change',\r\n            message: '所属单位未填写',\r\n            type: 'array'\r\n          }\r\n        ]\r\n      },\r\n      tree: [], //单位树\r\n      categorys: [] //所属分类tree\r\n    };\r\n  },\r\n  // 计算属性\r\n  computed: {\r\n    attrs() {\r\n      return {\r\n        cascader: true,\r\n        tree: this.tree\r\n        // getData:() => {\r\n        //   return this.getTreeData();\r\n        // }\r\n      };\r\n    },\r\n    /**\r\n     * 表单列\r\n     */\r\n    columns() {\r\n      let btns = [\r\n        {\r\n          label: '编辑',\r\n          click: this.editTableRole,\r\n          auth: ['baseData-edit'],\r\n          size: 'mini',\r\n          type: 'primary'\r\n        },\r\n        {\r\n          label: '删除',\r\n          click: row => this.del(row.id),\r\n          auth: ['baseData-delete'],\r\n          size: 'mini',\r\n          type: 'primary'\r\n        }\r\n      ];\r\n      return [\r\n        {\r\n          label: '基础数据',\r\n          prop: 'name'\r\n        },\r\n        {\r\n          label: '所属分类',\r\n          prop: 'categoryNames',\r\n          'show-overflow-tooltip': true\r\n        },\r\n        {\r\n          label: '所属单位',\r\n          prop: 'deptName',\r\n          'show-overflow-tooltip': true\r\n        },\r\n        // {\r\n        //   label: '角色状态',\r\n        //   prop: 'isShow',\r\n        //   formatter(row, column, cellValue) {\r\n        //     return cellValue == '0' ? '启用' : '禁用';\r\n        //   }\r\n        // },\r\n        {\r\n          label: '操作',\r\n          colType: 'btns',\r\n          btns: btns.filter(item => this.$has(item.auth)),\r\n          width: '152px'\r\n        }\r\n      ];\r\n    },\r\n    /**\r\n     * 表单项\r\n     */\r\n    formItems() {\r\n      console.log(this.categorys);\r\n      return [\r\n        {\r\n          type: 'input',\r\n          prop: 'name',\r\n          label: '基础数据：'\r\n        },\r\n        {\r\n          type: 'select',\r\n          prop: 'categoryIds',\r\n          label: '所属分类：',\r\n          options: this.categorys,\r\n          attrs: {\r\n            multiple: true\r\n          }\r\n        },\r\n        {\r\n          prop: 'deptId',\r\n          label: '所属单位：',\r\n          type: 'cascader',\r\n          initCount: 'initCount',\r\n          attrs: this.attrs\r\n        }\r\n      ];\r\n    },\r\n    /**\r\n     * 工具栏\r\n     */\r\n    toolbars() {\r\n      let toolbars = [\r\n        {\r\n          label: '新增',\r\n          click: this.addtableRole,\r\n          auth: ['baseData-add']\r\n        }\r\n      ];\r\n      return toolbars.filter(item => this.$has(item.auth));\r\n    }\r\n  },\r\n  // 侦听器\r\n  watch: {\r\n    'ruleForm.units'() {\r\n      console.log(this.ruleForm.units);\r\n    }\r\n  },\r\n  // 创建完成钩子\r\n  created() {\r\n    this.getTreeData();\r\n    axios(\r\n      {\r\n        //获取所属分类\r\n        //method: 'POST',\r\n        //url: '/dictionary/selectDictionary',\r\n        url: '/dictionary/selectDictionaryByKey/WJFL'\r\n      },\r\n      this.serverType\r\n    ).then(res => {\r\n      this.categorys = Utils.treeDataChangeField(res.data || [], {\r\n        data: {\r\n          dictionaryText: 'label',\r\n          dictionaryKey: 'value'\r\n        }\r\n      });\r\n    });\r\n  },\r\n  // 挂在完成钩子\r\n  mounted() {},\r\n  // 方法定义\r\n  methods: {\r\n    formDataHandler(formData) {\r\n      return {\r\n        ...formData,\r\n        //所属分类\r\n        categoryIds: Array.isArray(formData.categoryIds)\r\n          ? formData.categoryIds.join(',')\r\n          : formData.categoryIds,\r\n        //所属单位\r\n        deptId: formData.deptId\r\n          ? formData.deptId[formData.deptId.length - 1]\r\n          : ''\r\n      };\r\n    },\r\n    getTreeData() {\r\n      return axios(\r\n        {\r\n          url: '/department/tree4School'\r\n        },\r\n        this.serverType\r\n      ).then(res => {\r\n        this.tree = Utils.deleteEmpty(res.data || []);\r\n        return this.tree;\r\n      });\r\n    },\r\n    ajaxGetRoleData(params) {\r\n      params = this.formDataHandler(params);\r\n      return axios(\r\n        {\r\n          method: 'GET',\r\n          url: '/baseData',\r\n          params\r\n        },\r\n        this.serverType\r\n      );\r\n    },\r\n    menuPermission(id) {\r\n      //菜单授权\r\n      this.$router.push({\r\n        path: '/system/role/menu-auth',\r\n        query: {\r\n          id: id\r\n        }\r\n      });\r\n    },\r\n    del(id) {\r\n      //删除\r\n      this.$confirm('删除后不可恢复，确定删除？', '删除确认', {\r\n        customClass: 'box-danger',\r\n        center: true\r\n      })\r\n        .then(() => {\r\n          axios(\r\n            {\r\n              method: 'POST',\r\n              url: `/baseData/delete/${id}`\r\n            },\r\n            this.serverType\r\n          )\r\n            .then(({ data }) => {\r\n              this.$message({\r\n                type: 'success',\r\n                message: '删除成功!'\r\n              });\r\n              this.$refs.bTable.ajaxGetTableDataByPage();\r\n            })\r\n            .catch(() => {});\r\n        })\r\n        .catch(() => {\r\n          this.$message({\r\n            type: 'info',\r\n            message: '已取消删除'\r\n          });\r\n        });\r\n    },\r\n    allotUser(id) {\r\n      this.$router.push({\r\n        path: '/system/role/allot-user',\r\n        query: {\r\n          roleId: id\r\n        }\r\n      });\r\n    },\r\n    addtableRole() {\r\n      console.log(this);\r\n\r\n      this.dialog.visible = true;\r\n      this.dialog.isedit = false;\r\n      this.ruleForm = this.$options.data().ruleForm;\r\n      this.clearDialogForm();\r\n    },\r\n    editTableRole(row) {\r\n      this.dialog.visible = true;\r\n      this.dialog.isedit = true;\r\n      mergeDefault(this.ruleForm, row);\r\n      this.ruleForm.id = row.id;\r\n      this.ruleForm.number = row.code;\r\n      this.ruleForm.category = row.categoryIds.split(','); //所属分类\r\n      // this.ruleForm.units = this.tree.filter(v => {\r\n      //   //所属单位\r\n      //   return v;\r\n      // });\r\n      console.log(this.ruleForm, row);\r\n      this.clearDialogForm();\r\n    },\r\n    clearDialogForm() {\r\n      this.$nextTick(() => {\r\n        this.$refs['elForm'].clearValidate();\r\n      });\r\n    },\r\n    async sureDialog() {\r\n      //新增编辑弹窗\r\n      if (!this.dialog.isedit) {\r\n        this.ruleForm.isShow = '0';\r\n      }\r\n      try {\r\n        await this.$refs.elForm.validate();\r\n\r\n        this.confirmLoading = true;\r\n        console.log(this.ruleForm);\r\n        var sendData = {\r\n          name: this.ruleForm.name,\r\n          code: this.ruleForm.number,\r\n          categoryIds: this.ruleForm.category.join(',') //所属分类\r\n        };\r\n        if (this.dialog.isedit) {\r\n          sendData.id = this.ruleForm.id;\r\n          axios(\r\n            {\r\n              method: 'POST',\r\n              url: `/baseData/${sendData.id}`,\r\n              data: sendData\r\n            },\r\n            this.serverType\r\n          )\r\n            .then(({ data }) => {\r\n              this.dialog.visible = false;\r\n              this.confirmLoading = false;\r\n              this.$message({\r\n                type: 'success',\r\n                message: '编辑成功!'\r\n              });\r\n              this.$refs.bTable.ajaxGetTableDataByPage();\r\n            })\r\n            .catch(() => {\r\n              this.confirmLoading = false;\r\n            });\r\n        } else {\r\n          sendData.deptId = this.ruleForm.units[this.ruleForm.units.length - 1]; //所属单位\r\n          axios(\r\n            {\r\n              method: 'POST',\r\n              url: '/baseData',\r\n              data: sendData\r\n            },\r\n            this.serverType\r\n          )\r\n            .then(({ data }) => {\r\n              this.dialog.visible = false;\r\n              this.confirmLoading = false;\r\n              this.$message({\r\n                type: 'success',\r\n                message: '新增成功!'\r\n              });\r\n              this.$refs.bTable.ajaxGetTableDataByPage();\r\n            })\r\n            .catch(() => {\r\n              this.confirmLoading = false;\r\n            });\r\n        }\r\n      } catch (e) {\r\n        // 表单校验失败\r\n        console.error('表单校验失败', e);\r\n        this.confirmLoading = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.b-table /deep/ .dynamic-form input {\r\n  width: 200px;\r\n}\r\n.role {\r\n  background: #fff;\r\n  padding: 0 25px 0;\r\n  &-main {\r\n    padding-top: 23px;\r\n  }\r\n  .dialog {\r\n    &-content {\r\n      &-item {\r\n        margin-bottom: 29px;\r\n        margin-left: 8px;\r\n        &-label {\r\n          float: left;\r\n          min-width: 90px;\r\n        }\r\n        &-red {\r\n          color: #f5222d;\r\n        }\r\n        &-text {\r\n          text-align: left;\r\n        }\r\n      }\r\n      &-btns {\r\n        text-align: center;\r\n        padding-bottom: 27px;\r\n        button {\r\n          margin: 0 20px;\r\n          width: 86px;\r\n          height: 36px;\r\n          font-size: 14px;\r\n          // font-family: PingFangSC-Regular, PingFang SC;\r\n          font-weight: 400;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}