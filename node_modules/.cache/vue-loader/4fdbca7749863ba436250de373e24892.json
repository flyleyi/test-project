{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/charity-foundation/views/components/permissionEdit/index.vue?vue&type=style&index=0&id=40afea9e&lang=less&scoped=true&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/charity-foundation/views/components/permissionEdit/index.vue","mtime":1627979214289},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouaW1wb3J0LWRhdGEtY29udGVudCB7CiAgaDMgewogICAgZm9udC1zaXplOiAxNnB4OwogICAgY29sb3I6ICMzMDMxMzM7CiAgfQogIHAgewogICAgZm9udC1zaXplOiAxNHB4OwogICAgbWFyZ2luOiAxNXB4IDA7CiAgfQp9Ci9kZWVwLy5lbC1pbnB1dCB7CiAgd2lkdGg6IDIxN3B4Owp9Ci9kZWVwLy5lbC1jaGVja2JveC1ncm91cCB7CiAgbWFyZ2luLWxlZnQ6IDIwcHg7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/pages/charity-foundation/views/components/permissionEdit","sourcesContent":["<template>\n  <el-dialog\n    :visible.sync=\"visible\"\n    :v-if=\"visible\"\n    :title=\"title || ''\"\n    center\n    :close-on-click-modal=\"false\"\n    :close-on-press-escape=\"false\"\n    v-on=\"$listeners\"\n    @closed=\"onClosed\"\n    width=\"50%\"\n    v-loading=\"loading\"\n  >\n    <el-form\n      :model=\"ruleForm\"\n      :rules=\"rules\"\n      ref=\"ruleForm\"\n      label-width=\"100px\"\n      class=\"demo-ruleForm\"\n    >\n      <el-form-item label=\"输入账号\" prop=\"username\">\n        <el-input\n          v-model=\"ruleForm.username\"\n          :disabled=\"this.editItem ? this.editItem.isedit : false\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"选择类型\" prop=\"region\">\n        <el-select\n          v-model=\"ruleForm.region\"\n          placeholder=\"选择类型\"\n          @change=\"changeRegion\"\n        >\n          <el-option\n            v-for=\"(item, index) in roleList\"\n            :key=\"index\"\n            :label=\"item.roleName\"\n            :value=\"item.roleId\"\n          ></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"添加权限\">\n        <div>\n          <el-checkbox\n            :indeterminate=\"checkAllDeterminate\"\n            v-model=\"checkAll\"\n            @change=\"checkAllBox\"\n            >全选</el-checkbox\n          >\n        </div>\n        <div v-for=\"(item, index) in permissionList\" :key=\"item.name\">\n          <el-checkbox\n            :indeterminate=\"isIndeterminate[index]\"\n            v-model=\"checkTypeAll[index]\"\n            @change=\"handleCheckAllChange($event, item, index)\"\n            >{{ item.name }}</el-checkbox\n          >\n          <!-- <div style=\"margin: 15px 0;\"></div> -->\n          <el-checkbox-group\n            v-model=\"selectArr[index]\"\n            @change=\"handleCheckedCitiesChange($event, [index, item])\"\n          >\n            <el-checkbox\n              v-for=\"(ite, inde) in item.children\"\n              :key=\"ite.name\"\n              :label=\"ite\"\n              :checked=\"false\"\n              :ref=\"'reference' + inde + ite.id\"\n            >\n              {{ ite.name }}\n            </el-checkbox>\n          </el-checkbox-group>\n        </div>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"submitForm('ruleForm')\"\n          >确定</el-button\n        >\n        <el-button @click=\"closed\">取消</el-button>\n      </el-form-item>\n    </el-form>\n  </el-dialog>\n</template>\n\n<script>\nimport {\n  Radio,\n  Button,\n  Dialog,\n  FormItem,\n  Input,\n  Form,\n  Checkbox,\n  CheckboxGroup,\n  Option,\n  Select\n} from 'element-ui';\nimport {\n  getMenuList,\n  getProjectList,\n  getRoleList\n} from '../../../api/auth/index';\nimport { updateUser, addUser } from '../../../api/user/index';\nimport router, { generateRoutes } from '../../../router';\nimport { getUserId } from '@/plugins/core/auth';\nexport default {\n  name: 'BImportDataPanel',\n  components: {\n    [Button.name]: Button,\n    [Dialog.name]: Dialog,\n    [Input.name]: Input,\n    [Radio.name]: Radio,\n    [FormItem.name]: FormItem,\n    [Form.name]: Form,\n    [Checkbox.name]: Checkbox,\n    [CheckboxGroup.name]: CheckboxGroup,\n    [Option.name]: Option,\n    [Select.name]: Select\n  },\n  props: {\n    /**\n     * 成功回调\n     */\n    onSuccess: {\n      type: Function\n    }\n  },\n  data() {\n    let validateInput = (rule, value, callback) => {\n      if (!this.checkSpecialKey(value)) {\n        callback(new Error('不能含有特殊字符！！'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      loading: false,\n      visible: false, // 是否显示模态框\n      title: '',\n      DialogData: null,\n      editItem: null,\n      ruleForm: {\n        username: '',\n        region: ''\n      },\n      roleList: [], // 类型\n      checkAll: false,\n      checkTypeAll: [], // 类型全选状态\n      permissionList: [], // 菜单列表和工程列表数据\n      projectList: [], //项目类型列表\n      isIndeterminate: [], // 二级选中样式\n      selectArr: [], // 选中的子节点\n      checkAllDeterminate: false, // 一级全选\n      rules: {\n        username: [\n          { required: true, message: '请输入账号', trigger: 'blur' },\n          { required: true, message: '请输入账号', trigger: 'change' },\n          // { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'change' }\n          { validator: validateInput, trigger: 'change' },\n          { validator: validateInput, trigger: 'blur' }\n        ],\n        region: [{ required: true, message: '请选择类型', trigger: 'change' }],\n        checkTypeAll: [\n          { required: true, message: '请选择类型', trigger: 'change' }\n        ]\n      },\n      endDevData: [] // 默认选中的值\n    };\n  },\n  watch: {},\n  methods: {\n    // 正则验证\n    checkSpecialKey(str) {\n      let specialKey =\n        '\"\"[~!#$%^&*()=|{}\\':;\\'\\\\[\\\\]<>/?~！#￥……&*（）——|{}【】‘；：”“\\'。，、？]‘\\'\"\"';\n      for (let i = 0; i < str.length; i++) {\n        if (specialKey.indexOf(str.substr(i, 1)) != -1) {\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * 显示模态框动画结束\n     *  @param {Object}} editItem 修改项\n     */\n    show(editItem) {\n      this.endDevData = [];\n      this.selectArr = [];\n      this.isIndeterminate = [];\n      this.checkAll = false;\n      this.checkTypeAll = []; // 类型全选状态\n      this.checkAllDeterminate = false; // 一级全选\n      this.editItem = JSON.parse(JSON.stringify(editItem));\n      this.title = this.editItem.isedit ? '编辑' : '新增';\n      this.$nextTick(() => {\n        this.$refs.ruleForm.clearValidate();\n      });\n      if (this.editItem.isedit) {\n        this.ruleForm.username = this.editItem.username\n          ? this.editItem.username\n          : '';\n        this.endDevData = this.editItem.menuIds\n          ? this.editItem.menuIds.concat(',', this.editItem.projectIds)\n          : '';\n      } else {\n        this.ruleForm.username = '';\n      }\n      this.visible = true;\n      this.initData();\n      this.getRoleList();\n      this.ruleForm.region = this.editItem.roleId || '';\n    },\n    /**\n     * 获取菜单列表和工程列表\n     */\n    initData() {\n      this.loading = true;\n      this.permissionList = [];\n      Promise.all([getMenuList(), getProjectList()])\n        .then(res => {\n          let projectList = {\n            name: '项目类型',\n            type: 'projectList',\n            children: res[1].data\n          };\n          if (projectList && Array.isArray(projectList.children)) {\n            projectList.children.forEach(item => {\n              item.name = item.label;\n              item.menuId = item.id;\n            });\n          }\n          this.permissionList = [projectList, ...res[0].data];\n          console.log(this.permissionList);\n          this.getData();\n          this.loading = false;\n        })\n        .catch(() => {\n          this.loading = false;\n        });\n    },\n    // 获取类型数据\n    getRoleList() {\n      this.loading = true;\n      this.roleList = [];\n      getRoleList()\n        .then(res => {\n          this.loading = false;\n          this.roleList = res.data;\n        })\n        .catch(() => {\n          this.loading = false;\n        });\n    },\n    /**\n     * 关闭模态框动画结束\n     */\n    onClosed() {\n      this.$emit('close');\n    },\n    closed() {\n      this.resetForm();\n      this.visible = false;\n    },\n    // 权限格式化数据\n    getData() {\n      let childrenItem = [];\n      this.permissionList.map((item, index) => {\n        this.checkTypeAll.push(false);\n        this.isIndeterminate.push(false);\n        this.selectArr = new Array(this.permissionList.length).fill([]);\n        childrenItem.push(item.children);\n      });\n      childrenItem.map((ite, index) => {\n        // 设置默认选中的值\n        this.selectArr[index] = [];\n        ite.map(it => {\n          if (\n            this.endDevData &&\n            this.endDevData.includes(it.menuId ? it.menuId : it.id)\n          ) {\n            this.selectArr[index].push(it);\n            this.handleCheckedCitiesChange(this.selectArr[index], [\n              index,\n              this.permissionList[index]\n            ]);\n          }\n        });\n      });\n    },\n    // 一级全选\n    checkAllBox(val) {\n      if (val) {\n        this.permissionList.map((item, index) => {\n          this.checkTypeAll[index] = true;\n          this.selectArr[index] = item.children.map(ite => ite);\n          this.isIndeterminate[index] = false;\n          this.checkAllDeterminate = false;\n        });\n      } else {\n        this.permissionList.map((item, index) => {\n          this.checkTypeAll[index] = false;\n          this.selectArr[index] = [];\n        });\n      }\n      this.flushArray();\n    },\n    // 二级全选\n    handleCheckAllChange(value, item, index) {\n      this.selectArr[index] = value ? item.children.map(it => it) : [];\n      this.isIndeterminate[index] = false;\n      let permissionListLength = 0;\n      this.permissionList.map(item => {\n        permissionListLength += item.children.length;\n      });\n      this.checkAllDeterminate =\n        this.selectArr.flat(Infinity).length > 0 &&\n        this.selectArr.flat(Infinity).length !== permissionListLength;\n      this.checkAll =\n        this.selectArr.flat(Infinity).length === permissionListLength;\n      this.flushArray();\n    },\n    // 子节点change事件\n    handleCheckedCitiesChange(val, [index, item]) {\n      this.checkTypeAll[index] = val.length === item.children.length;\n      this.isIndeterminate[index] =\n        val.length > 0 && val.length < item.children.length;\n      this.checkAllDeterminate =\n        this.selectArr.flat(Infinity).length > 0 &&\n        !this.checkTypeAll.every(item => item); // 判断子项选中的条数\n      this.checkAll = this.checkTypeAll.every(item => item);\n      this.flushArray();\n    },\n    flushArray() {\n      this.isIndeterminate = this.isIndeterminate.slice(0);\n      this.checkTypeAll = this.checkTypeAll.slice(0);\n      this.selectArr = this.selectArr.slice(0);\n    },\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          let projectIds = '';\n          let menuList = [];\n          this.selectArr.forEach((item, index) => {\n            if (index === 0) {\n              // 列表第一项为项目类型\n              item.forEach(projectId => {\n                projectIds += projectId.id ? `${projectId.id},` : '';\n              });\n            } else {\n              item.forEach(menuIds => {\n                // 第二项及后面为页面权限\n                menuList.includes(menuIds.parentId)\n                  ? null\n                  : menuList.push(menuIds.parentId);\n                menuList.push(menuIds.menuId);\n              });\n            }\n          });\n          if (!projectIds) {\n            this.$message.error('请选择项目类型');\n            return false;\n          }\n          if (this.editItem.isedit) {\n            let params = {\n              userId: this.editItem.userId,\n              username: this.editItem.username || this.ruleForm.username,\n              roleId: this.ruleForm.region,\n              projectIds: projectIds.substring(0, projectIds.length - 1),\n              menuList: menuList\n            };\n            this.loading = true;\n            updateUser(params)\n              .then(res => {\n                this.loading = false;\n                if (Number(this.editItem.userId) === Number(getUserId())) {\n                  // debugger;\n                  let { menuList } = this.$store.dispatch('auth/getAuthData'); // 获取权限数据\n                  const accessRoutes = generateRoutes(menuList); // 生成允许访问的路由\n                  router.addRoutes(accessRoutes);\n                }\n                this.closed();\n              })\n              .catch(() => {\n                this.loading = false;\n              });\n          } else {\n            let params = {\n              username: this.editItem.username || this.ruleForm.username,\n              roleId: this.ruleForm.region,\n              projectIds: projectIds.substring(0, projectIds.length - 1),\n              menuList: menuList\n            };\n            this.loading = true;\n            addUser(params)\n              .then(res => {\n                this.loading = false;\n                this.closed();\n              })\n              .catch(() => {\n                this.loading = false;\n              });\n          }\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    // 修改类型 清空权限选择\n    changeRegion() {\n      this.permissionList.map((item, index) => {\n        this.checkTypeAll[index] = false;\n        this.selectArr[index] = [];\n      });\n      this.isIndeterminate = [];\n      this.checkAll = false;\n      this.checkAllDeterminate = false; // 一级全选\n    },\n    resetForm() {\n      this.$nextTick(() => {\n        this.$refs.ruleForm.resetFields();\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.import-data-content {\n  h3 {\n    font-size: 16px;\n    color: #303133;\n  }\n  p {\n    font-size: 14px;\n    margin: 15px 0;\n  }\n}\n/deep/.el-input {\n  width: 217px;\n}\n/deep/.el-checkbox-group {\n  margin-left: 20px;\n}\n</style>\n"]}]}