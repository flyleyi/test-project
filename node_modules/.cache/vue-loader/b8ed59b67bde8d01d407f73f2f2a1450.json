{"remainingRequest":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/catering/views/order/PreviewOrder/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/catering/views/order/PreviewOrder/index.vue","mtime":1645178321130},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7CiAgYmFzZVRyZWVXaXRoUG93ZXJTY2hvb2wsCiAgb3JkZXJTdGF0aXN0aWNzLAogIGdldE9yZGVyRGV0YWlsLAogIGNvbW1vbk9yZGVyQ29udGVudEZvclBhZ2UsCiAgZ2V0UmVjb3JkLAogIG9yZGVyQ29udGVudEZvclNlbGVjdCwKICBkZWxldGVPcmRlciwKICBkZWxldGVPcmRlckNvbnRlbnQsCiAgc2F2ZU9yZGVyQW5kQ29udGVudCwKICBhcHByb3ZlT3JkZXIsCiAgb3JkZXJDb250ZW50Rm9yUGFnZSwKICBzYXZlT3JkZXJCYXNlLAogIHB1cmNoYXNlRGV0YWlsRXhwb3J0LAogIHB1cmNoYXNlT3JkZXJFeGNlbCwKICBwdXJjaGFzZU9yZGVyRGV0YWlsRXhjZWwsCiAgcHVyY2hhc2VQcmV2aWV3RXhjZWwsCiAgZ2V0T3JkZXJDb250ZW50QXJyaXZhbERhdGVMaXN0LAogIGdldE9yZGVyRGV0YWlsSW5mbywKICBnZXRPcmRlcklzV2l0aGRyYXduCn0gZnJvbSAnLi4vLi4vLi4vYXBpL29yZGVyL2luZGV4JzsKaW1wb3J0IHsgY29va2luZ1N0eWxlTGlzdCB9IGZyb20gJy4uLy4uLy4uL2FwaS9jcm93ZC9pbmRleCc7CgppbXBvcnQgQlRhYmxlIGZyb20gJ0AvY29tcG9uZW50cy9idXNpbmVzcy9CVGFibGUnOwppbXBvcnQgQ1RhYmxlIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb24vQ1RhYmxlJzsKaW1wb3J0IGJhY2tNb2RpZnkgZnJvbSAnLi9jb21wb25lbnRzL0JhY2tNb2RpZnkudnVlJzsKaW1wb3J0IGNoYXJnZUJhY2sgZnJvbSAnLi9jb21wb25lbnRzL0NoYXJnZUJhY2sudnVlJzsKaW1wb3J0IHJlY2VpdmVHb29kcyBmcm9tICcuL2NvbXBvbmVudHMvUmVjZWl2ZUdvb2RzLnZ1ZSc7CmltcG9ydCBiYXRjaFJlY2VpdmVHb29kcyBmcm9tICcuL2NvbXBvbmVudHMvQmF0Y2hSZWNlaXZlR29vZHMudnVlJzsKaW1wb3J0IE51dHJpcmlvbkFuYWx5c2lzIGZyb20gJy4vY29tcG9uZW50cy9OdXRyaXJpb25BbmFseXNpcy52dWUnOwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAndnVleCc7Ci8v54q25oCB5pi+56S65paH5qGICmNvbnN0IHN0YXR1c09iaiA9IHsKICAnMTAxMDAnOiAn6I2J56i/JywKICAnMjAxMDAnOiAn5b6F5a6h5om5JywKICAnMzAxMDAnOiAn5bey5a6h5om55pyq5pS26LSnJywKICAnMzAyMDAnOiAn6YCA5Y2V55Sz6K+35LitJywgLy/kvpvlupTllYbmnKrlj5HotKcKICAnNDAxMDAnOiAn5bey5a6h5om55pyq5pS26LSnJywKICAnNDAyMDAnOiAn6YCA5Y2V55Sz6K+35LitJywgLy/kvpvlupTllYblt7Llj5HotKcKICAnNDAxMTAnOiAn5bey5pS26LSnJywKICAnLTEwMjAwJzogJ+WuoeaJueacqumAmui/hycsCiAgJy0yMDEwMCc6ICflt7LpgIDljZUnCn07Ci8v5pON5L2c5oyJ6ZKu5paH5qGICmNvbnN0IG9wZXJhQ29kZSA9IHsKICAnLTEnOiAn5pKk5ZueJywKICAnLTEwMjAwJzogJ+aJk+WbnuS/ruaUuScsCiAgJzIwMTAwJzogJ+aPkOS6pOWuoeaJuScsCiAgJzMwMTAwJzogJ+WPlua2iOmAgOWNlScsCiAgJzQwMTAwJzogJ+WPlua2iOmAgOWNlScsCiAgJzMwMjAwJzogJ+mAgOWNlScsIC8vIOW3suWuoeaJueacquWPkei0pwogICc0MDIwMCc6ICfpgIDljZUnLCAvL+S+m+W6lOWVhuW3suWPkei0pwogICc0MDExMCc6ICfmlLbotKcnCn07Ci8v5Y6G5Y+y6K6w5b2V5pi+56S65Yqo5L2c5paH5qGICmNvbnN0IGhpc3RvcnlDb2RlID0gewogICctMSc6ICfmkqTlm54nLAogICcyMDEwMCc6ICfmj5DkuqTlrqHmibknLAogICczMDEwMCc6ICflrqHmibnpgJrov4cnLAogICczMDIwMCc6ICfpgIDlm54nLAogICc0MDEwMCc6ICflt7Llj5HotKcnLAogICc0MDIwMCc6ICfpgIDlm54nLAogICc0MDExMCc6ICflt7LmlLbotKcnLAogICctMjAxMDAnOiAn5bey6YCA5Y2VJywKICAnLTEwMjAwJzogJwnlrqHmibnkuI3pgJrov4cnCn07Cgpjb25zdCB0YWJzID0gWwogIHsKICAgIGxhYmVsOiAn6YeH6LSt5rGH5oC7JywKICAgIG5hbWU6ICdzdW1tYXJ5JwogIH0sCiAgLy8gewogIC8vICAgbGFiZWw6ICfoj5zosLHph4fotK0nLAogIC8vICAgbmFtZTogJ21lbnUnCiAgLy8gfSwKICB7CiAgICBsYWJlbDogJ+iPnOWTgemHh+i0rScsCiAgICBuYW1lOiAnZGlzaCcKICB9LAogIHsKICAgIGxhYmVsOiAn6aOf5p2Q6YeH6LStJywKICAgIG5hbWU6ICdpbmdyZWRpZW50cycKICB9Cl07CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnUHJldmlld09yZGVyJywKICBjb21wb25lbnRzOiB7CiAgICBCVGFibGUsCiAgICBDVGFibGUsCiAgICBiYWNrTW9kaWZ5LAogICAgY2hhcmdlQmFjaywKICAgIHJlY2VpdmVHb29kcywKICAgIGJhdGNoUmVjZWl2ZUdvb2RzLAogICAgTnV0cmlyaW9uQW5hbHlzaXMKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzdGF0aXN0aWNzSW5mbzogewogICAgICAgIGNvbnRlbnROdW06IDAsIC8v6K6i5Y2V5YaF5a655pWw6YePCiAgICAgICAgY2xlYW5WZWdldGFibGVXZWlnaHQ6IDAsIC8v5YeA6I+c6YeN6YePCiAgICAgICAgb3JpZ2luYWxWZWdldGFibGVXZWlnaHQ6IDAsIC8v5q+b6I+c5pWw6YePCiAgICAgICAgY29zdFByaWNlOiAwLCAvL+aIkOacrOS7twogICAgICAgIHNlbGxpbmdQcmljZTogMCAvL+WUruS7twogICAgICB9LAogICAgICBvcmRlckZvcm1JbmZvOiB7fSwgLy/orqLljZXor6bmg4UKICAgICAgc3RhdHVzT2JqOiBzdGF0dXNPYmosCiAgICAgIG9wZXJhQ29kZTogb3BlcmFDb2RlLAogICAgICBoaXN0b3J5Q29kZTogaGlzdG9yeUNvZGUsCiAgICAgIGFjdGl2ZU5hbWU6IHRhYnNbMF0ubmFtZSwKICAgICAgdGFiczogdGFicywKICAgICAgb3JkZXJJZDogbnVsbCwKICAgICAgb3JkZXJGbGFnOiBudWxsLAogICAgICBvcmRlclJlbWFyazogJycsCiAgICAgIG9wZXJhVHlwZTogJ3ByZXZpZXcnLAogICAgICBxdWVyeU9iamVjdDogewogICAgICAgIGluZ3JlZGllbnRzOiAxLAogICAgICAgIGRpc2g6IDIsCiAgICAgICAgbWVudTogMywKICAgICAgICBzdW1tYXJ5OiA5CiAgICAgIH0sCiAgICAgIG1lYWxUeXBlTGlzdDogWwogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn5pep6aSQJywKICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+WNiOmkkCcsCiAgICAgICAgICB2YWx1ZTogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbGFiZWw6ICfmmZrppJAnLAogICAgICAgICAgdmFsdWU6IDMKICAgICAgICB9CiAgICAgIF0sCiAgICAgIGhpc3RvcnlUYWJsZURhdGE6IFtdLAogICAgICBoaXN0b3J0eUhlYWRlcnM6IFsKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+aTjeS9nOS6uicsCiAgICAgICAgICBwcm9wOiAnb3BlcmFOYW1lJywKICAgICAgICAgIGNvbFR5cGU6ICdjb2x1bW4nCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+aTjeS9nOiusOW9lScsCiAgICAgICAgICBwcm9wOiAnb3BlcmFSZWNvcmQnLAogICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn5pON5L2c54q25oCBJywKICAgICAgICAgIHByb3A6ICdvcGVyYVN0YXR1cycsCiAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgICdzaG93LW92ZXJmbG93LXRvb2x0aXAnOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICBzdWJBY3RpdmVOYW1lOiAnc3VtJywKICAgICAgY3VycmVudFRhYnM6IFt7IGxhYmVsOiAnMjAyMS0wNy0wNScsIG5hbWU6ICcyMDIxLTA3LTA1JyB9XSwKICAgICAgbW9kaWZ5VmlzaWJsZTogZmFsc2UsCiAgICAgIGNoYXJnZVZpc2libGU6IGZhbHNlLAogICAgICByZWNlaXZlR29vZHNWaXNpYmxlOiBmYWxzZSwKICAgICAgYmF0Y2hSZWNlaXZlR29vZHNWaXNpYmxlOiBmYWxzZSwKICAgICAgcGFyYW1zOiB7fSwKICAgICAgcmVhc29uOiAnJywKICAgICAgb3JkZXJTdGF0dXNJbWc6ICcnLAogICAgICBpc1BhcmVudDogdHJ1ZSwKICAgICAgY2FuQ2hhZ2VCYWNrOiB0cnVlLAogICAgICBzdXBwbGllck5hbWU6ICcnLCAvLyDkvpvotKfllYYuCiAgICAgIGJhdGNoUmVjZWl2ZVJvd3M6IFtdIC8v5om56YeP5pS26LSnCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcEdldHRlcnMoWydyb2xlVHlwZSddKSwKICAgIGJ1eVN0YXRlTGlzdCgpIHsKICAgICAgbGV0IG9yaWdpbkxpc3QgPSB0aGlzLiRzdG9yZS5zdGF0ZS5kaWN0LkJVWUVSX09SREVSX0RFVEFJTF9TVEFUVVM7CiAgICAgIHJldHVybiBbCiAgICAgICAgewogICAgICAgICAgbGFiZWw6ICflhajpg6gnLAogICAgICAgICAgdmFsdWU6ICcnCiAgICAgICAgfSwKICAgICAgICAuLi5vcmlnaW5MaXN0CiAgICAgIF07CiAgICB9LAogICAgaGVhZGVycygpIHsKICAgICAgbGV0IGhlYWRlcnMgPSBbXTsKICAgICAgbGV0IHN1bW1hcnlIZWFkZXJzID0gWwogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn566A5ou8JywKICAgICAgICAgIHByb3A6ICdwaW55aW5IZWFkZXInLAogICAgICAgICAgJ3Nob3ctb3ZlcmZsb3ctdG9vbHRpcCc6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn6aOf5p2Q5ZCN56ewJywKICAgICAgICAgIHByb3A6ICdyZWxhdGlvbk5hbWUnLAogICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICBzbG90TmFtZTogJ25hbWVNZW50aW9uJywKICAgICAgICAgIG1pbldpZHRoOiAxMjAsCiAgICAgICAgICAnc2hvdy1vdmVyZmxvdy10b29sdGlwJzogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgLy8gewogICAgICAgIC8vICAgbGFiZWw6ICfliIfphY3moIflh4bvvIjplb8q5a69KumrmC9jbe+8iScsCiAgICAgICAgLy8gICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAvLyAgIHNsb3ROYW1lOiAnY3V0U3RhbmRhcmQnLAogICAgICAgIC8vICAgbWluV2lkdGg6IDEyMCwKICAgICAgICAvLyAgICdzaG93LW92ZXJmbG93LXRvb2x0aXAnOiB0cnVlCiAgICAgICAgLy8gfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+WHgOiPnOmHjemHj++8iGtn77yJJywKICAgICAgICAgIHByb3A6ICdjbGVhblZlZ2V0YWJsZVdlaWdodCcsCiAgICAgICAgICB3aWR0aDogMTIwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+avm+iPnOmHjemHj++8iGtn77yJJywKICAgICAgICAgIHByb3A6ICdvcmlnaW5hbFZlZ2V0YWJsZVdlaWdodCcsCiAgICAgICAgICB3aWR0aDogMTIwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+aVsOmHjycsCiAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgIHNsb3ROYW1lOiAncGFja051bScsCiAgICAgICAgICB3aWR0aDogMTIwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+aAu+mHjemHj++8iGtn77yJJywKICAgICAgICAgIHByb3A6ICdxdWFudGl0eScsCiAgICAgICAgICB3aWR0aDogMTIwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+aIkOacrOWPguiAg+S7t++8iOWFg++8iScsCiAgICAgICAgICBwcm9wOiAnY29zdFByaWNlJywKICAgICAgICAgIHdpZHRoOiAxNDAKICAgICAgICAgIC8vIGFsaWduOiAncmlnaHQnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+mjn+adkOexu+WeiycsCiAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgIHByb3A6ICdpbmdyZWRpZW50VHlwZScsCiAgICAgICAgICBzbG90TmFtZTogJ2luZ3JlZGllbnRUeXBlJwogICAgICAgIH0KICAgICAgXTsKICAgICAgbGV0IG1lbnVIZWFkZXJzID0gWwogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn566A5ou8JywKICAgICAgICAgIHByb3A6ICdwaW55aW5IZWFkZXInCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+iPnOiwseWQjeensCcsCiAgICAgICAgICBwcm9wOiAncmVsYXRpb25OYW1lJywKICAgICAgICAgIGNvbFR5cGU6ICdjb2x1bW4nLAogICAgICAgICAgc2xvdE5hbWU6ICduYW1lTWVudGlvbicKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn6YCC55So5Lq6576kJywKICAgICAgICAgIHByb3A6ICdjcm93ZE5hbWVzJwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbGFiZWw6ICfmiJDmnKzlj4LogIPku7fvvIjlhYPvvIknLAogICAgICAgICAgcHJvcDogJ2Nvc3RQcmljZScKICAgICAgICAgIC8vIHdpZHRoOiAxMjAsCiAgICAgICAgICAvLyBhbGlnbjogJ3JpZ2h0JwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbGFiZWw6ICfllK7ku7fvvIjlhYPvvIknLAogICAgICAgICAgcHJvcDogJ3NlbGxpbmdQcmljZScKICAgICAgICAgIC8vIHdpZHRoOiAxMjAsCiAgICAgICAgICAvLyBhbGlnbjogJ3JpZ2h0JwogICAgICAgIH0KICAgICAgXTsKICAgICAgbGV0IGRpc2hIZWFkZXJzID0gWwogICAgICAgIHsKICAgICAgICAgIHR5cGU6ICdpbmRleCcsCiAgICAgICAgICBsYWJlbDogJ+W6j+WPtycsCiAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsCiAgICAgICAgICBpbmRleDogKGluZGV4LCBwYWdlLCBzaXplKSA9PiB7CiAgICAgICAgICAgIHJldHVybiBpbmRleCArIDEgKyAocGFnZSAtIDEpICogc2l6ZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn6I+c5ZOB5ZCN56ewJywKICAgICAgICAgIHByb3A6ICdyZWxhdGlvbk5hbWUnLAogICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICBzbG90TmFtZTogJ25hbWVNZW50aW9uJywKICAgICAgICAgIG1pbldpZHRoOiAxMjAsCiAgICAgICAgICAnc2hvdy1vdmVyZmxvdy10b29sdGlwJzogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbGFiZWw6ICfoj5zns7snLAogICAgICAgICAgcHJvcDogJ2Rpc2hlc1N0eWxlTmFtZScKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn6YCC55So5Lq6576kJywKICAgICAgICAgIHByb3A6ICdjcm93ZE5hbWVzJwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbGFiZWw6ICfppJDliKsnLAogICAgICAgICAgcHJvcDogJ21lYWxUeXBlJywKICAgICAgICAgIGNvbFR5cGU6ICdjb2x1bW4nCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+aVsOmHj++8iOS7ve+8iScsCiAgICAgICAgICBwcm9wOiAncXVhbnRpdHknCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+WIsOi0p+aXtumXtCcsCiAgICAgICAgICBwcm9wOiAnYXJyaXZhbERhdGUnLAogICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICB3aWR0aDogMTUwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+aIkOacrOWPguiAg+S7t++8iOWFg++8iScsCiAgICAgICAgICBwcm9wOiAnY29zdFByaWNlJwogICAgICAgICAgLy8gd2lkdGg6IDEyMCwKICAgICAgICAgIC8vIGFsaWduOiAncmlnaHQnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+WUruS7t++8iOWFg++8iScsCiAgICAgICAgICBwcm9wOiAnc2VsbGluZ1ByaWNlJwogICAgICAgICAgLy8gd2lkdGg6IDEyMCwKICAgICAgICAgIC8vIGFsaWduOiAncmlnaHQnCiAgICAgICAgfQogICAgICBdOwogICAgICBsZXQgaW5ncmVkaWVudHNIZWFkZXJzID0gWwogICAgICAgIHsKICAgICAgICAgIHR5cGU6ICdpbmRleCcsCiAgICAgICAgICBsYWJlbDogJ+W6j+WPtycsCiAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsCiAgICAgICAgICBpbmRleDogKGluZGV4LCBwYWdlLCBzaXplKSA9PiB7CiAgICAgICAgICAgIHJldHVybiBpbmRleCArIDEgKyAocGFnZSAtIDEpICogc2l6ZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn6aOf5p2Q5ZCN56ewJywKICAgICAgICAgIHByb3A6ICdyZWxhdGlvbk5hbWUnLAogICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICBzbG90TmFtZTogJ25hbWVNZW50aW9uJywKICAgICAgICAgIG1pbldpZHRoOiAxMjAsCiAgICAgICAgICAnc2hvdy1vdmVyZmxvdy10b29sdGlwJzogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgLy8gewogICAgICAgIC8vICAgbGFiZWw6ICfliIfphY3moIflh4bvvIjplb8q5a69KumrmC9jbe+8iScsCiAgICAgICAgLy8gICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAvLyAgIHNsb3ROYW1lOiAnY3V0U3RhbmRhcmQnLAogICAgICAgIC8vICAgbWluV2lkdGg6IDEyMAogICAgICAgIC8vIH0sCiAgICAgICAgewogICAgICAgICAgbGFiZWw6ICflh4Doj5zph43ph4/vvIhrZ++8iScsCiAgICAgICAgICBwcm9wOiAnY2xlYW5WZWdldGFibGVXZWlnaHQnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+avm+iPnOmHjemHj++8iGtn77yJJywKICAgICAgICAgIHByb3A6ICdvcmlnaW5hbFZlZ2V0YWJsZVdlaWdodCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn5pWw6YePJywKICAgICAgICAgIGNvbFR5cGU6ICdjb2x1bW4nLAogICAgICAgICAgc2xvdE5hbWU6ICdwYWNrTnVtJwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgbGFiZWw6ICfmgLvph43ph4/vvIhrZ++8iScsCiAgICAgICAgICBwcm9wOiAncXVhbnRpdHknCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+WIsOi0p+aXtumXtCcsCiAgICAgICAgICBwcm9wOiAnYXJyaXZhbERhdGUnLAogICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICB3aWR0aDogMTUwCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+aIkOacrOWPguiAg+S7t++8iOWFg++8iScsCiAgICAgICAgICBwcm9wOiAnY29zdFByaWNlJwogICAgICAgICAgLy8gd2lkdGg6IDEyMCwKICAgICAgICAgIC8vIGFsaWduOiAncmlnaHQnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+mjn+adkOexu+WeiycsCiAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgIHByb3A6ICdpbmdyZWRpZW50VHlwZScsCiAgICAgICAgICBzbG90TmFtZTogJ2luZ3JlZGllbnRUeXBlJwogICAgICAgIH0KICAgICAgXTsKICAgICAgaWYgKHRoaXMuYWN0aXZlTmFtZSA9PT0gJ3N1bW1hcnknKSB7CiAgICAgICAgaWYgKCF0aGlzLmlzUGFyZW50KSB7CiAgICAgICAgICBoZWFkZXJzID0gWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdGlvbicsCiAgICAgICAgICAgICAgc2VsZWN0YWJsZTogdGhpcy5zZWxlY3RhYmxlIC8vIOaYr+WQpuemgemAiQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgdHlwZTogJ2luZGV4JywKICAgICAgICAgICAgICBsYWJlbDogJ+W6j+WPtycsCiAgICAgICAgICAgICAgYWxpZ246ICdjZW50ZXInLAogICAgICAgICAgICAgIGluZGV4OiAoaW5kZXgsIHBhZ2UsIHNpemUpID0+IHsKICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCArIDEgKyAocGFnZSAtIDEpICogc2l6ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC4uLnN1bW1hcnlIZWFkZXJzLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbGFiZWw6ICfmnaXmupAnLAogICAgICAgICAgICAgIHByb3A6ICdzb3VyY2VTdHJpbmcnCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBsYWJlbDogJ+WIsOi0p+aXtumXtCcsCiAgICAgICAgICAgICAgcHJvcDogJ2Fycml2YWxEYXRlJywKICAgICAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgICAgICB3aWR0aDogMTUwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBsYWJlbDogJ+eKtuaAgScsCiAgICAgICAgICAgICAgcHJvcDogJ3N0YXR1cycsCiAgICAgICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICAgICAgc2xvdE5hbWU6ICdzdW1TdGF0dXMnLAogICAgICAgICAgICAgIHdpZHRoOiAxMjAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGxhYmVsOiAn5pON5L2cJywKICAgICAgICAgICAgICB3aWR0aDogJzEwMHB4JywKICAgICAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgICAgICBzbG90TmFtZTogJ3N1bU9wZXJhdGlvbicKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGxhYmVsOiAn5a6e5pS25pWw6YePJywKICAgICAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgICAgICBzbG90TmFtZTogJ2FjdHVhbFF1YW50aXR5JywKICAgICAgICAgICAgICB3aWR0aDogMTIwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBsYWJlbDogJ+WunuaUtuaIkOacrO+8iOWFg++8iScsCiAgICAgICAgICAgICAgcHJvcDogJ2FjdHVhbENvc3QnLAogICAgICAgICAgICAgIHdpZHRoOiAxMjAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGxhYmVsOiAn5pS26LSn57G75Z6LJywKICAgICAgICAgICAgICBwcm9wOiAnYWN0dWFsVHlwZScsCiAgICAgICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICAgICAgc2xvdE5hbWU6ICdhY3R1YWxUeXBlJwogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbGFiZWw6ICflpIfms6gnLAogICAgICAgICAgICAgIHByb3A6ICdyZW1hcmtzJywKICAgICAgICAgICAgICAnc2hvdy1vdmVyZmxvdy10b29sdGlwJzogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIHRoaXMub3JkZXJGbGFnICE9ICcyMDEwMCcgJiYKICAgICAgICAgICAgdGhpcy5vcmRlckZsYWcgIT0gJzEwMTAwJyAmJgogICAgICAgICAgICB0aGlzLm9yZGVyRmxhZyAhPSAnLTEwMjAwJwogICAgICAgICAgKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnN1YkFjdGl2ZU5hbWUgIT09ICdzdW0nKSB7CiAgICAgICAgICAgICAgLy/lhbfkvZPml6XmnJ8KICAgICAgICAgICAgICBoZWFkZXJzID0gWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICB0eXBlOiAnaW5kZXgnLAogICAgICAgICAgICAgICAgICBsYWJlbDogJ+W6j+WPtycsCiAgICAgICAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJywKICAgICAgICAgICAgICAgICAgaW5kZXg6IChpbmRleCwgcGFnZSwgc2l6ZSkgPT4gewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCArIDEgKyAocGFnZSAtIDEpICogc2l6ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbGFiZWw6ICfppJDliKsnLAogICAgICAgICAgICAgICAgICBwcm9wOiAnbWVhbFR5cGUnLAogICAgICAgICAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgICAgICAgICAgc2xvdE5hbWU6ICdtZWFsVHlwZScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAuLi5zdW1tYXJ5SGVhZGVycywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbGFiZWw6ICfliLDotKfml7bpl7QnLAogICAgICAgICAgICAgICAgICBwcm9wOiAnYXJyaXZhbFRpbWUnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBsYWJlbDogJ+adpea6kCcsCiAgICAgICAgICAgICAgICAgIHByb3A6ICdzb3VyY2VTdHJpbmcnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBoZWFkZXJzID0gWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICB0eXBlOiAnaW5kZXgnLAogICAgICAgICAgICAgICAgICBsYWJlbDogJ+W6j+WPtycsCiAgICAgICAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJywKICAgICAgICAgICAgICAgICAgaW5kZXg6IChpbmRleCwgcGFnZSwgc2l6ZSkgPT4gewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCArIDEgKyAocGFnZSAtIDEpICogc2l6ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC4uLnN1bW1hcnlIZWFkZXJzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBsYWJlbDogJ+eKtuaAgScsCiAgICAgICAgICAgICAgICAgIGNvbFR5cGU6ICdjb2x1bW4nLAogICAgICAgICAgICAgICAgICBwcm9wOiAnb3V0T2ZTdG9jaycsCiAgICAgICAgICAgICAgICAgIGhpZGRlbjogdGhpcy5vcGVyYVR5cGUgPT0gJ3ByZXZpZXcnID8gZmFsc2UgOiB0cnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8g6I2J56i/L+W+heWuoeaJuS/lrqHmibnmnKrpgJrov4cKICAgICAgICAgICAgaWYgKHRoaXMuc3ViQWN0aXZlTmFtZSAhPT0gJ3N1bScpIHsKICAgICAgICAgICAgICBoZWFkZXJzID0gWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICB0eXBlOiAnaW5kZXgnLAogICAgICAgICAgICAgICAgICBsYWJlbDogJ+W6j+WPtycsCiAgICAgICAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJywKICAgICAgICAgICAgICAgICAgaW5kZXg6IChpbmRleCwgcGFnZSwgc2l6ZSkgPT4gewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCArIDEgKyAocGFnZSAtIDEpICogc2l6ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbGFiZWw6ICfppJDliKsnLAogICAgICAgICAgICAgICAgICBwcm9wOiAnbWVhbFR5cGUnLAogICAgICAgICAgICAgICAgICBjb2xUeXBlOiAnY29sdW1uJywKICAgICAgICAgICAgICAgICAgc2xvdE5hbWU6ICdtZWFsVHlwZScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAuLi5zdW1tYXJ5SGVhZGVycywKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbGFiZWw6ICfliLDotKfml7bpl7QnLAogICAgICAgICAgICAgICAgICBwcm9wOiAnYXJyaXZhbFRpbWUnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBsYWJlbDogJ+adpea6kCcsCiAgICAgICAgICAgICAgICAgIHByb3A6ICdzb3VyY2VTdHJpbmcnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBoZWFkZXJzID0gWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICB0eXBlOiAnaW5kZXgnLAogICAgICAgICAgICAgICAgICBsYWJlbDogJ+W6j+WPtycsCiAgICAgICAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJywKICAgICAgICAgICAgICAgICAgaW5kZXg6IChpbmRleCwgcGFnZSwgc2l6ZSkgPT4gewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCArIDEgKyAocGFnZSAtIDEpICogc2l6ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC4uLnN1bW1hcnlIZWFkZXJzLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBsYWJlbDogJ+eKtuaAgScsCiAgICAgICAgICAgICAgICAgIGNvbFR5cGU6ICdjb2x1bW4nLAogICAgICAgICAgICAgICAgICBwcm9wOiAnb3V0T2ZTdG9jaycsCiAgICAgICAgICAgICAgICAgIGhpZGRlbjogdGhpcy5vcGVyYVR5cGUgPT0gJ3ByZXZpZXcnID8gZmFsc2UgOiB0cnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGl2ZU5hbWUgPT09ICdtZW51JykgewogICAgICAgIGhlYWRlcnMgPSBbLi4ubWVudUhlYWRlcnNdOwogICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aXZlTmFtZSA9PSAnZGlzaCcpIHsKICAgICAgICBoZWFkZXJzID0gWwogICAgICAgICAgLi4uZGlzaEhlYWRlcnMsCiAgICAgICAgICB7CiAgICAgICAgICAgIGxhYmVsOiAn54q25oCBJywKICAgICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICAgIHByb3A6ICdvdXRPZlN0b2NrJywKICAgICAgICAgICAgaGlkZGVuOiB0aGlzLm9wZXJhVHlwZSA9PSAncHJldmlldycgPyBmYWxzZSA6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdOwogICAgICB9IGVsc2UgewogICAgICAgIGhlYWRlcnMgPSBbCiAgICAgICAgICAuLi5pbmdyZWRpZW50c0hlYWRlcnMsCiAgICAgICAgICB7CiAgICAgICAgICAgIGxhYmVsOiAn54q25oCBJywKICAgICAgICAgICAgY29sVHlwZTogJ2NvbHVtbicsCiAgICAgICAgICAgIHByb3A6ICdvdXRPZlN0b2NrJywKICAgICAgICAgICAgaGlkZGVuOiB0aGlzLm9wZXJhVHlwZSA9PSAncHJldmlldycgPyBmYWxzZSA6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdOwogICAgICB9CiAgICAgIHJldHVybiBoZWFkZXJzOwogICAgfSwKICAgIGZvcm1JdGVtcygpIHsKICAgICAgbGV0IGZvcm1JdGVtcyA9IFtdOwogICAgICBpZiAodGhpcy5pc1BhcmVudCkgewogICAgICAgIHN3aXRjaCAodGhpcy5hY3RpdmVOYW1lKSB7CiAgICAgICAgICBjYXNlICdzdW1tYXJ5JzoKICAgICAgICAgICAgZm9ybUl0ZW1zID0gWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dCcsCiAgICAgICAgICAgICAgICBwcm9wOiAnbmFtZU9yUGlueWluSGVhZGVyJywKICAgICAgICAgICAgICAgIGxhYmVsOiAnJywKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAn6K+36L6T5YWl5ZCN56ew44CB566A5ou8JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsCiAgICAgICAgICAgICAgICBwcm9wOiAnb3V0T2ZTdG9jaycsCiAgICAgICAgICAgICAgICBsYWJlbDogJ+eKtuaAgScsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+eKtuaAgScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvcHRpb25zOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+WFqOmDqCcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcnCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+e8uui0pycsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnIOaciei0pycsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDAKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdkaXNoJzoKICAgICAgICAgICAgZm9ybUl0ZW1zID0gWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dCcsCiAgICAgICAgICAgICAgICBwcm9wOiAnbmFtZU9yUGlueWluSGVhZGVyJywKICAgICAgICAgICAgICAgIGxhYmVsOiAnJywKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAn6K+36L6T5YWl5ZCN56ew44CB566A5ou8JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsCiAgICAgICAgICAgICAgICBwcm9wOiAnZGlzaGVzU3R5bGVJZCcsCiAgICAgICAgICAgICAgICBsYWJlbDogJ+iPnOezuycsCiAgICAgICAgICAgICAgICBsYWJlbEtleTogJ25hbWUnLAogICAgICAgICAgICAgICAgdmFsdWVLZXk6ICdpZCcsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+iPnOezuycKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhamF4OiAoKSA9PiB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjb29raW5nU3R5bGVMaXN0KCkudGhlbihyZXMgPT4gewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc29sdmUocmVzLmRhdGEpKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JywKICAgICAgICAgICAgICAgIHByb3A6ICdtZWFsVHlwZScsCiAgICAgICAgICAgICAgICBsYWJlbDogJ+mkkOWIqycsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+mkkOWIqycKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm1lYWxUeXBlTGlzdAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsCiAgICAgICAgICAgICAgICBwcm9wOiAnb3V0T2ZTdG9jaycsCiAgICAgICAgICAgICAgICBsYWJlbDogJ+eKtuaAgScsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+eKtuaAgScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvcHRpb25zOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+WFqOmDqCcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcnCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+e8uui0pycsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnIOaciei0pycsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDAKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdpbmdyZWRpZW50cyc6CiAgICAgICAgICAgIGZvcm1JdGVtcyA9IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0eXBlOiAnaW5wdXQnLAogICAgICAgICAgICAgICAgcHJvcDogJ25hbWVPclBpbnlpbkhlYWRlcicsCiAgICAgICAgICAgICAgICBsYWJlbDogJycsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+ivt+i+k+WFpeWQjeensOOAgeeugOaLvCcKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgICAgICAgICAgcHJvcDogJ291dE9mU3RvY2snLAogICAgICAgICAgICAgICAgbGFiZWw6ICfnirbmgIEnLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICfnirbmgIEnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb3B0aW9uczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICflhajpg6gnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICfnvLrotKcnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogJyDmnInotKcnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgZm9ybUl0ZW1zID0gW107CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBzd2l0Y2ggKHRoaXMuYWN0aXZlTmFtZSkgewogICAgICAgICAgY2FzZSAnc3VtbWFyeSc6CiAgICAgICAgICAgIGZvcm1JdGVtcyA9IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0eXBlOiAnaW5wdXQnLAogICAgICAgICAgICAgICAgcHJvcDogJ25hbWVPclBpbnlpbkhlYWRlcicsCiAgICAgICAgICAgICAgICBsYWJlbDogJycsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+ivt+i+k+WFpeWQjeensOOAgeeugOaLvCcKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgICAgICAgICAgcHJvcDogJ3N0YXR1cycsCiAgICAgICAgICAgICAgICBsYWJlbDogJ+eKtuaAgScsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+eKtuaAgScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLmJ1eVN0YXRlTGlzdAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdkaXNoJzoKICAgICAgICAgICAgZm9ybUl0ZW1zID0gWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dCcsCiAgICAgICAgICAgICAgICBwcm9wOiAnbmFtZU9yUGlueWluSGVhZGVyJywKICAgICAgICAgICAgICAgIGxhYmVsOiAnJywKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAn6K+36L6T5YWl5ZCN56ew44CB566A5ou8JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsCiAgICAgICAgICAgICAgICBwcm9wOiAnZGlzaGVzU3R5bGVJZCcsCiAgICAgICAgICAgICAgICBsYWJlbDogJ+iPnOezuycsCiAgICAgICAgICAgICAgICBsYWJlbEtleTogJ25hbWUnLAogICAgICAgICAgICAgICAgdmFsdWVLZXk6ICdpZCcsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+iPnOezuycKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhamF4OiAoKSA9PiB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjb29raW5nU3R5bGVMaXN0KCkudGhlbihyZXMgPT4gewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc29sdmUocmVzLmRhdGEpKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JywKICAgICAgICAgICAgICAgIHByb3A6ICdtZWFsVHlwZScsCiAgICAgICAgICAgICAgICBsYWJlbDogJ+mkkOWIqycsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+mkkOWIqycKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm1lYWxUeXBlTGlzdAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdpbmdyZWRpZW50cyc6CiAgICAgICAgICAgIGZvcm1JdGVtcyA9IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0eXBlOiAnaW5wdXQnLAogICAgICAgICAgICAgICAgcHJvcDogJ25hbWVPclBpbnlpbkhlYWRlcicsCiAgICAgICAgICAgICAgICBsYWJlbDogJycsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+ivt+i+k+WFpeWQjeensOOAgeeugOaLvCcKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgZm9ybUl0ZW1zID0gW107CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGZvcm1JdGVtczsKICAgIH0sCiAgICBzdWJUYWJzKCkgewogICAgICBsZXQgdGFiT3JpZ2luID0gewogICAgICAgIGxhYmVsOiAn5rGH5oC7JywKICAgICAgICBuYW1lOiAnc3VtJwogICAgICB9OwogICAgICByZXR1cm4gW3RhYk9yaWdpbiwgLi4udGhpcy5jdXJyZW50VGFic107CiAgICB9LAogICAgY2FuQmF0Y2hSZWNlaXZlKCkgewogICAgICBpZiAodGhpcy5vcmRlckZsYWcgPT0gJzQwMTAwJyB8fCB0aGlzLm9yZGVyRmxhZyA9PSAnMzAxNTAnKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwKICBjcmVhdGVkKCkgewogICAgbGV0IHF1ZXJ5T2JqID0gdGhpcy4kcm91dGUucXVlcnk7CiAgICB0aGlzLm9yZGVySWQgPSBxdWVyeU9iai5vcmRlcklkOwogICAgdGhpcy5vcGVyYVR5cGUgPSBxdWVyeU9iai5vcGVyYVR5cGU7CiAgICBpZiAocXVlcnlPYmoub3JkZXJGbGFnKSB7CiAgICAgIHRoaXMub3JkZXJGbGFnID0gcXVlcnlPYmoub3JkZXJGbGFnICsgJyc7CiAgICB9CiAgICAvLyB0aGlzLmlzUGFyZW50ID0gcXVlcnlPYmouaXNQYXJlbnQgPyBKU09OLnBhcnNlKHF1ZXJ5T2JqLmlzUGFyZW50KSA6IHRydWU7CiAgICB0cnkgewogICAgICB0aGlzLmlzUGFyZW50ID0gSlNPTi5wYXJzZShxdWVyeU9iai5pc1BhcmVudCk7CiAgICB9IGNhdGNoIChlKSB7fQogICAgUHJvbWlzZS5hbGwoWwogICAgICB0aGlzLmdldE9yZGVyRGV0YWlsKCksCiAgICAgIHRoaXMuZ2V0T3JkZXJDb250ZW50QXJyaXZhbERhdGVMaXN0KCksCiAgICAgIHRoaXMuZ2V0T3JkZXJJc1dpdGhkcmF3bigpCiAgICBdKTsKICAgIGlmICh0aGlzLm9wZXJhVHlwZSA9PSAnb3JkZXJNYW5hZ2UnKSB7CiAgICAgIHRoaXMuJHJvdXRlLm1ldGEudGl0bGUgPSAn6K6i5Y2V566h55CGJzsKICAgICAgdGhpcy5nZXRSZWNvcmQoKTsKICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgIHRoaXMuc2V0SW1nKHRoaXMub3JkZXJGbGFnKTsKICAgIH0pOwogIH0sCiAgbWV0aG9kczogewogICAgc2VsZWN0YWJsZShyb3cpIHsKICAgICAgaWYgKHRoaXMub3JkZXJGbGFnICE9ICczMDIwMCcgJiYgdGhpcy5vcmRlckZsYWcgIT0gJzQwMjAwJykgewogICAgICAgIGlmIChyb3cuc3RhdHVzID09ICcyMDIwMTAwJykgewogICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgdGhpcy4kaGFzKFsnb3JkZXItb3BlcmEtcmVjZWl2ZSddKSB8fAogICAgICAgICAgICB0aGlzLiRoYXMoWydvcmRlci1vcGVyYS1yZWNlaXZlLXNwZWNpYWwnXSkKICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBpZiAocm93LnN0YXR1cyA9PSAnMjAzMDEwMCcpIHsKICAgICAgICAgIHJldHVybiB0aGlzLiRoYXMoWydvcmRlci1vcGVyYS1yZWNlaXZlJ10pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgICBoYW5kbGVUYWJDbGljaygpIHt9LAogICAgaXNPcGVyYXRpb25EaXNhYmxlZCgpIHsKICAgICAgY29uc29sZS5sb2coMzMzMzMzMzMsIHRoaXMuJGhhcyhbJ29yZGVyLW9wZXJhLXJlY2VpdmUtc3BlY2lhbCddKSk7CiAgICAgIGlmICh0aGlzLm9yZGVyRmxhZyA9PSAnMzAyMDAnIHx8IHRoaXMub3JkZXJGbGFnID09ICc0MDIwMCcpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgICBoYW5kbGVTdWJUYWJDbGljayh0YWIpIHsKICAgICAgdGhpcy5zdWJBY3RpdmVOYW1lID0gdGFiLm5hbWU7CiAgICB9LAogICAgZmV0Y2hUYWJsZURhdGEoZGF0YSkgewogICAgICB0aGlzLnBhcmFtcyA9IGRhdGE7CiAgICAgIHJldHVybiBjb21tb25PcmRlckNvbnRlbnRGb3JQYWdlKAogICAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwgewogICAgICAgICAgb3JkZXJJZDogdGhpcy5vcmRlcklkLAogICAgICAgICAgcXVlcnlUeXBlOiB0aGlzLnF1ZXJ5T2JqZWN0W3RoaXMuYWN0aXZlTmFtZV0sCiAgICAgICAgICBhcnJpdmFsRGF0ZToKICAgICAgICAgICAgdGhpcy5hY3RpdmVOYW1lID09PSAnc3VtbWFyeScKICAgICAgICAgICAgICA/IHRoaXMuc3ViQWN0aXZlTmFtZSA9PT0gJ3N1bScKICAgICAgICAgICAgICAgID8gJycKICAgICAgICAgICAgICAgIDogdGhpcy5zdWJBY3RpdmVOYW1lCiAgICAgICAgICAgICAgOiAnJwogICAgICAgIH0pCiAgICAgICkudGhlbihyZXMgPT4gewogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc29sdmUocmVzKSk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldE9yZGVyRGV0YWlsKCkgewogICAgICBnZXRPcmRlckRldGFpbCh7IG9yZGVySWQ6IHRoaXMub3JkZXJJZCB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgdGhpcy5vcmRlckZvcm1JbmZvID0gcmVzLmRhdGEgfHwge307CiAgICAgICAgdGhpcy5vcmRlckZsYWcgPSB0aGlzLm9yZGVyRm9ybUluZm8uc3RhdHVzIHx8IG51bGw7CiAgICAgICAgdGhpcy5zdXBwbGllck5hbWUgPSB0aGlzLm9yZGVyRm9ybUluZm8uc3VwcGxpZXJOYW1lOwogICAgICAgIGlmICgKICAgICAgICAgIHRoaXMub3BlcmFUeXBlID09ICdwcmV2aWV3JyB8fAogICAgICAgICAgKHRoaXMub3BlcmFUeXBlID09ICdvcmRlck1hbmFnZScgJiYgdGhpcy5vcmRlckZsYWcgPT0gJzEwMTAwJykKICAgICAgICApIHsKICAgICAgICAgIHRoaXMub3JkZXJSZW1hcmsgPSB0aGlzLm9yZGVyRm9ybUluZm8ucmVtYXJrczsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdldE9yZGVyQ29udGVudEFycml2YWxEYXRlTGlzdCgpIHsKICAgICAgZ2V0T3JkZXJDb250ZW50QXJyaXZhbERhdGVMaXN0KHsgb3JkZXJJZDogdGhpcy5vcmRlcklkIH0pLnRoZW4ocmVzID0+IHsKICAgICAgICBsZXQgZGF0ZUxpc3QgPSByZXMuZGF0YSB8fCBbXTsKICAgICAgICB0aGlzLmN1cnJlbnRUYWJzID0gZGF0ZUxpc3QubWFwKGl0ZW0gPT4gewogICAgICAgICAgcmV0dXJuIHsgbGFiZWw6IGl0ZW0sIG5hbWU6IGl0ZW0gfTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0T3JkZXJJc1dpdGhkcmF3bigpIHsKICAgICAgZ2V0T3JkZXJJc1dpdGhkcmF3bih7IGlkOiB0aGlzLm9yZGVySWQgfSkudGhlbihyZXMgPT4gewogICAgICAgIHRoaXMuY2FuQ2hhZ2VCYWNrID0gcmVzLmRhdGE7CiAgICAgIH0pOwogICAgfSwKICAgIGdldFJvd0N1c3RvbU5hbWUoeyByb3csIHJvd0luZGV4IH0pIHsKICAgICAgaWYgKHJvdy5vdXRPZlN0b2NrKSB7CiAgICAgICAgcmV0dXJuICd0YWJsZS1uby1wcm9kdWN0aW9uJzsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJyc7CiAgICAgIH0KICAgIH0sCiAgICBnZXRPcmRlclN0YXR1cyhzdGF0dXMpIHsKICAgICAgbGV0IHR5cGUgPSB0aGlzLiREKCdPUkRFUl9UWVBFJywgJycgKyBzdGF0dXMpIHx8ICcnOwogICAgICAvLyBzd2l0Y2ggKHN0YXR1cykgewogICAgICAvLyAgIGNhc2UgMToKICAgICAgLy8gICAgIHR5cGUgPSAn5bi46KeEJzsKICAgICAgLy8gICAgIGJyZWFrOwogICAgICAvLyAgIGNhc2UgMjoKICAgICAgLy8gICAgIHR5cGUgPSAn57Sn5oClJzsKICAgICAgLy8gICAgIGJyZWFrOwogICAgICAvLyAgIGRlZmF1bHQ6CiAgICAgIC8vICAgICBicmVhazsKICAgICAgLy8gfQogICAgICByZXR1cm4gdHlwZTsKICAgIH0sCiAgICBkZWxldGVPcmRlcigpIHsKICAgICAgdGhpcy4kY29uZmlybSgn5oKo56Gu5a6a6KaB5Yig6Zmk5ZCXPycsICfmj5DnpLonLCB7CiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLAogICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICB9KQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIGRlbGV0ZU9yZGVyKHsgb3JkZXJJZDogdGhpcy5vcmRlcklkIH0pLnRoZW4ocmVzID0+IHsKICAgICAgICAgICAgdGhpcy53YXJuaW5nKCfliKDpmaTmiJDlip8nLCAnc3VjY2VzcycpOwogICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICAgICAgcGF0aDogJy9vcmRlci9vcmRlci1tYW5hZ2VtZW50LXB1cmNoYXNlJwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHt9KTsKICAgIH0sCiAgICBlZGlPcmRlcigpIHsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIHBhdGg6ICcvb3JkZXIvZWRpdC1vcmRlcicsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIG9yZGVySWQ6IHRoaXMub3JkZXJJZCwKICAgICAgICAgIG9wZXJhVHlwZTogJ2VkaXQnCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBoYW5kbGVPcmRlcihjb2RlLCB0eXBlKSB7CiAgICAgIGxldCBuYW1lID0gdGhpcy5vcGVyYUNvZGVbY29kZV07CiAgICAgIGlmICh0eXBlID09ICdhcHByb3ZlcicgJiYgY29kZSA9PSAnMzAxMDAnKSB7CiAgICAgICAgbmFtZSA9ICflrqHmibnpgJrov4cnOwogICAgICB9CgogICAgICB0aGlzLiRjb25maXJtKGDmgqjnoa7lrpropoEke25hbWV95ZCXP2AsICfmj5DnpLonLCB7CiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLAogICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICB9KQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIGFwcHJvdmVPcmRlcih7CiAgICAgICAgICAgIGlkOiB0aGlzLm9yZGVySWQsCiAgICAgICAgICAgIHJlbWFyazogdGhpcy5vcmRlclJlbWFyaywKICAgICAgICAgICAgY29kZQogICAgICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgICAgICBpZiAoY29kZSA9PSAnMzAyMDAnIHx8IGNvZGUgPT0gJzQwMjAwJykgewogICAgICAgICAgICAgIHRoaXMud2FybmluZygn6YCA5Y2V55Sz6K+35bey5o+Q5LqkJywgJ3N1Y2Nlc3MnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLndhcm5pbmcoYCR7bmFtZX3miJDlip/vvIFgLCAnc3VjY2VzcycpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICAgICAgcGF0aDogJy9vcmRlci9vcmRlci1tYW5hZ2VtZW50LXB1cmNoYXNlJwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHt9KTsKICAgIH0sCgogICAgaGFuZGxlTW9kaWZ5KGNvZGUsIHRleHQpIHsKICAgICAgdGhpcy5tb2RpZnlWaXNpYmxlID0gdHJ1ZTsKICAgICAgdGhpcy4kcmVmcy5tb2RpZnlSZWYuZWRpdFJvdyh7IGlkOiB0aGlzLm9yZGVySWQsIGNvZGUgfSwgdGV4dCk7CiAgICB9LAogICAgaGFuZGxlTW9kaWZ5Q2FuY2VsKCkgewogICAgICB0aGlzLm1vZGlmeVZpc2libGUgPSBmYWxzZTsKICAgIH0sCiAgICBoYW5kbGVNb2RpZnlTdWJtaXQoKSB7CiAgICAgIHRoaXMubW9kaWZ5VmlzaWJsZSA9IGZhbHNlOwogICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgcGF0aDogJy9vcmRlci9vcmRlci1tYW5hZ2VtZW50LXB1cmNoYXNlJwogICAgICB9KTsKICAgIH0sCiAgICBmb3JtYXRlRGF0ZSh0aW1lc3RhbXAsIHR5cGUgPSAxKSB7CiAgICAgIGlmICghdGltZXN0YW1wKSB7CiAgICAgICAgcmV0dXJuICctJzsKICAgICAgfQogICAgICBsZXQgdGltZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCk7CiAgICAgIGxldCB5ZWFyID0gdGltZS5nZXRGdWxsWWVhcigpOwogICAgICBjb25zdCBtb250aCA9ICh0aW1lLmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgIGNvbnN0IGRhdGUgPSB0aW1lCiAgICAgICAgLmdldERhdGUoKQogICAgICAgIC50b1N0cmluZygpCiAgICAgICAgLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgIGNvbnN0IGhvdXJzID0gdGltZQogICAgICAgIC5nZXRIb3VycygpCiAgICAgICAgLnRvU3RyaW5nKCkKICAgICAgICAucGFkU3RhcnQoMiwgJzAnKTsKICAgICAgY29uc3QgbWludXRlID0gdGltZQogICAgICAgIC5nZXRNaW51dGVzKCkKICAgICAgICAudG9TdHJpbmcoKQogICAgICAgIC5wYWRTdGFydCgyLCAnMCcpOwogICAgICBjb25zdCBzZWNvbmQgPSB0aW1lCiAgICAgICAgLmdldFNlY29uZHMoKQogICAgICAgIC50b1N0cmluZygpCiAgICAgICAgLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgIGlmICh0eXBlID09IDEpIHsKICAgICAgICByZXR1cm4geWVhciArICflubQnICsgbW9udGggKyAn5pyIJyArIGRhdGUgKyAn5pelJzsKICAgICAgfSBlbHNlIGlmICh0eXBlID09IDIpIHsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgeWVhciArCiAgICAgICAgICAnLScgKwogICAgICAgICAgbW9udGggKwogICAgICAgICAgJy0nICsKICAgICAgICAgIGRhdGUgKwogICAgICAgICAgJyAnICsKICAgICAgICAgIGhvdXJzICsKICAgICAgICAgICc6JyArCiAgICAgICAgICBtaW51dGUgKwogICAgICAgICAgJzonICsKICAgICAgICAgIHNlY29uZAogICAgICAgICk7CiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAzKSB7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgIHllYXIgKwogICAgICAgICAgJ18nICsKICAgICAgICAgIG1vbnRoICsKICAgICAgICAgICdfJyArCiAgICAgICAgICBkYXRlICsKICAgICAgICAgICdfJyArCiAgICAgICAgICBob3VycyArCiAgICAgICAgICAnXycgKwogICAgICAgICAgbWludXRlICsKICAgICAgICAgICdfJyArCiAgICAgICAgICBzZWNvbmQKICAgICAgICApOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gNCkgewogICAgICAgIHJldHVybiB5ZWFyICsgJy0nICsgbW9udGggKyAnLScgKyBkYXRlOwogICAgICB9CiAgICB9LAogICAgZ2V0UmVjb3JkKCkgewogICAgICBnZXRSZWNvcmQoeyBvcmRlcklkOiB0aGlzLm9yZGVySWQgfSkudGhlbihyZXMgPT4gewogICAgICAgIHRoaXMuaGlzdG9yeVRhYmxlRGF0YSA9IHJlcy5kYXRhIHx8IFtdOwogICAgICAgIGlmIChyZXMuZGF0YSAmJiByZXMuZGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgICBjb25zdCBmaW5kSXRlbSA9IHJlcy5kYXRhLmZpbmQoCiAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS5vcGVyYXRpb25OYW1lID09PSAn5a6h5om55LiN6YCa6L+HJwogICAgICAgICAgKTsKICAgICAgICAgIGlmIChmaW5kSXRlbSkgewogICAgICAgICAgICB0aGlzLnJlYXNvbiA9IGZpbmRJdGVtLnJlbWFya3M7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBnb1JlT3JkZXIoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBuYW1lOiAnQWRkT3JkZXInLAogICAgICAgIHBhcmFtczogewogICAgICAgICAgb3BlcmFUeXBlOiAnY29weScsCiAgICAgICAgICBvcmRlcklkOiB0aGlzLm9yZGVySWQKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdvQmFja01vZGlmeSgpIHsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIHBhdGg6ICcvb3JkZXIvZWRpdC1vcmRlcicsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIG9yZGVySWQ6IHRoaXMub3JkZXJJZAogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZXhwb3J0T3JkZXIoKSB7CiAgICAgIGNvbnN0IHsgb3JkZXJGb3JtSW5mbywgZ2V0T3JkZXJTdGF0dXMsIGZvcm1hdGVEYXRlIH0gPSB0aGlzOwogICAgICBjb25zdCB7CiAgICAgICAgdHlwZSwKICAgICAgICBwcm92aW5jZU5hbWUsCiAgICAgICAgY2l0eU5hbWUsCiAgICAgICAgZGlzdHJpY3ROYW1lLAogICAgICAgIHBhcmVudERlcHROYW1lLAogICAgICAgIGRlcHROYW1lLAogICAgICAgIGNyZWF0ZVRpbWUsCiAgICAgICAgdXBkYXRlVGltZSwKICAgICAgICBhcnJpdmFsVGltZSwKICAgICAgICBjcmVhdG9yTmFtZSwKICAgICAgICBjb25maXJtVGltZQogICAgICB9ID0gb3JkZXJGb3JtSW5mbzsKICAgICAgY29uc3QgbmFtZSA9IGDjgJAke29yZGVyRm9ybUluZm8ub3JkZXJOb33jgJHjgJAke2dldE9yZGVyU3RhdHVzKAogICAgICAgIHR5cGUKICAgICAgKX3jgJEke3Byb3ZpbmNlTmFtZX0ke2NpdHlOYW1lfSR7ZGlzdHJpY3ROYW1lfSR7cGFyZW50RGVwdE5hbWV9JHtkZXB0TmFtZX3nmoTorqLljZXliJvlu7rml6XmnJ8ke2Zvcm1hdGVEYXRlKAogICAgICAgIGNyZWF0ZVRpbWUKICAgICAgKX3kuIvljZXml6XmnJ8ke2Zvcm1hdGVEYXRlKGNvbmZpcm1UaW1lKX1fJHtmb3JtYXRlRGF0ZShEYXRlLm5vdygpLCAzKX0ueGxzeGA7CiAgICAgIGxldCBleHBvcnRGdW5jdGlvbjsKICAgICAgaWYgKHRoaXMub3BlcmFUeXBlICE9ICdwcmV2aWV3JykgewogICAgICAgIGV4cG9ydEZ1bmN0aW9uID0gdGhpcy5pc1BhcmVudAogICAgICAgICAgPyBwdXJjaGFzZU9yZGVyRXhjZWwKICAgICAgICAgIDogcHVyY2hhc2VPcmRlckRldGFpbEV4Y2VsOwogICAgICB9IGVsc2UgewogICAgICAgIGV4cG9ydEZ1bmN0aW9uID0gcHVyY2hhc2VQcmV2aWV3RXhjZWw7CiAgICAgIH0KICAgICAgZXhwb3J0RnVuY3Rpb24oeyBvcmRlcklkOiB0aGlzLm9yZGVySWQgfSkudGhlbihyZXMgPT4gewogICAgICAgIHRoaXMuJHV0aWwuZG93bkxvYWRCbG9iKHJlcywgbmFtZSk7CiAgICAgIH0pOwogICAgfSwKICAgIHdhcm5pbmcobWVzc2FnZSwgdHlwZSA9ICd3YXJuaW5nJykgewogICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICBzaG93Q2xvc2U6IHRydWUsCiAgICAgICAgbWVzc2FnZSwKICAgICAgICB0eXBlCiAgICAgIH0pOwogICAgfSwKICAgIGFqYXhHZXRUYWJsZURhdGFCeVBhZ2UoKSB7CiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICB0aGlzLiRyZWZzLmJUYWJsZTIgJiYgdGhpcy4kcmVmcy5iVGFibGUyWzBdLmFqYXhHZXRUYWJsZURhdGFCeVBhZ2UoKTsKICAgICAgfSk7CiAgICB9LAogICAgYXN5bmMgcmVjZWl2ZUdvb2RzKGNvZGUsIGl0ZW0sIG1vZGUpIHsKICAgICAgaWYgKGNvZGUgPT0gJ2ZsYWcnKSB7CiAgICAgICAgaWYgKHRoaXMuJGhhcyhbJ29yZGVyLW9wZXJhLXJlY2VpdmUnXSkpIHsKICAgICAgICAgIGNvZGUgPSAnMjA0MDEwMCc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvZGUgPSAnMjAzMDEwMCc7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMucmVjZWl2ZUdvb2RzVmlzaWJsZSA9IHRydWU7CiAgICAgIGxldCBkYXRhT2JqID0ge307CiAgICAgIGF3YWl0IGdldE9yZGVyRGV0YWlsSW5mbyh7IGlkOiBpdGVtLm9yZGVyQ29udGVudERldGFpbElkIH0pLnRoZW4ocmVzID0+IHsKICAgICAgICBkYXRhT2JqID0gcmVzLmRhdGE7CiAgICAgIH0pOwogICAgICB0aGlzLiRyZWZzLnJlY2VpdmVHb29kc1JlZi5lZGl0Um93KAogICAgICAgIE9iamVjdC5hc3NpZ24oZGF0YU9iaiwgewogICAgICAgICAgaWQ6IHRoaXMub3JkZXJJZCwKICAgICAgICAgIGRldGFpbElkczogaXRlbS5vcmRlckNvbnRlbnREZXRhaWxJZCwKICAgICAgICAgIGNvZGUKICAgICAgICB9KSwKICAgICAgICBtb2RlID8gJ2VkaXQnIDogJ2FkZCcKICAgICAgKTsKICAgIH0sCiAgICBpc1Nob3dSZW1hcmsoKSB7CiAgICAgIGNvbnN0IHsgb3BlcmFUeXBlLCBvcmRlckZsYWcgfSA9IHRoaXM7CiAgICAgIGlmIChvcGVyYVR5cGUgPT0gJ3ByZXZpZXcnKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGlmICgKICAgICAgICAodGhpcy4kaGFzKFsnb3JkZXItbWFuYWdlLWlzLWFwcHJvdmFsJ10pICYmIG9yZGVyRmxhZyA9PSAnMjAxMDAnKSB8fAogICAgICAgICh0aGlzLiRoYXMoWydvcmRlci1tYW5hZ2UtaXMtcHVyY2hhc2UnXSkgJiYKICAgICAgICAgIChvcmRlckZsYWcgPT0gJy0xMDIwMCcgfHwKICAgICAgICAgICAgb3JkZXJGbGFnID09ICc0MDIwMCcgfHwKICAgICAgICAgICAgb3JkZXJGbGFnID09ICczMDIwMCcpKQogICAgICApIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCgogICAgaGFuZGxlR29vZHNDYW5jZWwoKSB7CiAgICAgIHRoaXMucmVjZWl2ZUdvb2RzVmlzaWJsZSA9IGZhbHNlOwogICAgfSwKICAgIGhhbmRsZUdvb2RzU3VibWl0KCkgewogICAgICB0aGlzLnJlY2VpdmVHb29kc1Zpc2libGUgPSBmYWxzZTsKICAgICAgdGhpcy5hamF4R2V0VGFibGVEYXRhQnlQYWdlKCk7CiAgICAgIHRoaXMuZ2V0UmVjb3JkKCk7CiAgICB9LAoKICAgIGhhbmRsZUJhdGNoR29vZHNDYW5jZWwoKSB7CiAgICAgIHRoaXMuYmF0Y2hSZWNlaXZlR29vZHNWaXNpYmxlID0gZmFsc2U7CiAgICB9LAogICAgaGFuZGxlQmF0Y2hHb29kc1N1Ym1pdCgpIHsKICAgICAgdGhpcy5iYXRjaFJlY2VpdmVHb29kc1Zpc2libGUgPSBmYWxzZTsKICAgICAgdGhpcy5hamF4R2V0VGFibGVEYXRhQnlQYWdlKCk7CiAgICAgIHRoaXMuZ2V0UmVjb3JkKCk7CiAgICAgIHRoaXMuZ2V0T3JkZXJEZXRhaWwoKTsKICAgIH0sCiAgICBjaGFyZ2VCYWNrKGNvZGUpIHsKICAgICAgdGhpcy5jaGFyZ2VWaXNpYmxlID0gdHJ1ZTsKICAgICAgdGhpcy4kcmVmcy5jaGFyZ2VCYWNrUmVmLmVkaXRSb3coeyBpZDogdGhpcy5vcmRlcklkLCBjb2RlIH0pOwogICAgfSwKICAgIGhhbmRsZUNoYXJnZUNhbmNlbCgpIHsKICAgICAgdGhpcy5jaGFyZ2VWaXNpYmxlID0gZmFsc2U7CiAgICB9LAogICAgaGFuZGxlQ2hhcmdlU3VibWl0KCkgewogICAgICB0aGlzLmNoYXJnZVZpc2libGUgPSBmYWxzZTsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIHBhdGg6ICcvb3JkZXIvb3JkZXItbWFuYWdlbWVudC1wdXJjaGFzZScKICAgICAgfSk7CiAgICB9LAogICAgc2V0SW1nKGNvZGUpIHsKICAgICAgc3dpdGNoIChjb2RlKSB7CiAgICAgICAgLy8g6YCA5Y2V55Sz6K+35LitCiAgICAgICAgY2FzZSAnMzAyMDAnOgogICAgICAgIGNhc2UgJzQwMjAwJzoKICAgICAgICAgIHRoaXMub3JkZXJTdGF0dXNJbWcgPSByZXF1aXJlKCdAL3BhZ2VzL2NhdGVyaW5nL2Fzc2V0cy9pbWFnZXMvb3JkZXIvYmFja0luZy5zdmcnKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIOW3sumAgOWNlQogICAgICAgIGNhc2UgJy0yMDEwMCc6CiAgICAgICAgICB0aGlzLm9yZGVyU3RhdHVzSW1nID0gcmVxdWlyZSgnQC9wYWdlcy9jYXRlcmluZy9hc3NldHMvaW1hZ2VzL29yZGVyL2JhY2tTdWNjZXNzLnN2ZycpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8g5b6F5Y+R6LSnCiAgICAgICAgY2FzZSAnMzAxMDAnOgogICAgICAgIGNhc2UgJzQwMTA1JzoKICAgICAgICBjYXNlICczMDI1MCc6CiAgICAgICAgICB0aGlzLm9yZGVyU3RhdHVzSW1nID0gcmVxdWlyZSgnQC9wYWdlcy9jYXRlcmluZy9hc3NldHMvaW1hZ2VzL29yZGVyL2RlbGlldmVyUGVuZGluZy5zdmcnKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIOW3suaUtui0pwogICAgICAgIGNhc2UgJzQwMTEwJzoKICAgICAgICAgIHRoaXMub3JkZXJTdGF0dXNJbWcgPSByZXF1aXJlKCdAL3BhZ2VzL2NhdGVyaW5nL2Fzc2V0cy9pbWFnZXMvb3JkZXIvcmVjZWl2ZWQuc3ZnJyk7CiAgICAgICAgICBicmVhazsKICAgICAgICAvLyDlvoXmlLbotKcKICAgICAgICBjYXNlICc0MDEwMCc6CiAgICAgICAgY2FzZSAnMzAxNTAnOgogICAgICAgICAgdGhpcy5vcmRlclN0YXR1c0ltZyA9IHJlcXVpcmUoJ0AvcGFnZXMvY2F0ZXJpbmcvYXNzZXRzL2ltYWdlcy9vcmRlci9yZWNlaXZlUGVuZGluZy5zdmcnKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgICBjb25zb2xlLmxvZyh0aGlzLm9yZGVyU3RhdHVzSW1nKTsKICAgIH0sCiAgICBiYXRjaFJlY2VpdmVHb29kcygpIHsKICAgICAgdGhpcy5iYXRjaFJlY2VpdmVSb3dzID0gW107CiAgICAgIGxldCByb3dzID0gdGhpcy4kcmVmcy5iVGFibGUyWzBdLnNlbGVjdFJvd3M7CiAgICAgIGlmIChyb3dzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRoaXMuJG1lc3NhZ2UoJ+ivt+iHs+WwkemAieaLqeS4gOadoeaVsOaNricpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLmJhdGNoUmVjZWl2ZVJvd3MgPSBbLi4ucm93c107CiAgICAgIHRoaXMuYmF0Y2hSZWNlaXZlR29vZHNWaXNpYmxlID0gdHJ1ZTsKICAgIH0sCiAgICBjb3B5T3JkZXIoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBuYW1lOiAnQWRkT3JkZXInLAogICAgICAgIHBhcmFtczogewogICAgICAgICAgb3BlcmFUeXBlOiAnY29weScsCiAgICAgICAgICBvcmRlcklkOiB0aGlzLm9yZGVySWQKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfTsK"},null]}