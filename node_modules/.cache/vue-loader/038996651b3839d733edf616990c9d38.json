{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/share-platform-admin/views/layout/components/TagsView/ScrollPane.vue?vue&type=style&index=0&id=e9e3292e&lang=less&scoped=true&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/share-platform-admin/views/layout/components/TagsView/ScrollPane.vue","mtime":1627979214368},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnNjcm9sbC1jb250YWluZXIgewogIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIG92ZXJmbG93OiBoaWRkZW47CiAgd2lkdGg6IDEwMCU7CiAgOjp2LWRlZXAgewogICAgLmVsLXNjcm9sbGJhcl9fYmFyIHsKICAgICAgYm90dG9tOiAwcHg7CiAgICB9CiAgICAuZWwtc2Nyb2xsYmFyX193cmFwIHsKICAgICAgaGVpZ2h0OiA0OXB4OwogICAgfQogIH0KfQo="},{"version":3,"sources":["ScrollPane.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ScrollPane.vue","sourceRoot":"src/pages/share-platform-admin/views/layout/components/TagsView","sourcesContent":["<template>\n  <el-scrollbar\n    ref=\"scrollContainer\"\n    :vertical=\"false\"\n    class=\"scroll-container\"\n    @wheel.native.prevent=\"onScroll\"\n  >\n    <slot />\n  </el-scrollbar>\n</template>\n\n<script>\nconst tagAndTagSpacing = 4; // tagAndTagSpacing\n\nexport default {\n  name: 'ScrollPane',\n  data() {\n    return {\n      left: 0\n    };\n  },\n  computed: {\n    scrollWrapper() {\n      return this.$refs.scrollContainer.$refs.wrap;\n    }\n  },\n  mounted() {\n    this.scrollWrapper.addEventListener('scroll', this.emitScroll, true);\n  },\n  beforeDestroy() {\n    this.scrollWrapper.removeEventListener('scroll', this.emitScroll);\n  },\n  methods: {\n    onScroll(e) {\n      const eventDelta = e.wheelDelta || -e.deltaY * 40;\n      const $scrollWrapper = this.scrollWrapper;\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4;\n    },\n    emitScroll() {\n      this.$emit('scroll');\n    },\n    moveToTarget(currentTag) {\n      const $container = this.$refs.scrollContainer.$el;\n      const $containerWidth = $container.offsetWidth;\n      const $scrollWrapper = this.scrollWrapper;\n      const tagList = this.$parent.$refs.tag;\n\n      let firstTag = null;\n      let lastTag = null;\n\n      // find first tag and last tag\n      if (tagList.length > 0) {\n        firstTag = tagList[0];\n        lastTag = tagList[tagList.length - 1];\n      }\n\n      if (firstTag === currentTag) {\n        $scrollWrapper.scrollLeft = 0;\n      } else if (lastTag === currentTag) {\n        $scrollWrapper.scrollLeft =\n          $scrollWrapper.scrollWidth - $containerWidth;\n      } else {\n        // find preTag and nextTag\n        const currentIndex = tagList.findIndex(item => item === currentTag);\n        const prevTag = tagList[currentIndex - 1];\n        const nextTag = tagList[currentIndex + 1];\n\n        // the tag's offsetLeft after of nextTag\n        const afterNextTagOffsetLeft =\n          nextTag.$el.offsetLeft + nextTag.$el.offsetWidth + tagAndTagSpacing;\n\n        // the tag's offsetLeft before of prevTag\n        const beforePrevTagOffsetLeft =\n          prevTag.$el.offsetLeft - tagAndTagSpacing;\n\n        if (\n          afterNextTagOffsetLeft >\n          $scrollWrapper.scrollLeft + $containerWidth\n        ) {\n          $scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth;\n        } else if (beforePrevTagOffsetLeft < $scrollWrapper.scrollLeft) {\n          $scrollWrapper.scrollLeft = beforePrevTagOffsetLeft;\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.scroll-container {\n  white-space: nowrap;\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  ::v-deep {\n    .el-scrollbar__bar {\n      bottom: 0px;\n    }\n    .el-scrollbar__wrap {\n      height: 49px;\n    }\n  }\n}\n</style>\n"]}]}