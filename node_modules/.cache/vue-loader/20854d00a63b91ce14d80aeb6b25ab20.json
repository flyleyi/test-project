{"remainingRequest":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/catering/views/system/User/components/PermissionModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/catering/views/system/User/components/PermissionModal.vue","mtime":1645178321130},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBub3JtYWxDaGVja2JveEljb24gZnJvbSAnQC9hc3NldHMvaW1hZ2VzL2ljb24vY2hlY2tib3gtbm9ybWFsLnBuZyc7CmltcG9ydCBzZWxlY3RlZENoZWNrYm94SWNvbiBmcm9tICdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9jaGVja2JveC1zZWxlY3RlZC5wbmcnOwppbXBvcnQgewogIGJhc2VUcmVlV2l0aFNjaG9vbCwKICBiYXRjaFNhdmVVc2VyU2Nob29sUG93ZXIKfSBmcm9tICcuLy4uLy4uLy4uLy4uL2FwaS9zeXN0ZW0vdXNlcic7CmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogWydkaWFsb2dWaXNpYmxlJywgJ3N0YWZmQ29kZUxpc3QnXSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbm9ybWFsQ2hlY2tib3hJY29uOiBub3JtYWxDaGVja2JveEljb24sCiAgICAgIHNlbGVjdGVkQ2hlY2tib3hJY29uOiBzZWxlY3RlZENoZWNrYm94SWNvbiwKICAgICAgdGFibGVEYXRhOiBbXQogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBkaWFsb2dWaXNpYmxlOiB7CiAgICAgIGhhbmRsZXIodmFsKSB7CiAgICAgICAgaWYgKHZhbCkgewogICAgICAgICAgdGhpcy5nZXRUYWJsZURhdGEoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGdldFRhYmxlRGF0YSgpIHsKICAgICAgaWYgKHRoaXMuc3RhZmZDb2RlTGlzdC5sZW5ndGggPT09IDApIHJldHVybjsKICAgICAgYmFzZVRyZWVXaXRoU2Nob29sKHsgc3RhZmZDb2RlOiAnJyB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgY29uc3QgcmVzRGF0YSA9IHJlcy5kYXRhIHx8IFtdOwogICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YShyZXNEYXRhKTsKICAgICAgfSk7CiAgICB9LAogICAgdHJhbnNmb3JtRGF0YShyZXNEYXRhKSB7CiAgICAgIGxldCB0YWJsZURhdGEgPSBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXNEYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByZXNEYXRhW2ldLmNoaWxkTGlzdC5sZW5ndGg7IGorKykgewogICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCByZXNEYXRhW2ldLmNoaWxkTGlzdFtqXS5jaGlsZExpc3QubGVuZ3RoOyBrKyspIHsKICAgICAgICAgICAgZm9yICgKICAgICAgICAgICAgICBsZXQgbCA9IDA7CiAgICAgICAgICAgICAgbCA8IHJlc0RhdGFbaV0uY2hpbGRMaXN0W2pdLmNoaWxkTGlzdFtrXS5zY2hvb2xMaXN0Lmxlbmd0aDsKICAgICAgICAgICAgICBsKysKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgbGV0IHNjaG9vbEJyYW5jaExpc3QgPSBbXTsKICAgICAgICAgICAgICBmb3IgKAogICAgICAgICAgICAgICAgbGV0IG0gPSAwOwogICAgICAgICAgICAgICAgbSA8CiAgICAgICAgICAgICAgICByZXNEYXRhW2ldLmNoaWxkTGlzdFtqXS5jaGlsZExpc3Rba10uc2Nob29sTGlzdFtsXQogICAgICAgICAgICAgICAgICAuc2Nob29sQnJhbmNoUmVzcER0b0xpc3QubGVuZ3RoOwogICAgICAgICAgICAgICAgbSsrCiAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICBzY2hvb2xCcmFuY2hMaXN0LnB1c2goewogICAgICAgICAgICAgICAgICBzY2hvb2xCcmFuY2hOYW1lOgogICAgICAgICAgICAgICAgICAgIHJlc0RhdGFbaV0uY2hpbGRMaXN0W2pdLmNoaWxkTGlzdFtrXS5zY2hvb2xMaXN0W2xdCiAgICAgICAgICAgICAgICAgICAgICAuc2Nob29sQnJhbmNoUmVzcER0b0xpc3RbbV0ubmFtZSwKICAgICAgICAgICAgICAgICAgc2Nob29sQnJhbmNoSWQ6CiAgICAgICAgICAgICAgICAgICAgcmVzRGF0YVtpXS5jaGlsZExpc3Rbal0uY2hpbGRMaXN0W2tdLnNjaG9vbExpc3RbbF0KICAgICAgICAgICAgICAgICAgICAgIC5zY2hvb2xCcmFuY2hSZXNwRHRvTGlzdFttXS5pZCwKICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6CiAgICAgICAgICAgICAgICAgICAgcmVzRGF0YVtpXS5jaGlsZExpc3Rbal0uY2hpbGRMaXN0W2tdLnNjaG9vbExpc3RbbF0KICAgICAgICAgICAgICAgICAgICAgIC5zY2hvb2xCcmFuY2hSZXNwRHRvTGlzdFttXS5pc1NlbGVjdGVkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGFibGVEYXRhLnB1c2goewogICAgICAgICAgICAgICAgcHJvdmluY2U6IHJlc0RhdGFbaV0ubmFtZSwKICAgICAgICAgICAgICAgIHByb3ZpbmNlSWQ6IHJlc0RhdGFbaV0uaWQsCiAgICAgICAgICAgICAgICBwcm92aW5jZVNlbGVjdGVkOgogICAgICAgICAgICAgICAgICByZXNEYXRhW2ldLmNoaWxkTGlzdFtqXS5jaGlsZExpc3Rba10uc2Nob29sTGlzdFtsXS5pc1NlbGVjdGVkLAogICAgICAgICAgICAgICAgcHJvdmluY2VIaWRkZW46IGogIT09IDAgfHwgayAhPT0gMCB8fCBsICE9IDAsCiAgICAgICAgICAgICAgICBjaXR5OiByZXNEYXRhW2ldLmNoaWxkTGlzdFtqXS5uYW1lLAogICAgICAgICAgICAgICAgY2l0eUlkOiByZXNEYXRhW2ldLmNoaWxkTGlzdFtqXS5pZCwKICAgICAgICAgICAgICAgIGNpdHlIaWRkZW46IGsgIT09IDAgfHwgbCAhPSAwLAogICAgICAgICAgICAgICAgY2l0eVNlbGVjdGVkOgogICAgICAgICAgICAgICAgICByZXNEYXRhW2ldLmNoaWxkTGlzdFtqXS5jaGlsZExpc3Rba10uc2Nob29sTGlzdFtsXS5pc1NlbGVjdGVkLAogICAgICAgICAgICAgICAgZGlzdHJpY3Q6IHJlc0RhdGFbaV0uY2hpbGRMaXN0W2pdLmNoaWxkTGlzdFtrXS5uYW1lLAogICAgICAgICAgICAgICAgZGlzdHJpY3RJZDogcmVzRGF0YVtpXS5jaGlsZExpc3Rbal0uY2hpbGRMaXN0W2tdLmlkLAogICAgICAgICAgICAgICAgZGlzdHJpY3RIaWRkZW46IGwgIT0gMCwKICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VsZWN0ZWQ6CiAgICAgICAgICAgICAgICAgIHJlc0RhdGFbaV0uY2hpbGRMaXN0W2pdLmNoaWxkTGlzdFtrXS5zY2hvb2xMaXN0W2xdLmlzU2VsZWN0ZWQsCiAgICAgICAgICAgICAgICBzY2hvb2w6IHJlc0RhdGFbaV0uY2hpbGRMaXN0W2pdLmNoaWxkTGlzdFtrXS5zY2hvb2xMaXN0W2xdLm5hbWUsCiAgICAgICAgICAgICAgICBzY2hvb2xJZDogcmVzRGF0YVtpXS5jaGlsZExpc3Rbal0uY2hpbGRMaXN0W2tdLnNjaG9vbExpc3RbbF0uaWQsCiAgICAgICAgICAgICAgICBzY2hvb2xTZWxlY3RlZDoKICAgICAgICAgICAgICAgICAgcmVzRGF0YVtpXS5jaGlsZExpc3Rbal0uY2hpbGRMaXN0W2tdLnNjaG9vbExpc3RbbF0uaXNTZWxlY3RlZCwKICAgICAgICAgICAgICAgIHNjaG9vbEJyYW5jaExpc3Q6IHNjaG9vbEJyYW5jaExpc3QKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICB0YWJsZURhdGEuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICBpdGVtLnByb3ZpbmNlU2VsZWN0ZWQgPSB0YWJsZURhdGEKICAgICAgICAgIC5maWx0ZXIoaXQgPT4gaXRlbS5wcm92aW5jZUlkID09PSBpdC5wcm92aW5jZUlkKQogICAgICAgICAgLnNvbWUocHJvdmluY2UgPT4gcHJvdmluY2UucHJvdmluY2VTZWxlY3RlZCk7CiAgICAgICAgaXRlbS5jaXR5U2VsZWN0ZWQgPSB0YWJsZURhdGEKICAgICAgICAgIC5maWx0ZXIoaXQgPT4gaXRlbS5jaXR5SWQgPT09IGl0LmNpdHlJZCkKICAgICAgICAgIC5zb21lKGNpdHkgPT4gY2l0eS5jaXR5U2VsZWN0ZWQpOwogICAgICAgIGl0ZW0uZGlzdHJpY3RTZWxlY3RlZCA9IHRhYmxlRGF0YQogICAgICAgICAgLmZpbHRlcihpdCA9PiBpdGVtLmRpc3RyaWN0SWQgPT09IGl0LmRpc3RyaWN0SWQpCiAgICAgICAgICAuc29tZShkaXN0cmljdCA9PiBkaXN0cmljdC5kaXN0cmljdFNlbGVjdGVkKTsKICAgICAgfSk7CiAgICAgIHRoaXMudGFibGVEYXRhID0gdGFibGVEYXRhOwogICAgfSwKCiAgICBjaGVja1Byb3ZpbmNlKGluZGV4LCBuZWVkQ2hpbGQgPSB0cnVlKSB7CiAgICAgIGxldCBzdGF0dXMgPSAhdGhpcy50YWJsZURhdGFbaW5kZXhdLnByb3ZpbmNlU2VsZWN0ZWQ7CiAgICAgIGxldCBwcm92aW5jZSA9IHRoaXMudGFibGVEYXRhW2luZGV4XS5wcm92aW5jZTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlRGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0aGlzLnRhYmxlRGF0YVtpXS5wcm92aW5jZSA9PT0gcHJvdmluY2UpIHsKICAgICAgICAgIHRoaXMudGFibGVEYXRhW2ldLnByb3ZpbmNlU2VsZWN0ZWQgPSBzdGF0dXM7CiAgICAgICAgICBpZiAobmVlZENoaWxkKSB7CiAgICAgICAgICAgIHRoaXMudGFibGVEYXRhW2ldLmNpdHlTZWxlY3RlZCA9IHN0YXR1czsKICAgICAgICAgICAgdGhpcy50YWJsZURhdGFbaV0uZGlzdHJpY3RTZWxlY3RlZCA9IHN0YXR1czsKICAgICAgICAgICAgdGhpcy50YWJsZURhdGFbaV0uc2Nob29sU2VsZWN0ZWQgPSBzdGF0dXM7CiAgICAgICAgICAgIGZvciAoCiAgICAgICAgICAgICAgbGV0IGogPSAwOwogICAgICAgICAgICAgIGogPCB0aGlzLnRhYmxlRGF0YVtpXS5zY2hvb2xCcmFuY2hMaXN0Lmxlbmd0aDsKICAgICAgICAgICAgICBqKysKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgdGhpcy50YWJsZURhdGFbaV0uc2Nob29sQnJhbmNoTGlzdFtqXS5zZWxlY3RlZCA9IHN0YXR1czsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGNoZWNrQ2l0eShpbmRleCwgbmVlZENoaWxkID0gdHJ1ZSkgewogICAgICBsZXQgc3RhdHVzID0gIXRoaXMudGFibGVEYXRhW2luZGV4XS5jaXR5U2VsZWN0ZWQ7CiAgICAgIGxldCBwcm92aW5jZUlkID0gdGhpcy50YWJsZURhdGFbaW5kZXhdLnByb3ZpbmNlSWQ7CiAgICAgIGxldCBjaXR5SWQgPSB0aGlzLnRhYmxlRGF0YVtpbmRleF0uY2l0eUlkOwogICAgICBsZXQgcHJvdmluY2VJbmRleCA9IHRoaXMudGFibGVEYXRhLmZpbmRJbmRleCgKICAgICAgICBpdGVtID0+IGl0ZW0ucHJvdmluY2VJZCA9PT0gcHJvdmluY2VJZAogICAgICApOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGFibGVEYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKAogICAgICAgICAgdGhpcy50YWJsZURhdGFbaV0ucHJvdmluY2VJZCA9PT0gcHJvdmluY2VJZCAmJgogICAgICAgICAgdGhpcy50YWJsZURhdGFbaV0uY2l0eUlkID09PSBjaXR5SWQKICAgICAgICApIHsKICAgICAgICAgIHRoaXMudGFibGVEYXRhW2ldLmNpdHlTZWxlY3RlZCA9IHN0YXR1czsKICAgICAgICAgIGlmIChuZWVkQ2hpbGQpIHsKICAgICAgICAgICAgdGhpcy50YWJsZURhdGFbaV0uZGlzdHJpY3RTZWxlY3RlZCA9IHN0YXR1czsKICAgICAgICAgICAgdGhpcy50YWJsZURhdGFbaV0uc2Nob29sU2VsZWN0ZWQgPSBzdGF0dXM7CiAgICAgICAgICAgIGZvciAoCiAgICAgICAgICAgICAgbGV0IGogPSAwOwogICAgICAgICAgICAgIGogPCB0aGlzLnRhYmxlRGF0YVtpXS5zY2hvb2xCcmFuY2hMaXN0Lmxlbmd0aDsKICAgICAgICAgICAgICBqKysKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgdGhpcy50YWJsZURhdGFbaV0uc2Nob29sQnJhbmNoTGlzdFtqXS5zZWxlY3RlZCA9IHN0YXR1czsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoc3RhdHVzKSB7CiAgICAgICAgaWYgKCF0aGlzLnRhYmxlRGF0YVtwcm92aW5jZUluZGV4XS5wcm92aW5jZVNlbGVjdGVkKSB7CiAgICAgICAgICB0aGlzLmNoZWNrUHJvdmluY2UocHJvdmluY2VJbmRleCwgZmFsc2UpOwogICAgICAgICAgLy8gdGhpcy50YWJsZURhdGFbY2l0eUluZGV4XS5jaXR5U2VsZWN0ZWQgPSBzdGF0dXM7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGxldCBjaXR5TGlzdCA9IHRoaXMudGFibGVEYXRhLmZpbHRlcigKICAgICAgICAgIGl0ZW0gPT4gaXRlbS5wcm92aW5jZUlkID09PSBwcm92aW5jZUlkCiAgICAgICAgKTsKICAgICAgICBsZXQgYWxsQ2l0eVNlbGVjdCA9IGNpdHlMaXN0LmV2ZXJ5KGl0ZW0gPT4gIWl0ZW0uY2l0eVNlbGVjdGVkKTsKICAgICAgICBpZiAoYWxsQ2l0eVNlbGVjdCkgewogICAgICAgICAgdGhpcy5jaGVja1Byb3ZpbmNlKHByb3ZpbmNlSW5kZXgsIGZhbHNlKTsKICAgICAgICAgIC8vIHRoaXMudGFibGVEYXRhW2NpdHlJbmRleF0uY2l0eVNlbGVjdGVkID0gc3RhdHVzOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGNoZWNrRGlzdHJpY3QoaW5kZXgsIG5lZWRDaGlsZCA9IHRydWUpIHsKICAgICAgbGV0IHN0YXR1cyA9ICF0aGlzLnRhYmxlRGF0YVtpbmRleF0uZGlzdHJpY3RTZWxlY3RlZDsKICAgICAgbGV0IHByb3ZpbmNlSWQgPSB0aGlzLnRhYmxlRGF0YVtpbmRleF0ucHJvdmluY2VJZDsKICAgICAgbGV0IGNpdHlJZCA9IHRoaXMudGFibGVEYXRhW2luZGV4XS5jaXR5SWQ7CiAgICAgIGxldCBkaXN0cmljdElkID0gdGhpcy50YWJsZURhdGFbaW5kZXhdLmRpc3RyaWN0SWQ7CiAgICAgIGxldCBjaXR5SW5kZXggPSB0aGlzLnRhYmxlRGF0YS5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmNpdHlJZCA9PT0gY2l0eUlkKTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlRGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICgKICAgICAgICAgIHRoaXMudGFibGVEYXRhW2ldLnByb3ZpbmNlSWQgPT09IHByb3ZpbmNlSWQgJiYKICAgICAgICAgIHRoaXMudGFibGVEYXRhW2ldLmNpdHlJZCA9PT0gY2l0eUlkICYmCiAgICAgICAgICB0aGlzLnRhYmxlRGF0YVtpXS5kaXN0cmljdElkID09PSBkaXN0cmljdElkCiAgICAgICAgKSB7CiAgICAgICAgICB0aGlzLnRhYmxlRGF0YVtpXS5kaXN0cmljdFNlbGVjdGVkID0gc3RhdHVzOwogICAgICAgICAgaWYgKG5lZWRDaGlsZCkgewogICAgICAgICAgICB0aGlzLnRhYmxlRGF0YVtpXS5zY2hvb2xTZWxlY3RlZCA9IHN0YXR1czsKICAgICAgICAgICAgZm9yICgKICAgICAgICAgICAgICBsZXQgaiA9IDA7CiAgICAgICAgICAgICAgaiA8IHRoaXMudGFibGVEYXRhW2ldLnNjaG9vbEJyYW5jaExpc3QubGVuZ3RoOwogICAgICAgICAgICAgIGorKwogICAgICAgICAgICApIHsKICAgICAgICAgICAgICB0aGlzLnRhYmxlRGF0YVtpXS5zY2hvb2xCcmFuY2hMaXN0W2pdLnNlbGVjdGVkID0gc3RhdHVzOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChzdGF0dXMpIHsKICAgICAgICBpZiAoIXRoaXMudGFibGVEYXRhW2NpdHlJbmRleF0uY2l0eVNlbGVjdGVkKSB7CiAgICAgICAgICB0aGlzLmNoZWNrQ2l0eShjaXR5SW5kZXgsIGZhbHNlKTsKICAgICAgICAgIC8vIHRoaXMudGFibGVEYXRhW2NpdHlJbmRleF0uY2l0eVNlbGVjdGVkID0gc3RhdHVzOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBsZXQgZGlzdHJpY3RMaXN0ID0gdGhpcy50YWJsZURhdGEuZmlsdGVyKAogICAgICAgICAgaXRlbSA9PiBpdGVtLmNpdHlJZCA9PT0gY2l0eUlkCiAgICAgICAgKTsKICAgICAgICBsZXQgYWxsRGlzdHJpY3RTZWxlY3QgPSBkaXN0cmljdExpc3QuZXZlcnkoCiAgICAgICAgICBpdGVtID0+ICFpdGVtLmRpc3RyaWN0U2VsZWN0ZWQKICAgICAgICApOwogICAgICAgIGlmIChhbGxEaXN0cmljdFNlbGVjdCkgewogICAgICAgICAgdGhpcy5jaGVja0NpdHkoY2l0eUluZGV4LCBmYWxzZSk7CiAgICAgICAgICAvLyB0aGlzLnRhYmxlRGF0YVtjaXR5SW5kZXhdLmNpdHlTZWxlY3RlZCA9IHN0YXR1czsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBjaGVja1NjaG9vbChpbmRleCwgbmVlZENoaWxkID0gdHJ1ZSkgewogICAgICBsZXQgc3RhdHVzID0gIXRoaXMudGFibGVEYXRhW2luZGV4XS5zY2hvb2xTZWxlY3RlZDsKICAgICAgbGV0IHByb3ZpbmNlSWQgPSB0aGlzLnRhYmxlRGF0YVtpbmRleF0ucHJvdmluY2VJZDsKICAgICAgbGV0IGNpdHlJZCA9IHRoaXMudGFibGVEYXRhW2luZGV4XS5jaXR5SWQ7CiAgICAgIGxldCBkaXN0cmljdElkID0gdGhpcy50YWJsZURhdGFbaW5kZXhdLmRpc3RyaWN0SWQ7CiAgICAgIGxldCBzY2hvb2xJZCA9IHRoaXMudGFibGVEYXRhW2luZGV4XS5zY2hvb2xJZDsKICAgICAgbGV0IGRpc3RyaWN0SW5kZXggPSB0aGlzLnRhYmxlRGF0YS5maW5kSW5kZXgoCiAgICAgICAgaXRlbSA9PiBpdGVtLmRpc3RyaWN0SWQgPT09IGRpc3RyaWN0SWQKICAgICAgKTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlRGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICgKICAgICAgICAgIHRoaXMudGFibGVEYXRhW2ldLnByb3ZpbmNlSWQgPT09IHByb3ZpbmNlSWQgJiYKICAgICAgICAgIHRoaXMudGFibGVEYXRhW2ldLmNpdHlJZCA9PT0gY2l0eUlkICYmCiAgICAgICAgICB0aGlzLnRhYmxlRGF0YVtpXS5kaXN0cmljdElkID09PSBkaXN0cmljdElkICYmCiAgICAgICAgICB0aGlzLnRhYmxlRGF0YVtpXS5zY2hvb2xJZCA9PT0gc2Nob29sSWQKICAgICAgICApIHsKICAgICAgICAgIHRoaXMudGFibGVEYXRhW2ldID0gT2JqZWN0LmFzc2lnbih0aGlzLnRhYmxlRGF0YVtpXSwgewogICAgICAgICAgICBzY2hvb2xTZWxlY3RlZDogc3RhdHVzCiAgICAgICAgICB9KTsKICAgICAgICAgIGlmIChuZWVkQ2hpbGQpIHsKICAgICAgICAgICAgZm9yICgKICAgICAgICAgICAgICBsZXQgaiA9IDA7CiAgICAgICAgICAgICAgaiA8IHRoaXMudGFibGVEYXRhW2ldLnNjaG9vbEJyYW5jaExpc3QubGVuZ3RoOwogICAgICAgICAgICAgIGorKwogICAgICAgICAgICApIHsKICAgICAgICAgICAgICB0aGlzLnRhYmxlRGF0YVtpXS5zY2hvb2xCcmFuY2hMaXN0W2pdLnNlbGVjdGVkID0gc3RhdHVzOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChzdGF0dXMpIHsKICAgICAgICBpZiAoIXRoaXMudGFibGVEYXRhW2Rpc3RyaWN0SW5kZXhdLmRpc3RyaWN0U2VsZWN0ZWQpIHsKICAgICAgICAgIHRoaXMuY2hlY2tEaXN0cmljdChkaXN0cmljdEluZGV4LCBmYWxzZSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGxldCBzY2hvb2xMaXN0ID0gdGhpcy50YWJsZURhdGEuZmlsdGVyKAogICAgICAgICAgaXRlbSA9PiBpdGVtLmRpc3RyaWN0SWQgPT09IGRpc3RyaWN0SWQKICAgICAgICApOwogICAgICAgIGxldCBhbGxTY2hvb2xOb1NlbGVjdCA9IHNjaG9vbExpc3QuZXZlcnkoaXRlbSA9PiAhaXRlbS5zY2hvb2xTZWxlY3RlZCk7CiAgICAgICAgaWYgKGFsbFNjaG9vbE5vU2VsZWN0KSB7CiAgICAgICAgICB0aGlzLmNoZWNrRGlzdHJpY3QoZGlzdHJpY3RJbmRleCwgZmFsc2UpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGNoZWNrU2Nob29sQnJhbmNoKHBhcnRlbnRJbmRleCwgaW5kZXgpIHsKICAgICAgY29uc3Qgc3RhdHVzID0gIXRoaXMudGFibGVEYXRhW3BhcnRlbnRJbmRleF0uc2Nob29sQnJhbmNoTGlzdFtpbmRleF0KICAgICAgICAuc2VsZWN0ZWQ7CiAgICAgIGxldCBkaXN0cmljdElkID0gdGhpcy50YWJsZURhdGFbcGFydGVudEluZGV4XS5kaXN0cmljdElkOwogICAgICBsZXQgY2l0eUlkID0gdGhpcy50YWJsZURhdGFbcGFydGVudEluZGV4XS5jaXR5SWQ7CiAgICAgIGxldCBwcm92aW5jZUlkID0gdGhpcy50YWJsZURhdGFbcGFydGVudEluZGV4XS5wcm92aW5jZUlkOwoKICAgICAgdGhpcy50YWJsZURhdGFbcGFydGVudEluZGV4XS5zY2hvb2xCcmFuY2hMaXN0W2luZGV4XS5zZWxlY3RlZCA9IHN0YXR1czsKICAgICAgaWYgKHN0YXR1cykgewogICAgICAgIGlmICghdGhpcy50YWJsZURhdGFbcGFydGVudEluZGV4XS5zY2hvb2xTZWxlY3RlZCkgewogICAgICAgICAgdGhpcy5jaGVja1NjaG9vbChwYXJ0ZW50SW5kZXgsIGZhbHNlKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IGFsbFNjaG9vbEJyYW5jaExpc3ROb1NlbGVjdCA9IHRoaXMudGFibGVEYXRhWwogICAgICAgICAgcGFydGVudEluZGV4CiAgICAgICAgXS5zY2hvb2xCcmFuY2hMaXN0LmV2ZXJ5KGl0ZW0gPT4gIWl0ZW0uc2VsZWN0ZWQpOwogICAgICAgIGlmIChhbGxTY2hvb2xCcmFuY2hMaXN0Tm9TZWxlY3QpIHsKICAgICAgICAgIHRoaXMuY2hlY2tTY2hvb2wocGFydGVudEluZGV4LCBmYWxzZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgaGFuZGxlQ2FuY2VsKCkgewogICAgICB0aGlzLiRlbWl0KCdoYW5kbGVDYW5jZWwnKTsKICAgIH0sCiAgICBoYW5kbGVDb25maXJtKCkgewogICAgICBsZXQgc3ViTGlzdCA9IFtdOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGFibGVEYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnRhYmxlRGF0YVtpXS5zY2hvb2xCcmFuY2hMaXN0Lmxlbmd0aDsgaisrKSB7CiAgICAgICAgICBsZXQgYXJyID0gdGhpcy50YWJsZURhdGFbaV0uc2Nob29sQnJhbmNoTGlzdC5maWx0ZXIoCiAgICAgICAgICAgIGl0ZW0gPT4gIWl0ZW0uc2VsZWN0ZWQKICAgICAgICAgICk7CiAgICAgICAgICBpZiAodGhpcy50YWJsZURhdGFbaV0uc2Nob29sQnJhbmNoTGlzdFtqXS5zZWxlY3RlZCkgewogICAgICAgICAgICBzdWJMaXN0LnB1c2goewogICAgICAgICAgICAgIHNjaG9vbElkOiB0aGlzLnRhYmxlRGF0YVtpXS5zY2hvb2xJZCwKICAgICAgICAgICAgICBzY2hvb2xCcmFuY2hJZDogdGhpcy50YWJsZURhdGFbaV0uc2Nob29sQnJhbmNoTGlzdFtqXQogICAgICAgICAgICAgICAgLnNjaG9vbEJyYW5jaElkLAogICAgICAgICAgICAgIGFsbFNlbGVjdGVkOiBhcnIubGVuZ3RoID8gMCA6IDEgLy/liKTmlq3lrabpg6jmmK/lkKblhajpgIkKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGJhdGNoU2F2ZVVzZXJTY2hvb2xQb3dlcih7CiAgICAgICAgc3RhZmZDb2RlOiB0aGlzLnN0YWZmQ29kZUxpc3QsCiAgICAgICAgc3ViTGlzdAogICAgICB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsCiAgICAgICAgICBtZXNzYWdlOiAn5L+d5a2Y5oiQ5YqfIScKICAgICAgICB9KTsKICAgICAgICB0aGlzLiRlbWl0KCdoYW5kbGVTdWJtaXQnKTsKICAgICAgfSk7CiAgICB9CiAgfQp9Owo="},null]}