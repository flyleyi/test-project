{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/teaching-points-h5/views/teacher-points/add.vue?vue&type=template&id=2cc88c76&scoped=true&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/teaching-points-h5/views/teacher-points/add.vue","mtime":1627979214413},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}