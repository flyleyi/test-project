{"remainingRequest":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/catering/views/meals/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/src/pages/catering/views/meals/index.vue","mtime":1645178321128},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/yjy-projects/multi-project/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}