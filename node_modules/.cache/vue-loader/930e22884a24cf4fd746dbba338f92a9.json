{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/school-book/views/questManage/ClassifyList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/school-book/views/questManage/ClassifyList.vue","mtime":1627979214328},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ClassifyList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"ClassifyList.vue","sourceRoot":"src/pages/school-book/views/questManage","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <b-table\n      ref=\"bTable\"\n      loading\n      empty-text=\"问题分类暂无数据\"\n      :headers=\"headers\"\n      :form-items=\"formItems\"\n      :ajax-get-data=\"ajaxGetData\"\n      :toolbars=\"toolbars\"\n      @reset-form=\"resetForm\"\n      :pageLimit=\"10\"\n      :show-column=\"false\"\n      :showRefresh=\"false\"\n    ></b-table>\n    <!-- 新增编辑弹窗 -->\n    <el-dialog\n      width=\"560px\"\n      center\n      :visible.sync=\"dialogForm.visible\"\n      :title=\"dialogForm.isEdit ? '编辑问题分类' : '新增问题分类'\"\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n      :before-close=\"onBeforeClose\"\n      @close=\"onCloseForm\"\n    >\n      <c-dynamic-form\n        ref=\"elForm\"\n        :form-data=\"dialogFormData\"\n        :form-items=\"dialogFormItems\"\n        :form-attrs=\"dialogFormAttrs\"\n        @change-model=\"model => (dialogFormData = model)\"\n      ></c-dynamic-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button\n          size=\"small\"\n          :loading=\"dialogForm.loading\"\n          @click=\"dialogForm.visible = false\"\n        >\n          取消\n        </el-button>\n        <el-button\n          size=\"small\"\n          type=\"primary\"\n          :loading=\"dialogForm.loading\"\n          @click.stop.prevent=\"onSubmitForm\"\n        >\n          确定\n        </el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport BTable from '@/components/business/BTable';\nimport CDynamicForm from '@/components/common/CDynamicForm/index';\nimport { Dialog, Button, Message } from 'element-ui';\nimport {\n  getQuestionType,\n  addQuestionType,\n  updateQuestionType,\n  deleteQuestionType,\n  topQuestionType\n} from '../../api/question';\nimport { getIdsArr } from '../../plugins/common/utils';\nexport default {\n  name: 'ClassifyList',\n  components: {\n    BTable,\n    CDynamicForm,\n    [Dialog.name]: Dialog,\n    [Button.name]: Button\n  },\n  props: {},\n  data() {\n    return {\n      // 表单列\n      headers: [\n        {\n          type: 'selection'\n        },\n        {\n          type: 'index',\n          label: '序号'\n        },\n        {\n          label: '分类编号',\n          prop: 'id'\n        },\n        {\n          label: '分类名称',\n          prop: 'questionType'\n        },\n        {\n          label: '排序值',\n          prop: 'sortIndex'\n        },\n        {\n          label: '编辑时间',\n          prop: 'updateTime'\n        },\n        {\n          label: '操作',\n          colType: 'btns',\n          btns: [\n            {\n              label: '编辑',\n              type: 'text',\n              size: 'mini',\n              click: this.editClassify,\n              hidden: () => !this.$has(['quest-type-edit'])\n            },\n            {\n              label: '删除',\n              type: 'text',\n              size: 'mini',\n              click: this.deleteClassify,\n              hidden: () => !this.$has(['quest-type-delete'])\n            },\n            {\n              label: '置顶',\n              type: 'text',\n              size: 'mini',\n              click: this.topClassify,\n              hidden: () => !this.$has(['quest-type-up'])\n            }\n          ]\n        }\n      ],\n      // 查询表单配置\n      formItems: [\n        {\n          type: 'date-picker',\n          prop: 'updateTime',\n          label: '编辑时间：',\n          attrs: {\n            type: 'daterange',\n            'value-format': 'yyyy-MM-dd'\n          }\n        }\n      ],\n      // 工具栏\n      toolbars: [\n        {\n          label: '新增',\n          click: this.addClassify,\n          hidden: () => !this.$has(['quest-type-add'])\n        },\n        {\n          label: '批量删除',\n          click: this.deleteClassify,\n          hidden: () => !this.$has(['quest-type-delete'])\n        }\n      ],\n      //弹窗表单\n      dialogForm: {\n        visible: false,\n        isEdit: false,\n        loading: false\n      },\n      // 弹窗表单子项\n      dialogFormItems: [\n        {\n          type: 'input',\n          prop: 'questionType',\n          label: '分类名称：',\n          attrs: {\n            maxlength: 6,\n            placeholder: '请输入六字以内分类名称'\n          }\n        },\n        {\n          type: 'input',\n          prop: 'sortIndex',\n          label: '排序值：',\n          attrs: {\n            placeholder: '仅限非0数字'\n          }\n        }\n      ],\n      //弹窗表单属性\n      dialogFormAttrs: {\n        'label-position': 'right',\n        'label-width': '130px',\n        rules: {\n          questionType: [\n            {\n              required: true,\n              trigger: 'blur',\n              message: '分类名称未填写'\n            }\n          ],\n          sortIndex: [\n            {\n              required: true,\n              trigger: 'blur',\n              message: '排序值未填写'\n            },\n            {\n              // eslint-disable-next-line no-useless-escape\n              pattern: /^-?[1-9]\\d*$/,\n              trigger: 'blur',\n              message: '仅限非0数字'\n            }\n          ]\n        }\n      },\n      //弹窗表单默认值（编辑时传入）\n      dialogFormData: {}\n    };\n  },\n  computed: {},\n  watch: {},\n  created() {},\n  mounted() {},\n  methods: {\n    //重置表格查询\n    resetForm() {\n      this.$refs['bTable'].onQueryForm();\n    },\n    /**\n     * 请求table数据\n     */\n    ajaxGetData(params) {\n      if (params.updateTime) {\n        params.startTime = params.updateTime[0];\n        params.endTime = params.updateTime[1];\n      }\n      delete params.updateTime;\n      return getQuestionType({\n        ...params\n      });\n    },\n    /**\n     * 刷新列表\n     */\n    refreshTable() {\n      this.$nextTick(() => {\n        this.$refs.bTable && this.$refs.bTable.onRefreshTable();\n      });\n    },\n    /**\n     * 初始化新建表单的数据默认值\n     */\n    initDialogFormData() {\n      this.dialogFormData = {\n        questionType: '',\n        sortIndex: ''\n      };\n    },\n    /**\n     * 新增问题分类\n     */\n    addClassify() {\n      this.dialogForm.visible = true;\n      this.dialogForm.isEdit = false;\n    },\n    /**\n     * 编辑问题分类\n     */\n    editClassify(row) {\n      Object.assign(this.dialogFormData, row);\n      this.dialogForm.visible = true;\n      this.dialogForm.isEdit = true;\n      this.$nextTick(() => {\n        this.$refs['elForm'].init();\n      });\n    },\n    /**\n     * 关闭窗口前处理\n     */\n    onBeforeClose(done) {\n      if (this.dialogForm.loading) return;\n      done();\n    },\n    /**\n     * 表单关闭前清除校验并重置数据\n     */\n    onCloseForm() {\n      this.initDialogFormData();\n      this.$refs['elForm'].resetFields();\n    },\n    /**\n     * 提交表单\n     */\n    onSubmitForm() {\n      this.$refs['elForm'].validate().then(() => {\n        // 校验成功\n        this.dialogForm.loading = true;\n        if (!this.dialogForm.isEdit) {\n          addQuestionType(this.dialogFormData)\n            .then(() => {\n              this.$message.success('操作成功');\n              this.dialogForm.visible = false;\n              this.refreshTable();\n            })\n            .finally(() => {\n              this.dialogForm.loading = false;\n            });\n        } else {\n          updateQuestionType(this.dialogFormData)\n            .then(() => {\n              this.$message.success('操作成功');\n              this.dialogForm.visible = false;\n              this.refreshTable();\n            })\n            .finally(() => {\n              this.dialogForm.loading = false;\n            });\n        }\n      });\n    },\n    /**\n     * 删除问题分类\n     */\n    deleteClassify(rows) {\n      if (!rows || rows.length === 0) {\n        this.$message('至少选择一个问题分类');\n        return;\n      }\n      this.$confirm('确定要删除当前问题分类?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        deleteQuestionType(getIdsArr(rows))\n          .then(() => {\n            this.$message.success('操作成功');\n          })\n          .finally(() => {\n            this.refreshTable();\n          });\n      });\n    },\n    /**\n     * 置顶\n     */\n    topClassify(row) {\n      this.$confirm('确定要把当前问题分类置顶?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        topQuestionType({ id: row.id })\n          .then(() => {\n            this.$message.success('操作成功');\n          })\n          .finally(() => {\n            this.refreshTable();\n          });\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped></style>\n"]}]}