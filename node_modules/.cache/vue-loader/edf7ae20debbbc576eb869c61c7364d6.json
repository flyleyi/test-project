{"remainingRequest":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/sims/views/system/User/components/ClassAuth.vue?vue&type=style&index=0&id=e71fb96a&scoped=true&lang=css&","dependencies":[{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/src/pages/sims/views/system/User/components/ClassAuth.vue","mtime":1627979214401},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fuyueyi/Desktop/practice/mutilwap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNsYXNzLXNlbGVjdGVkIHsKICBmb250LXNpemU6IDE0cHg7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgbGluZS1oZWlnaHQ6IDI0cHg7Cn0K"},{"version":3,"sources":["ClassAuth.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0aA;AACA;AACA;AACA;AACA","file":"ClassAuth.vue","sourceRoot":"src/pages/sims/views/system/User/components","sourcesContent":["<template>\n  <div>\n    <el-button type=\"primary\" @click=\"onSelect\">请选择</el-button>\n    <el-button type=\"text\" @click=\"onOpenSelectedDialog\">\n      已授权{{ value.length }}个班级\n    </el-button>\n    <!-- 班级选择列表 -->\n    <el-dialog\n      :visible.sync=\"visible\"\n      :title=\"title || '班级权限'\"\n      width=\"860px\"\n      center\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n      :show-close=\"false\"\n      :append-to-body=\"true\"\n      v-on=\"$listeners\"\n    >\n      <b-table\n        :key=\"count\"\n        class=\"b-table\"\n        ref=\"bTable\"\n        loading\n        row-key=\"id\"\n        :form-items=\"customFormItems\"\n        :immediate-load=\"false\"\n        :page-limit=\"10\"\n        :headers=\"columns\"\n        :show-column=\"false\"\n        :ajax-get-data=\"ajaxGetData\"\n        :reserve-selection=\"true\"\n        @select=\"handleSelect\"\n        @select-all=\"\n          selections =>\n            handleSelectAll(selections, $refs.bTable.$refs.table.$refs.table)\n        \"\n        @table-data-change=\"\n          selection =>\n            changeTableData(selection, $refs.bTable.$refs.table.$refs.table)\n        \"\n      >\n        <!-- 列表前的插槽 -->\n        <div class=\"class-selected\" slot=\"table-before\">\n          已选中{{ selection.length }}个班级\n        </div>\n        <!-- 多选列 -->\n        <!-- <template slot=\"column|id\" slot-scope=\"{ row }\">\n          <el-checkbox v-model=\"selected\" :label=\"row.id\"><span /></el-checkbox>\n        </template>\n        <template slot=\"column|header|id\">\n          <el-checkbox\n            :key=\"isAllCheck\"\n            :indeterminate=\"selected.length > 0 && !isAllCheck\"\n            :value=\"isAllCheck\"\n            @click.native=\"onClickAllCheck\"\n          >\n            {{ isAllCheck }}\n          </el-checkbox>\n        </template> -->\n      </b-table>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button\n          :loading=\"confirmLoading\"\n          size=\"small\"\n          @click=\"visible = false\"\n        >\n          取消\n        </el-button>\n        <el-button\n          :loading=\"confirmLoading\"\n          size=\"small\"\n          type=\"primary\"\n          @click=\"onClickConfirm\"\n        >\n          确定\n        </el-button>\n      </span>\n    </el-dialog>\n    <!-- 已选中班级列表 -->\n    <el-dialog\n      :key=\"count\"\n      title=\"已授权班级\"\n      :visible.sync=\"selectedVisible\"\n      width=\"860px\"\n      center\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"false\"\n      :show-close=\"false\"\n      :append-to-body=\"true\"\n    >\n      <!-- 列表前的插槽 -->\n      <div class=\"class-selected\">已选中{{ selection.length }}个班级</div>\n      <c-table\n        ref=\"cTable\"\n        row-key=\"id\"\n        border\n        size=\"small\"\n        :data=\"selectedList\"\n        :headers=\"columns\"\n        :loading=\"selectedDialogLoading\"\n        @select=\"handleSelect\"\n        @select-all=\"\n          selection => handleSelectAll(selection, $refs.cTable.$refs.table)\n        \"\n      >\n      </c-table>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button\n          :loading=\"confirmLoading\"\n          size=\"small\"\n          @click=\"selectedVisible = false\"\n        >\n          取消\n        </el-button>\n        <el-button\n          :loading=\"confirmLoading\"\n          size=\"small\"\n          type=\"primary\"\n          @click=\"onClickConfirm\"\n        >\n          确定\n        </el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  Dialog,\n  Button,\n  Message,\n  Checkbox,\n  Popover,\n  Scrollbar\n} from 'element-ui';\nimport BTable from '@/components/business/BTable';\nimport CTable from '@/components/common/CTable';\nimport {\n  queryAllClassByDepartCodes,\n  queryClassByCodeList\n} from '../../../../api/system/user';\nimport { dict } from '../../../../plugins/core/dict';\n\nexport default {\n  name: 'ClassAuth',\n  components: {\n    [Dialog.name]: Dialog,\n    [Button.name]: Button,\n    [BTable.name]: BTable,\n    [Checkbox.name]: Checkbox,\n    [Popover.name]: Popover,\n    [Scrollbar.name]: Scrollbar,\n    [CTable.name]: CTable\n  },\n  props: {\n    /**\n     * 选择中的班级列表\n     */\n    value: {\n      type: Array,\n      default: () => []\n    },\n    /**\n     * 标题\n     */\n    title: {\n      type: String,\n      default: ''\n    },\n    /**\n     * 请求方法\n     */\n    ajax: {\n      type: Function,\n      default: null\n    },\n    /**\n     * 其他参数\n     */\n    otherParams: {\n      type: Object,\n      default: null\n    },\n    /**\n     * 查询表单项\n     */\n    customFormItems: {\n      type: Array,\n      default: () => [\n        {\n          type: 'input',\n          label: '班级名称',\n          prop: 'className',\n          attrs: {\n            maxlength: 30\n          }\n        }\n      ]\n    },\n    /**\n     * 异步获取数据\n     */\n    customAjax: {\n      type: Function,\n      default: null\n    },\n    /**\n     * 自定义列\n     */\n    customColumns: {\n      type: Array,\n      default: () => [\n        {\n          label: '学年',\n          prop: 'signYearType',\n          formatter(model, column, value) {\n            return dict('XNM', value);\n          }\n        },\n        {\n          label: '学部',\n          prop: 'departName'\n        },\n        {\n          label: '年级',\n          prop: 'gradeName'\n        },\n        {\n          label: '班型',\n          prop: 'classTypeName'\n        },\n        {\n          label: '班级',\n          prop: 'className'\n        }\n      ]\n    },\n    /**\n     * 最多选择\n     * 默认：0，不限制\n     */\n    limit: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      visible: false, // 模态框显示隐藏\n      selection: [], // 选择的班级列表\n      confirmLoading: false, // 提交中\n      tableData: [], // 列表数据\n      count: 0,\n      selectedVisible: false, // 已选中班级模态框显示与隐藏\n      selectedDialogLoading: false, // 已选中班级模态框加载中\n      selectedList: [] // 选中的班级列表\n    };\n  },\n  computed: {\n    /**\n     * 列表列数据\n     */\n    columns() {\n      let self = this;\n      let columns = this.customColumns;\n      columns.unshift({\n        type: 'selection',\n        label: '选择',\n        prop: 'id',\n        width: '60px'\n      });\n      return columns;\n    }\n  },\n  watch: {\n    /**\n     * 每次显示的时候刷新列表\n     */\n    visible() {\n      this.visible &&\n        this.$nextTick(() => {\n          this.$refs.bTable && this.$refs.bTable.ajaxGetTableDataByPage();\n        });\n    }\n  },\n  created() {},\n  methods: {\n    /**\n     * 获取数据方法\n     */\n    ajaxGetData(params) {\n      params = {\n        ...params,\n        ...this.otherParams\n      };\n      params.departCodes = params.departCode\n        ? params.departCode\n        : params.departCodes.join(',');\n      if (typeof this.customAjax === 'function') return this.customAjax(params);\n      return queryAllClassByDepartCodes(params);\n    },\n    /**\n     * 显示模态框\n     */\n    show() {\n      this.visible = true;\n    },\n    /**\n     * 隐藏模态框\n     */\n    hide() {\n      this.visible = false;\n    },\n    /**\n     * 多选模式确定选择元素\n     */\n    onClickConfirm() {\n      let rows = this.selection.slice(0);\n      // 校验最大选择班级\n      if (this.limit > 0 && rows.length > this.limit)\n        return this.$message.warning(\n          `最多选择${this.limit}项，当前已选择${rows.length}项。`\n        );\n      this.$emit('input', rows);\n      this.$emit('select', rows);\n      // 校验是否需要异步完成后关闭窗口\n      if (typeof this.ajax !== 'function') {\n        this.visible = false;\n        this.selectedVisible = false;\n        return;\n      }\n      this.invokeAjax(rows);\n    },\n    /**\n     * 选择\n     */\n    onSelect() {\n      this.selection = this.value.slice(0);\n      this.visible = true;\n      this.count++;\n    },\n    /**\n     * 执行异步回调接口\n     * @param {Array} rows 班级列表\n     */\n    async invokeAjax(rows) {\n      this.confirmLoading = true;\n      try {\n        let res = await this.ajax(rows);\n      } finally {\n        this.confirmLoading = false;\n        this.visible = false;\n      }\n    },\n    /**\n     * 选中元素\n     * @param {*} row 元素\n     * @param {boolean} selected 是否选中\n     */\n    toggleRowSelected(row, selected) {\n      // 查找元素索引\n      let index = this.selection.findIndex(item => item === row.classCode);\n      selected\n        ? index === -1 && this.selection.push(row.classCode) // 新增\n        : index >= 0 && this.selection.splice(index, 1); // 删除\n    },\n    /**\n     * 选择\n     */\n    handleSelect(selection, row) {\n      // 是否选中\n      let selected = selection.indexOf(row) >= 0;\n      this.toggleRowSelected(row, selected);\n    },\n    // 全选\n    handleSelectAll(selection, table) {\n      // 是否选中\n      let selected = !!selection.length;\n      if (!selected) selection = table.tableData;\n      selection.forEach(item => this.toggleRowSelected(item, selected));\n    },\n    /**\n     * 数据列表变化，回显选中\n     * @param {*} tableData 列表数据\n     */\n    changeTableData(tableData) {\n      this.$nextTick(() => {\n        let table = this.$refs.bTable.$refs.table.$refs.table;\n        // console.log(\n        //   tableData.filter(item => this.selection.find(id => item.id === id))\n        // );\n        // 回显选中\n        table.tableData\n          .filter(item => this.selection.find(row => item.classCode === row))\n          .forEach(item => {\n            table.toggleRowSelection(item, true);\n          });\n      });\n    },\n    /**\n     * 打开已选中班级模态框\n     */\n    onOpenSelectedDialog() {\n      this.count++;\n      this.selection = this.value.slice(0);\n      this.selectedVisible = true;\n      this.selectedDialogLoading = true;\n      queryClassByCodeList(this.value)\n        .then(({ data }) => {\n          this.selectedList = data;\n          this.$nextTick(() => {\n            this.$refs.cTable &&\n              this.$refs.cTable.$refs.table &&\n              this.$refs.cTable.$refs.table.toggleAllSelection();\n          });\n        })\n        .finally(() => {\n          this.selectedDialogLoading = false;\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.class-selected {\n  font-size: 14px;\n  font-weight: bold;\n  line-height: 24px;\n}\n</style>\n"]}]}